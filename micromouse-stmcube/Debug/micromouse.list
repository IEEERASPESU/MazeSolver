
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf2c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800d178  0800d178  0000e178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d410  0800d410  0000f06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d410  0800d410  0000e410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d418  0800d418  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d418  0800d418  0000e418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d41c  0800d41c  0000e41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800d420  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001750  2000006c  0800d48c  0000f06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017bc  0800d48c  0000f7bc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd6b  00000000  00000000  0000f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003888  00000000  00000000  0002ae0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  0002e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149f  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031b5e  00000000  00000000  000315ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201d1  00000000  00000000  0006315d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001391e8  00000000  00000000  0008332e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ee4  00000000  00000000  001bc55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  001c4440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000006c 	.word	0x2000006c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800d160 	.word	0x0800d160

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000070 	.word	0x20000070
 8000288:	0800d160 	.word	0x0800d160

0800028c <strcmp>:
 800028c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000294:	2a01      	cmp	r2, #1
 8000296:	bf28      	it	cs
 8000298:	429a      	cmpcs	r2, r3
 800029a:	d0f7      	beq.n	800028c <strcmp>
 800029c:	1ad0      	subs	r0, r2, r3
 800029e:	4770      	bx	lr

080002a0 <getBoolean>:
    fgets(response, BUFFER_SIZE, stdin);
    int value = atoi(response);
    return value;
}

int getBoolean(char* command) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08c      	sub	sp, #48	@ 0x30
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    printf("%s\n", command);
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f00b ffa3 	bl	800c1f4 <puts>
    fflush(stdout);
 80002ae:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <getBoolean+0x50>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f00b fd81 	bl	800bdbc <fflush>
    char response[BUFFER_SIZE];
    fgets(response, BUFFER_SIZE, stdin);
 80002ba:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <getBoolean+0x50>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	2120      	movs	r1, #32
 80002c6:	4618      	mov	r0, r3
 80002c8:	f00b fdf4 	bl	800beb4 <fgets>
    int value = (strcmp(response, "true\n") == 0);
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4908      	ldr	r1, [pc, #32]	@ (80002f4 <getBoolean+0x54>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffda 	bl	800028c <strcmp>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	bf0c      	ite	eq
 80002de:	2301      	moveq	r3, #1
 80002e0:	2300      	movne	r3, #0
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return value;
 80002e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3730      	adds	r7, #48	@ 0x30
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	0800d178 	.word	0x0800d178

080002f8 <getAck>:

int getAck(char* command) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08c      	sub	sp, #48	@ 0x30
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
    printf("%s\n", command);
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f00b ff77 	bl	800c1f4 <puts>
    fflush(stdout);
 8000306:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <getAck+0x50>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4618      	mov	r0, r3
 800030e:	f00b fd55 	bl	800bdbc <fflush>
    char response[BUFFER_SIZE];
    fgets(response, BUFFER_SIZE, stdin);
 8000312:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <getAck+0x50>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	2120      	movs	r1, #32
 800031e:	4618      	mov	r0, r3
 8000320:	f00b fdc8 	bl	800beb4 <fgets>
    int success = (strcmp(response, "ack\n") == 0);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	4908      	ldr	r1, [pc, #32]	@ (800034c <getAck+0x54>)
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ffae 	bl	800028c <strcmp>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	bf0c      	ite	eq
 8000336:	2301      	moveq	r3, #1
 8000338:	2300      	movne	r3, #0
 800033a:	b2db      	uxtb	r3, r3
 800033c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return success;
 800033e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000340:	4618      	mov	r0, r3
 8000342:	3730      	adds	r7, #48	@ 0x30
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	2000001c 	.word	0x2000001c
 800034c:	0800d180 	.word	0x0800d180

08000350 <API_wallFront>:

int API_mazeHeight() {
    return getInteger("mazeHeight");
}

int API_wallFront() {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
    return getBoolean("wallFront");
 8000354:	4802      	ldr	r0, [pc, #8]	@ (8000360 <API_wallFront+0x10>)
 8000356:	f7ff ffa3 	bl	80002a0 <getBoolean>
 800035a:	4603      	mov	r3, r0
}
 800035c:	4618      	mov	r0, r3
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d1a0 	.word	0x0800d1a0

08000364 <API_wallRight>:

int API_wallRight() {
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
    return getBoolean("wallRight");
 8000368:	4802      	ldr	r0, [pc, #8]	@ (8000374 <API_wallRight+0x10>)
 800036a:	f7ff ff99 	bl	80002a0 <getBoolean>
 800036e:	4603      	mov	r3, r0
}
 8000370:	4618      	mov	r0, r3
 8000372:	bd80      	pop	{r7, pc}
 8000374:	0800d1ac 	.word	0x0800d1ac

08000378 <API_wallLeft>:

int API_wallLeft() {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
    return getBoolean("wallLeft");
 800037c:	4802      	ldr	r0, [pc, #8]	@ (8000388 <API_wallLeft+0x10>)
 800037e:	f7ff ff8f 	bl	80002a0 <getBoolean>
 8000382:	4603      	mov	r3, r0
}
 8000384:	4618      	mov	r0, r3
 8000386:	bd80      	pop	{r7, pc}
 8000388:	0800d1b8 	.word	0x0800d1b8

0800038c <API_moveForward>:

int API_moveForward() {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    return getAck("moveForward");
 8000390:	4802      	ldr	r0, [pc, #8]	@ (800039c <API_moveForward+0x10>)
 8000392:	f7ff ffb1 	bl	80002f8 <getAck>
 8000396:	4603      	mov	r3, r0
}
 8000398:	4618      	mov	r0, r3
 800039a:	bd80      	pop	{r7, pc}
 800039c:	0800d1c4 	.word	0x0800d1c4

080003a0 <API_turnRight>:

void API_turnRight() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    getAck("turnRight");
 80003a4:	4802      	ldr	r0, [pc, #8]	@ (80003b0 <API_turnRight+0x10>)
 80003a6:	f7ff ffa7 	bl	80002f8 <getAck>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	0800d1d0 	.word	0x0800d1d0

080003b4 <API_turnLeft>:

void API_turnLeft() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    getAck("turnLeft");
 80003b8:	4802      	ldr	r0, [pc, #8]	@ (80003c4 <API_turnLeft+0x10>)
 80003ba:	f7ff ff9d 	bl	80002f8 <getAck>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	0800d1dc 	.word	0x0800d1dc

080003c8 <API_setWall>:

void API_setWall(int x, int y, char direction) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	4613      	mov	r3, r2
 80003d4:	71fb      	strb	r3, [r7, #7]
    printf("setWall %d %d %c\n", x, y, direction);
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	68f9      	ldr	r1, [r7, #12]
 80003dc:	4806      	ldr	r0, [pc, #24]	@ (80003f8 <API_setWall+0x30>)
 80003de:	f00b fea1 	bl	800c124 <iprintf>
    fflush(stdout);
 80003e2:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <API_setWall+0x34>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f00b fce7 	bl	800bdbc <fflush>
}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	0800d1e8 	.word	0x0800d1e8
 80003fc:	2000001c 	.word	0x2000001c

08000400 <API_setColor>:
void API_clearWall(int x, int y, char direction) {
    printf("clearWall %d %d %c\n", x, y, direction);
    fflush(stdout);
}

void API_setColor(int x, int y, char color) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	4613      	mov	r3, r2
 800040c:	71fb      	strb	r3, [r7, #7]
    printf("setColor %d %d %c\n", x, y, color);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	68f9      	ldr	r1, [r7, #12]
 8000414:	4806      	ldr	r0, [pc, #24]	@ (8000430 <API_setColor+0x30>)
 8000416:	f00b fe85 	bl	800c124 <iprintf>
    fflush(stdout);
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <API_setColor+0x34>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4618      	mov	r0, r3
 8000422:	f00b fccb 	bl	800bdbc <fflush>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	0800d210 	.word	0x0800d210
 8000434:	2000001c 	.word	0x2000001c

08000438 <API_clearAllColor>:
void API_clearColor(int x, int y) {
    printf("clearColor %d %d\n", x, y);
    fflush(stdout);
}

void API_clearAllColor() {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
    printf("clearAllColor\n");
 800043c:	4805      	ldr	r0, [pc, #20]	@ (8000454 <API_clearAllColor+0x1c>)
 800043e:	f00b fed9 	bl	800c1f4 <puts>
    fflush(stdout);
 8000442:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <API_clearAllColor+0x20>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4618      	mov	r0, r3
 800044a:	f00b fcb7 	bl	800bdbc <fflush>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	0800d238 	.word	0x0800d238
 8000458:	2000001c 	.word	0x2000001c

0800045c <API_setText>:

void API_setText(int x, int y, char* text) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
    printf("setText %d %d %s\n", x, y, text);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	68f9      	ldr	r1, [r7, #12]
 800046e:	4806      	ldr	r0, [pc, #24]	@ (8000488 <API_setText+0x2c>)
 8000470:	f00b fe58 	bl	800c124 <iprintf>
    fflush(stdout);
 8000474:	4b05      	ldr	r3, [pc, #20]	@ (800048c <API_setText+0x30>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	4618      	mov	r0, r3
 800047c:	f00b fc9e 	bl	800bdbc <fflush>
}
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	0800d248 	.word	0x0800d248
 800048c:	2000001c 	.word	0x2000001c

08000490 <API_ackReset>:

int API_wasReset() {
    return getBoolean("wasReset");
}

void API_ackReset() {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
    getAck("ackReset");
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <API_ackReset+0x10>)
 8000496:	f7ff ff2f 	bl	80002f8 <getAck>
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	0800d28c 	.word	0x0800d28c

080004a4 <debug_log>:

void debug_log(char* text) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    fprintf(stderr, "%s\n", text);
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <debug_log+0x2c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	4907      	ldr	r1, [pc, #28]	@ (80004d4 <debug_log+0x30>)
 80004b6:	4618      	mov	r0, r3
 80004b8:	f00b fdaa 	bl	800c010 <fiprintf>
    fflush(stderr);
 80004bc:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <debug_log+0x2c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f00b fc7a 	bl	800bdbc <fflush>
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000001c 	.word	0x2000001c
 80004d4:	0800d298 	.word	0x0800d298

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(int argc, char* argv[])
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 fde9 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f81b 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9f9 	bl	80008e0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80004ee:	f000 f90b 	bl	8000708 <MX_ICACHE_Init>
  MX_TIM2_Init();
 80004f2:	f000 f941 	bl	8000778 <MX_TIM2_Init>
  MX_I2C1_Init();
 80004f6:	f000 f887 	bl	8000608 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004fa:	f000 f8c5 	bl	8000688 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80004fe:	f000 f917 	bl	8000730 <MX_SDMMC1_SD_Init>
  MX_USB_PCD_Init();
 8000502:	f000 f9bb 	bl	800087c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  debug_log("Running...");
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <main+0x44>)
 8000508:	f7ff ffcc 	bl	80004a4 <debug_log>
  generateInitialWalls();
 800050c:	f000 ff82 	bl	8001414 <generateInitialWalls>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Action nextMove = solver();
 8000510:	f001 f990 	bl	8001834 <solver>
 8000514:	4603      	mov	r3, r0
 8000516:	73fb      	strb	r3, [r7, #15]
  {
 8000518:	bf00      	nop
 800051a:	e7f9      	b.n	8000510 <main+0x38>
 800051c:	0800d29c 	.word	0x0800d29c

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b09c      	sub	sp, #112	@ 0x70
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2250      	movs	r2, #80	@ 0x50
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f00b ffe4 	bl	800c4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
 8000544:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000546:	4b2e      	ldr	r3, [pc, #184]	@ (8000600 <SystemClock_Config+0xe0>)
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	4a2d      	ldr	r2, [pc, #180]	@ (8000600 <SystemClock_Config+0xe0>)
 800054c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000550:	6113      	str	r3, [r2, #16]
 8000552:	4b2b      	ldr	r3, [pc, #172]	@ (8000600 <SystemClock_Config+0xe0>)
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800055e:	bf00      	nop
 8000560:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <SystemClock_Config+0xe0>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	2b08      	cmp	r3, #8
 800056a:	d1f9      	bne.n	8000560 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800056c:	2321      	movs	r3, #33	@ 0x21
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800057a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000580:	2303      	movs	r3, #3
 8000582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000588:	233e      	movs	r3, #62	@ 0x3e
 800058a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000594:	2302      	movs	r3, #2
 8000596:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000598:	230c      	movs	r3, #12
 800059a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800059c:	2300      	movs	r3, #0
 800059e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80005a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fbd6 	bl	8002d5c <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b6:	f000 fa63 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	231f      	movs	r3, #31
 80005bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	2105      	movs	r1, #5
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fff7 	bl	80035cc <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005e4:	f000 fa4c 	bl	8000a80 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <SystemClock_Config+0xe4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <SystemClock_Config+0xe4>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	3770      	adds	r7, #112	@ 0x70
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	44020800 	.word	0x44020800
 8000604:	40022000 	.word	0x40022000

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_I2C1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <MX_I2C1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_I2C1_Init+0x74>)
 8000614:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <MX_I2C1_Init+0x7c>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_I2C1_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000642:	480e      	ldr	r0, [pc, #56]	@ (800067c <MX_I2C1_Init+0x74>)
 8000644:	f002 f8f4 	bl	8002830 <HAL_I2C_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064e:	f000 fa17 	bl	8000a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <MX_I2C1_Init+0x74>)
 8000656:	f002 f986 	bl	8002966 <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 fa0e 	bl	8000a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_I2C1_Init+0x74>)
 8000668:	f002 f9c8 	bl	80029fc <HAL_I2CEx_ConfigDigitalFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 fa05 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000088 	.word	0x20000088
 8000680:	40005400 	.word	0x40005400
 8000684:	60808cd3 	.word	0x60808cd3

08000688 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_I2C2_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	@ (8000700 <MX_I2C2_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60808CD3;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_I2C2_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	@ (8000704 <MX_I2C2_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c2:	480e      	ldr	r0, [pc, #56]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006c4:	f002 f8b4 	bl	8002830 <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 f9d7 	bl	8000a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006d6:	f002 f946 	bl	8002966 <HAL_I2CEx_ConfigAnalogFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 f9ce 	bl	8000a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_I2C2_Init+0x74>)
 80006e8:	f002 f988 	bl	80029fc <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f9c5 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000dc 	.word	0x200000dc
 8000700:	40005800 	.word	0x40005800
 8000704:	60808cd3 	.word	0x60808cd3

08000708 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800070c:	2000      	movs	r0, #0
 800070e:	f002 f9c1 	bl	8002a94 <HAL_ICACHE_ConfigAssociativityMode>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000718:	f000 f9b2 	bl	8000a80 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800071c:	f002 f9da 	bl	8002ad4 <HAL_ICACHE_Enable>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000726:	f000 f9ab 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_SDMMC1_SD_Init+0x40>)
 8000736:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <MX_SDMMC1_SD_Init+0x44>)
 8000738:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <MX_SDMMC1_SD_Init+0x40>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000740:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_SDMMC1_SD_Init+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_SDMMC1_SD_Init+0x40>)
 8000748:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_SDMMC1_SD_Init+0x40>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_SDMMC1_SD_Init+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_SDMMC1_SD_Init+0x40>)
 800075c:	f008 fa58 	bl	8008c10 <HAL_SD_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000766:	f000 f98b 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000130 	.word	0x20000130
 8000774:	46008000 	.word	0x46008000

08000778 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	@ 0x38
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007b2:	4b31      	ldr	r3, [pc, #196]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007be:	4b2e      	ldr	r3, [pc, #184]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d2:	4829      	ldr	r0, [pc, #164]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007d4:	f009 fa9c 	bl	8009d10 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007de:	f000 f94f 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4822      	ldr	r0, [pc, #136]	@ (8000878 <MX_TIM2_Init+0x100>)
 80007f0:	f009 fc5a 	bl	800a0a8 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007fa:	f000 f941 	bl	8000a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007fe:	481e      	ldr	r0, [pc, #120]	@ (8000878 <MX_TIM2_Init+0x100>)
 8000800:	f009 fadd 	bl	8009dbe <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800080a:	f000 f939 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4816      	ldr	r0, [pc, #88]	@ (8000878 <MX_TIM2_Init+0x100>)
 800081e:	f00a fafd 	bl	800ae1c <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000828:	f000 f92a 	bl	8000a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082c:	2360      	movs	r3, #96	@ 0x60
 800082e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <MX_TIM2_Init+0x100>)
 8000844:	f009 fb1c 	bl	8009e80 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800084e:	f000 f917 	bl	8000a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	220c      	movs	r2, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	@ (8000878 <MX_TIM2_Init+0x100>)
 800085a:	f009 fb11 	bl	8009e80 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000864:	f000 f90c 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <MX_TIM2_Init+0x100>)
 800086a:	f001 f9d5 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 800086e:	bf00      	nop
 8000870:	3738      	adds	r7, #56	@ 0x38
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001ac 	.word	0x200001ac

0800087c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 8000882:	4a16      	ldr	r2, [pc, #88]	@ (80008dc <MX_USB_PCD_Init+0x60>)
 8000884:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 8000888:	2208      	movs	r2, #8
 800088a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 800088e:	2202      	movs	r2, #2
 8000890:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 8000894:	2202      	movs	r2, #2
 8000896:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 800089a:	2200      	movs	r2, #0
 800089c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USB_PCD_Init+0x5c>)
 80008c4:	f002 f916 	bl	8002af4 <HAL_PCD_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80008ce:	f000 f8d7 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001f8 	.word	0x200001f8
 80008dc:	40016000 	.word	0x40016000

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 80008f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008fc:	4a5b      	ldr	r2, [pc, #364]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000906:	4b59      	ldr	r3, [pc, #356]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000914:	4b55      	ldr	r3, [pc, #340]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091a:	4a54      	ldr	r2, [pc, #336]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000924:	4b51      	ldr	r3, [pc, #324]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000938:	4a4c      	ldr	r2, [pc, #304]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000942:	4b4a      	ldr	r3, [pc, #296]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	4b46      	ldr	r3, [pc, #280]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000956:	4a45      	ldr	r2, [pc, #276]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000960:	4b42      	ldr	r3, [pc, #264]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000974:	4a3d      	ldr	r2, [pc, #244]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800097e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, XSHUT_0_Pin|XSHUT_1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	21c5      	movs	r1, #197	@ 0xc5
 8000990:	4837      	ldr	r0, [pc, #220]	@ (8000a70 <MX_GPIO_Init+0x190>)
 8000992:	f001 ff35 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XSHUT_2_Pin|XSHUT_3_Pin|XSHUT_4_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2115      	movs	r1, #21
 800099a:	4836      	ldr	r0, [pc, #216]	@ (8000a74 <MX_GPIO_Init+0x194>)
 800099c:	f001 ff30 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D1_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2164      	movs	r1, #100	@ 0x64
 80009a4:	4834      	ldr	r0, [pc, #208]	@ (8000a78 <MX_GPIO_Init+0x198>)
 80009a6:	f001 ff2b 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_K2_Pin DIP0_Pin DIP1_Pin DIP7_Pin */
  GPIO_InitStruct.Pin = KEY_K2_Pin|DIP0_Pin|DIP1_Pin|DIP7_Pin;
 80009aa:	f24a 0322 	movw	r3, #40994	@ 0xa022
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	482c      	ldr	r0, [pc, #176]	@ (8000a70 <MX_GPIO_Init+0x190>)
 80009c0:	f001 fdc0 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : XSHUT_0_Pin XSHUT_1_Pin BIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = XSHUT_0_Pin|XSHUT_1_Pin|BIN2_Pin|BIN1_Pin;
 80009c4:	23c5      	movs	r3, #197	@ 0xc5
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4825      	ldr	r0, [pc, #148]	@ (8000a70 <MX_GPIO_Init+0x190>)
 80009dc:	f001 fdb2 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP2_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin;
 80009e0:	2308      	movs	r3, #8
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e4:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <MX_GPIO_Init+0x19c>)
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIP2_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	481f      	ldr	r0, [pc, #124]	@ (8000a70 <MX_GPIO_Init+0x190>)
 80009f4:	f001 fda6 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : XSHUT_2_Pin XSHUT_3_Pin XSHUT_4_Pin */
  GPIO_InitStruct.Pin = XSHUT_2_Pin|XSHUT_3_Pin|XSHUT_4_Pin;
 80009f8:	2315      	movs	r3, #21
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4819      	ldr	r0, [pc, #100]	@ (8000a74 <MX_GPIO_Init+0x194>)
 8000a10:	f001 fd98 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP3_Pin DIP4_Pin DIP5_Pin DIP6_Pin */
  GPIO_InitStruct.Pin = DIP3_Pin|DIP4_Pin|DIP5_Pin|DIP6_Pin;
 8000a14:	23aa      	movs	r3, #170	@ 0xaa
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4813      	ldr	r0, [pc, #76]	@ (8000a74 <MX_GPIO_Init+0x194>)
 8000a28:	f001 fd8c 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin AIN1_Pin AIN2_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|AIN1_Pin|AIN2_Pin;
 8000a2c:	2364      	movs	r3, #100	@ 0x64
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_GPIO_Init+0x198>)
 8000a44:	f001 fd7e 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : MH1_MH2_Pin */
  GPIO_InitStruct.Pin = MH1_MH2_Pin;
 8000a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_GPIO_Init+0x19c>)
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MH1_MH2_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_GPIO_Init+0x194>)
 8000a5e:	f001 fd71 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	44020c00 	.word	0x44020c00
 8000a70:	42020800 	.word	0x42020800
 8000a74:	42020000 	.word	0x42020000
 8000a78:	42020400 	.word	0x42020400
 8000a7c:	10110000 	.word	0x10110000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <queue_create>:
    struct node* head;
    struct node* tail;
    int size;
};

queue queue_create() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
queue q = (queue) malloc(sizeof(struct _queue));
 8000a92:	200c      	movs	r0, #12
 8000a94:	f00b f828 	bl	800bae8 <malloc>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	607b      	str	r3, [r7, #4]
    if (q == NULL) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d109      	bne.n	8000ab6 <queue_create+0x2a>
        fprintf(stderr, "Insufficient memory to \
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <queue_create+0x48>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	2231      	movs	r2, #49	@ 0x31
 8000aaa:	2101      	movs	r1, #1
 8000aac:	480a      	ldr	r0, [pc, #40]	@ (8000ad8 <queue_create+0x4c>)
 8000aae:	f00b fb2b 	bl	800c108 <fwrite>
        initialize queue.\n");
        abort();
 8000ab2:	f00b f812 	bl	800bada <abort>
    }
    q->head = NULL;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
    q->tail = NULL;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
    q->size = 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    return q;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000001c 	.word	0x2000001c
 8000ad8:	0800d2a8 	.word	0x0800d2a8

08000adc <queue_push>:
    }
    queue_clear(q);
    free(q);
}

void queue_push(queue q, item_type elem) {
 8000adc:	b084      	sub	sp, #16
 8000ade:	b590      	push	{r4, r7, lr}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct node* n;
    n = (struct node*) malloc(sizeof(struct node));
 8000aee:	2014      	movs	r0, #20
 8000af0:	f00a fffa 	bl	800bae8 <malloc>
 8000af4:	4603      	mov	r3, r0
 8000af6:	60fb      	str	r3, [r7, #12]
    if (n == NULL) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d109      	bne.n	8000b12 <queue_push+0x36>
        fprintf(stderr, "Insufficient memory to \
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <queue_push+0x88>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	222c      	movs	r2, #44	@ 0x2c
 8000b06:	2101      	movs	r1, #1
 8000b08:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <queue_push+0x8c>)
 8000b0a:	f00b fafd 	bl	800c108 <fwrite>
        create node.\n");
        abort();
 8000b0e:	f00a ffe4 	bl	800bada <abort>
    }
    n->data = elem;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	461c      	mov	r4, r3
 8000b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    n->next = NULL;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
    if (q->head == NULL) {
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d107      	bne.n	8000b3e <queue_push+0x62>
        q->head = q->tail = n;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e006      	b.n	8000b4c <queue_push+0x70>
    } else {
        q->tail->next = n;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	611a      	str	r2, [r3, #16]
        q->tail = n;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	605a      	str	r2, [r3, #4]
    }
    q->size += 1;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	609a      	str	r2, [r3, #8]
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr
 8000b64:	2000001c 	.word	0x2000001c
 8000b68:	0800d2f4 	.word	0x0800d2f4

08000b6c <queue_pop>:

item_type queue_pop(queue q) {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b089      	sub	sp, #36	@ 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
    if (queue_is_empty(q)) {
 8000b76:	6838      	ldr	r0, [r7, #0]
 8000b78:	f000 f840 	bl	8000bfc <queue_is_empty>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d009      	beq.n	8000b96 <queue_pop+0x2a>
    fprintf(stderr, "Can't pop element from queue: \
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <queue_pop+0x88>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	2232      	movs	r2, #50	@ 0x32
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <queue_pop+0x8c>)
 8000b8e:	f00b fabb 	bl	800c108 <fwrite>
    queue is empty.\n");
    abort();
 8000b92:	f00a ffa2 	bl	800bada <abort>
    }
    struct node* head = q->head;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	61fb      	str	r3, [r7, #28]
    if (q->head == q->tail) {
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d106      	bne.n	8000bb6 <queue_pop+0x4a>
        q->head = NULL;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
        q->tail = NULL;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	e004      	b.n	8000bc0 <queue_pop+0x54>
    } else {
        q->head = q->head->next;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	691a      	ldr	r2, [r3, #16]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	601a      	str	r2, [r3, #0]
    }
    q->size -= 1;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	609a      	str	r2, [r3, #8]
    item_type data = head->data;
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	f107 040c 	add.w	r4, r7, #12
 8000bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    free(head);
 8000bd6:	69f8      	ldr	r0, [r7, #28]
 8000bd8:	f00a ff8e 	bl	800baf8 <free>
    return data;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	461c      	mov	r4, r3
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	3724      	adds	r7, #36	@ 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000001c 	.word	0x2000001c
 8000bf8:	0800d324 	.word	0x0800d324

08000bfc <queue_is_empty>:
        abort();
    }
    return q->head->data;
}

int queue_is_empty(queue q) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    if (q==NULL) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d109      	bne.n	8000c1e <queue_is_empty+0x22>
        fprintf(stderr, "Cannot work with NULL queue.\n");
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <queue_is_empty+0x38>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	221d      	movs	r2, #29
 8000c12:	2101      	movs	r1, #1
 8000c14:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <queue_is_empty+0x3c>)
 8000c16:	f00b fa77 	bl	800c108 <fwrite>
        abort();
 8000c1a:	f00a ff5e 	bl	800bada <abort>
    }
    return q->head == NULL;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf0c      	ite	eq
 8000c26:	2301      	moveq	r3, #1
 8000c28:	2300      	movne	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000001c 	.word	0x2000001c
 8000c38:	0800d394 	.word	0x0800d394

08000c3c <checkTravelArray>:
Heading pathArray[MAZE_WIDTH][MAZE_HEIGHT] = {{NORTH}};
// keeps track of all of the cells that the mouse has visited
int travelArray[MAZE_WIDTH][MAZE_HEIGHT] = {{0}};

// given a coord, checks to see if the mouse has visited a certain cell before
int checkTravelArray(coord c) {return travelArray[c.x][c.y];}
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	463b      	mov	r3, r7
 8000c44:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4905      	ldr	r1, [pc, #20]	@ (8000c64 <checkTravelArray+0x28>)
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	4413      	add	r3, r2
 8000c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20001268 	.word	0x20001268

08000c68 <updateTravelArray>:
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) {travelArray[c.x][c.y] = 1;}
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	463b      	mov	r3, r7
 8000c70:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4905      	ldr	r1, [pc, #20]	@ (8000c90 <updateTravelArray+0x28>)
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20001268 	.word	0x20001268

08000c94 <updateFloodArray>:
// given coordinate, updates the respective cell's floodfill value
void updateFloodArray(coord c, int val) {floodArray[c.x][c.y] = val;}
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4905      	ldr	r1, [pc, #20]	@ (8000cc0 <updateFloodArray+0x2c>)
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	4413      	add	r3, r2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000d68 	.word	0x20000d68

08000cc4 <getFloodArray>:
// given coordinate, gets the respective cell's floodfill value
int getFloodArray(coord c) {return floodArray[c.x][c.y];}
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	463b      	mov	r3, r7
 8000ccc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4905      	ldr	r1, [pc, #20]	@ (8000cec <getFloodArray+0x28>)
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000d68 	.word	0x20000d68

08000cf0 <updatePathArray>:
// given coordinate, updates the respective cell's path heading
void updatePathArray(coord c, Heading h) {pathArray[c.x][c.y] = h;}
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4906      	ldr	r1, [pc, #24]	@ (8000d20 <updatePathArray+0x30>)
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	440a      	add	r2, r1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20001168 	.word	0x20001168

08000d24 <getPathArray>:
// given cordinate, gets the respective cell's path heading
Heading getPathArray(coord c) {return pathArray[c.x][c.y];}
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4905      	ldr	r1, [pc, #20]	@ (8000d4c <getPathArray+0x28>)
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	440a      	add	r2, r1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20001168 	.word	0x20001168

08000d50 <resetFloodArray>:

/* Floodfill Functions */

// resets the floodfill array to target the center as destination
void resetFloodArray()
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
    // set the entire flood array to blank values (-1)
    for (int x = 0; x < MAZE_WIDTH; x++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	e014      	b.n	8000d86 <resetFloodArray+0x36>
        for (int y = 0; y < MAZE_HEIGHT; y++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	e00b      	b.n	8000d7a <resetFloodArray+0x2a>
            floodArray[x][y] = -1;
 8000d62:	491e      	ldr	r1, [pc, #120]	@ (8000ddc <resetFloodArray+0x8c>)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	011a      	lsls	r2, r3, #4
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int y = 0; y < MAZE_HEIGHT; y++)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	ddf0      	ble.n	8000d62 <resetFloodArray+0x12>
    for (int x = 0; x < MAZE_WIDTH; x++)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3301      	adds	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	dde7      	ble.n	8000d5c <resetFloodArray+0xc>
    // set desired goal values 
    if (target) // target is goal (center)
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <resetFloodArray+0x90>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d01a      	beq.n	8000dca <resetFloodArray+0x7a>
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8000d94:	2307      	movs	r3, #7
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	e013      	b.n	8000dc2 <resetFloodArray+0x72>
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	e00a      	b.n	8000db6 <resetFloodArray+0x66>
                floodArray[x][y] = 0;
 8000da0:	490e      	ldr	r1, [pc, #56]	@ (8000ddc <resetFloodArray+0x8c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	011a      	lsls	r2, r3, #4
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	ddf1      	ble.n	8000da0 <resetFloodArray+0x50>
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	dde8      	ble.n	8000d9a <resetFloodArray+0x4a>
    else // target is starting cell
        floodArray[STARTING_X][STARTING_Y] = 0;
}
 8000dc8:	e002      	b.n	8000dd0 <resetFloodArray+0x80>
        floodArray[STARTING_X][STARTING_Y] = 0;
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <resetFloodArray+0x8c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20000d68 	.word	0x20000d68
 8000de0:	20000000 	.word	0x20000000

08000de4 <checkWall>:

// given heading and coordinate, check if there is a wall on that side of the cell
int checkWall(Heading heading, coord c) {
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	e883 0006 	stmia.w	r3, {r1, r2}
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d830      	bhi.n	8000e5c <checkWall+0x78>
 8000dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000e00 <checkWall+0x1c>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e27 	.word	0x08000e27
 8000e08:	08000e37 	.word	0x08000e37
 8000e0c:	08000e4b 	.word	0x08000e4b
        case NORTH: return horizontalWalls[c.x][c.y+1];
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1c59      	adds	r1, r3, #1
 8000e16:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <checkWall+0x84>)
 8000e18:	4613      	mov	r3, r2
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000e24:	e01a      	b.n	8000e5c <checkWall+0x78>
        case WEST: return verticalWalls[c.x][c.y];
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4910      	ldr	r1, [pc, #64]	@ (8000e6c <checkWall+0x88>)
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	4413      	add	r3, r2
 8000e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e34:	e012      	b.n	8000e5c <checkWall+0x78>
        case SOUTH: return horizontalWalls[c.x][c.y];
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <checkWall+0x84>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	4413      	add	r3, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000e48:	e008      	b.n	8000e5c <checkWall+0x78>
        case EAST: return verticalWalls[c.x+1][c.y];
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	4906      	ldr	r1, [pc, #24]	@ (8000e6c <checkWall+0x88>)
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	4413      	add	r3, r2
 8000e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e5a:	e7ff      	b.n	8000e5c <checkWall+0x78>
    }
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	20000928 	.word	0x20000928
 8000e6c:	200004e8 	.word	0x200004e8

08000e70 <incrementCoord>:

// Increments coord in the direction of the heading by input integer, then returns updated coord
coord incrementCoord(Heading heading, coord c, int numCells) {
 8000e70:	b480      	push	{r7}
 8000e72:	b08d      	sub	sp, #52	@ 0x34
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4639      	mov	r1, r7
 8000e7c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000e80:	4603      	mov	r3, r0
 8000e82:	72fb      	strb	r3, [r7, #11]
    switch (heading) {
 8000e84:	7afb      	ldrb	r3, [r7, #11]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d836      	bhi.n	8000ef8 <incrementCoord+0x88>
 8000e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e90 <incrementCoord+0x20>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000eb7 	.word	0x08000eb7
 8000e98:	08000ecd 	.word	0x08000ecd
 8000e9c:	08000ee3 	.word	0x08000ee3
        case NORTH: return (coord){c.x, c.y += numCells};
 8000ea0:	6839      	ldr	r1, [r7, #0]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ea6:	4413      	add	r3, r2
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6019      	str	r1, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	e021      	b.n	8000efa <incrementCoord+0x8a>
        case WEST: return (coord){c.x -= numCells, c.y};
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	6839      	ldr	r1, [r7, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6019      	str	r1, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	e016      	b.n	8000efa <incrementCoord+0x8a>
        case SOUTH: return (coord){c.x, c.y -= numCells};
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6019      	str	r1, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	e00b      	b.n	8000efa <incrementCoord+0x8a>
        case EAST: return (coord){c.x += numCells, c.y};
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ee6:	4413      	add	r3, r2
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6019      	str	r1, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	e000      	b.n	8000efa <incrementCoord+0x8a>
    }
}
 8000ef8:	bf00      	nop
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	3734      	adds	r7, #52	@ 0x34
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <turnLeft>:

// turns currentHeading global variable to the left based on the mouse's current heading,
// then returns LEFT action
Action turnLeft() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    API_turnLeft();
 8000f0c:	f7ff fa52 	bl	80003b4 <API_turnLeft>
    currentHeading = (currentHeading+1)%4;
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <turnLeft+0x28>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	425a      	negs	r2, r3
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	f002 0203 	and.w	r2, r2, #3
 8000f20:	bf58      	it	pl
 8000f22:	4253      	negpl	r3, r2
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b02      	ldr	r3, [pc, #8]	@ (8000f30 <turnLeft+0x28>)
 8000f28:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200004e4 	.word	0x200004e4

08000f34 <turnRight>:

// turns currentHeading global variable to the right based on the mouse's current heading,
// then returns RIGHT action
Action turnRight() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    API_turnRight();
 8000f38:	f7ff fa32 	bl	80003a0 <API_turnRight>
    currentHeading = (currentHeading-1)%4;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <turnRight+0x28>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	425a      	negs	r2, r3
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	f002 0203 	and.w	r2, r2, #3
 8000f4c:	bf58      	it	pl
 8000f4e:	4253      	negpl	r3, r2
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b02      	ldr	r3, [pc, #8]	@ (8000f5c <turnRight+0x28>)
 8000f54:	701a      	strb	r2, [r3, #0]
    return RIGHT;
 8000f56:	2302      	movs	r3, #2
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200004e4 	.word	0x200004e4

08000f60 <mouseInGoal>:

// returns whether the mouse is in the target
unsigned char mouseInGoal() {
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    return (target == 1 && (currentXY.x >= LOWER_X_GOAL && currentXY.x <= UPPER_X_GOAL && currentXY.y >= LOWER_Y_GOAL && currentXY.y <= UPPER_Y_GOAL));
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <mouseInGoal+0x40>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d111      	bne.n	8000f90 <mouseInGoal+0x30>
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <mouseInGoal+0x44>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	dd0d      	ble.n	8000f90 <mouseInGoal+0x30>
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <mouseInGoal+0x44>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	dc09      	bgt.n	8000f90 <mouseInGoal+0x30>
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <mouseInGoal+0x44>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	dd05      	ble.n	8000f90 <mouseInGoal+0x30>
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <mouseInGoal+0x44>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	dc01      	bgt.n	8000f90 <mouseInGoal+0x30>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <mouseInGoal+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	200004dc 	.word	0x200004dc

08000fa8 <getNeighbor>:

// given heading and coordinates, returns the floodfill value of the corresponding neighbor cell.
// if the neighbor is off of the maze (argument cell is on the boundary of the maze), return -2
int getNeighbor(Heading heading, coord c)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	e883 0006 	stmia.w	r3, {r1, r2}
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d846      	bhi.n	800104c <getNeighbor+0xa4>
 8000fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <getNeighbor+0x1c>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08000ff3 	.word	0x08000ff3
 8000fcc:	08001011 	.word	0x08001011
 8000fd0:	0800102f 	.word	0x0800102f
        case NORTH:
            if (c.y >= 15) return OUT_OF_BOUNDS;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b0e      	cmp	r3, #14
 8000fd8:	dd02      	ble.n	8000fe0 <getNeighbor+0x38>
 8000fda:	f06f 0301 	mvn.w	r3, #1
 8000fde:	e035      	b.n	800104c <getNeighbor+0xa4>
            else return floodArray[c.x][c.y+1];
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	491c      	ldr	r1, [pc, #112]	@ (8001058 <getNeighbor+0xb0>)
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	4413      	add	r3, r2
 8000fec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ff0:	e02c      	b.n	800104c <getNeighbor+0xa4>
        case WEST:
            if (c.x <= 0) return OUT_OF_BOUNDS;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dc02      	bgt.n	8000ffe <getNeighbor+0x56>
 8000ff8:	f06f 0301 	mvn.w	r3, #1
 8000ffc:	e026      	b.n	800104c <getNeighbor+0xa4>
            else return floodArray[c.x-1][c.y];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4914      	ldr	r1, [pc, #80]	@ (8001058 <getNeighbor+0xb0>)
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	4413      	add	r3, r2
 800100a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800100e:	e01d      	b.n	800104c <getNeighbor+0xa4>
        case SOUTH:
            if (c.y <= 0) return OUT_OF_BOUNDS;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dc02      	bgt.n	800101c <getNeighbor+0x74>
 8001016:	f06f 0301 	mvn.w	r3, #1
 800101a:	e017      	b.n	800104c <getNeighbor+0xa4>
            else return floodArray[c.x][c.y-1];
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	3b01      	subs	r3, #1
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <getNeighbor+0xb0>)
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	4413      	add	r3, r2
 8001028:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800102c:	e00e      	b.n	800104c <getNeighbor+0xa4>
        case EAST:
            if (c.x >= 15) return OUT_OF_BOUNDS;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0e      	cmp	r3, #14
 8001032:	dd02      	ble.n	800103a <getNeighbor+0x92>
 8001034:	f06f 0301 	mvn.w	r3, #1
 8001038:	e008      	b.n	800104c <getNeighbor+0xa4>
            else return floodArray[c.x+1][c.y];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4905      	ldr	r1, [pc, #20]	@ (8001058 <getNeighbor+0xb0>)
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	4413      	add	r3, r2
 8001046:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800104a:	e7ff      	b.n	800104c <getNeighbor+0xa4>
    }
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000d68 	.word	0x20000d68

0800105c <generateNeighbor>:

neighbor generateNeighbor(queue q, Heading heading, neighbor current, int currentVal) {
 800105c:	b082      	sub	sp, #8
 800105e:	b580      	push	{r7, lr}
 8001060:	b08e      	sub	sp, #56	@ 0x38
 8001062:	af02      	add	r7, sp, #8
 8001064:	6178      	str	r0, [r7, #20]
 8001066:	6139      	str	r1, [r7, #16]
 8001068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800106a:	4613      	mov	r3, r2
 800106c:	73fb      	strb	r3, [r7, #15]
    if (!checkWall(heading,current.coord)) {
 800106e:	7bf8      	ldrb	r0, [r7, #15]
 8001070:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001074:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001078:	f7ff feb4 	bl	8000de4 <checkWall>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d15f      	bne.n	8001142 <generateNeighbor+0xe6>
        int nextVal = currentVal + TILE_SCORE;
 8001082:	2201      	movs	r2, #1
 8001084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001086:	4413      	add	r3, r2
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
        neighbor next;
        // checks if the mouse would have to turn to go north from current cell
        if (current.heading != heading) {
 800108a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	429a      	cmp	r2, r3
 8001092:	d006      	beq.n	80010a2 <generateNeighbor+0x46>
            nextVal += TURN_SCORE;
 8001094:	2200      	movs	r2, #0
 8001096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001098:	4413      	add	r3, r2
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            next.streak = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a0:	e00c      	b.n	80010bc <generateNeighbor+0x60>
        } else { // if the mouse doesn't need to turn, records that is is on a straight streak
            nextVal += (STREAK_MULTIPLIER * (current.streak-1)) + STREAK_SCORE;
 80010a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010a4:	3b01      	subs	r3, #1
 80010a6:	2200      	movs	r2, #0
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	4413      	add	r3, r2
 80010b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b2:	4413      	add	r3, r2
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            next.streak = current.streak + 1;
 80010b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010b8:	3301      	adds	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // prepare neighbor to add to the floodfill queue
        next.coord = incrementCoord(heading, current.coord, 1);
 80010bc:	4638      	mov	r0, r7
 80010be:	7bf9      	ldrb	r1, [r7, #15]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010c8:	cb0c      	ldmia	r3, {r2, r3}
 80010ca:	f7ff fed1 	bl	8000e70 <incrementCoord>
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	463a      	mov	r2, r7
 80010d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d8:	e883 0003 	stmia.w	r3, {r0, r1}
        next.heading = heading;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f887 3020 	strb.w	r3, [r7, #32]

        int neighborVal = getNeighbor(heading,current.coord);
 80010e2:	7bf8      	ldrb	r0, [r7, #15]
 80010e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010ec:	f7ff ff5c 	bl	8000fa8 <getNeighbor>
 80010f0:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (neighborVal == NOT_YET_SET || nextVal < neighborVal) {
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d003      	beq.n	8001102 <generateNeighbor+0xa6>
 80010fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010fe:	429a      	cmp	r2, r3
 8001100:	da1f      	bge.n	8001142 <generateNeighbor+0xe6>
            queue_push(q,next);
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800110c:	6938      	ldr	r0, [r7, #16]
 800110e:	f7ff fce5 	bl	8000adc <queue_push>
            updateFloodArray(next.coord,nextVal);
 8001112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	e893 0003 	ldmia.w	r3, {r0, r1}
 800111c:	f7ff fdba 	bl	8000c94 <updateFloodArray>
            updatePathArray(next.coord,(heading+2)%4);
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	3302      	adds	r3, #2
 8001124:	425a      	negs	r2, r3
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	bf58      	it	pl
 8001130:	4253      	negpl	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800113e:	f7ff fdd7 	bl	8000cf0 <updatePathArray>
        }
    }
}
 8001142:	bf00      	nop
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	3730      	adds	r7, #48	@ 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114e:	b002      	add	sp, #8
 8001150:	4770      	bx	lr
	...

08001154 <floodFill>:

// updates the floodfill array based on known walls
void floodFill() {
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b0aa      	sub	sp, #168	@ 0xa8
 8001158:	af04      	add	r7, sp, #16
    // set non-goal values to blank so that the floodfill array can be recalculated
    resetFloodArray();
 800115a:	f7ff fdf9 	bl	8000d50 <resetFloodArray>

    // declare/initialize relevant variables for queue for floodfill algorithm
    queue q = queue_create();
 800115e:	f7ff fc95 	bl	8000a8c <queue_create>
 8001162:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // iterate through the 2D array, find goal values and add them to the queue
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800116c:	e06c      	b.n	8001248 <floodFill+0xf4>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001174:	e05f      	b.n	8001236 <floodFill+0xe2>
            if (floodArray[x][y] == 0) {
 8001176:	4975      	ldr	r1, [pc, #468]	@ (800134c <floodFill+0x1f8>)
 8001178:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800117c:	011a      	lsls	r2, r3, #4
 800117e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001182:	4413      	add	r3, r2
 8001184:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d14f      	bne.n	800122c <floodFill+0xd8>
                // for the starting goal values, it doesn't matter which direction you approach them from.
                // as such, they should be oriented from all directions
                queue_push(q,(neighbor){(coord){x,y},NORTH,0});
 800118c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001190:	673b      	str	r3, [r7, #112]	@ 0x70
 8001192:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001196:	677b      	str	r3, [r7, #116]	@ 0x74
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 800119e:	2300      	movs	r3, #0
 80011a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80011a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ac:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011b0:	f7ff fc94 	bl	8000adc <queue_push>
                queue_push(q,(neighbor){(coord){x,y},WEST,0});
 80011b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80011ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011c0:	2301      	movs	r3, #1
 80011c2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80011c6:	2300      	movs	r3, #0
 80011c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80011ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011d8:	f7ff fc80 	bl	8000adc <queue_push>
                queue_push(q,(neighbor){(coord){x,y},SOUTH,0});
 80011dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80011e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80011e8:	2302      	movs	r3, #2
 80011ea:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 80011ee:	2300      	movs	r3, #0
 80011f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011fc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001200:	f7ff fc6c 	bl	8000adc <queue_push>
                queue_push(q,(neighbor){(coord){x,y},EAST,0});
 8001204:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800120a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001210:	2303      	movs	r3, #3
 8001212:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
 800121a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001224:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001228:	f7ff fc58 	bl	8000adc <queue_push>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 800122c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001230:	3301      	adds	r3, #1
 8001232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800123a:	2b0f      	cmp	r3, #15
 800123c:	dd9b      	ble.n	8001176 <floodFill+0x22>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 800123e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001242:	3301      	adds	r3, #1
 8001244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800124c:	2b0f      	cmp	r3, #15
 800124e:	dd8e      	ble.n	800116e <floodFill+0x1a>
            }
        }
    }

    // adds available neighbors to queue and updates their floodfill values
    while (!queue_is_empty(q)) {
 8001250:	e06f      	b.n	8001332 <floodFill+0x1de>
        // initializes values for calculating floodfills for neighbors
        neighbor current = queue_pop(q);
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fc86 	bl	8000b6c <queue_pop>
        int currentVal = getFloodArray(current.coord);
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001268:	f7ff fd2c 	bl	8000cc4 <getFloodArray>
 800126c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

        // prints the current cell's floodfill number to the simulation screen
        char forSetText[6] = ""; sprintf(forSetText, "%d", getFloodArray(current.coord)); API_setText(current.coord.x,current.coord.y,forSetText);        
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	809a      	strh	r2, [r3, #4]
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001282:	f7ff fd1f 	bl	8000cc4 <getFloodArray>
 8001286:	4602      	mov	r2, r0
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4930      	ldr	r1, [pc, #192]	@ (8001350 <floodFill+0x1fc>)
 800128e:	4618      	mov	r0, r3
 8001290:	f00b f83a 	bl	800c308 <siprintf>
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	69f9      	ldr	r1, [r7, #28]
 8001298:	f107 0210 	add.w	r2, r7, #16
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f8dd 	bl	800045c <API_setText>
        
        // pushes neighbors if available
        generateNeighbor(q,NORTH,current,currentVal);
 80012a2:	463d      	mov	r5, r7
 80012a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012a8:	9303      	str	r3, [sp, #12]
 80012aa:	466c      	mov	r4, sp
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80012c0:	4628      	mov	r0, r5
 80012c2:	f7ff fecb 	bl	800105c <generateNeighbor>
        generateNeighbor(q,WEST,current,currentVal);
 80012c6:	463d      	mov	r5, r7
 80012c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	466c      	mov	r4, sp
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2201      	movs	r2, #1
 80012e0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80012e4:	4628      	mov	r0, r5
 80012e6:	f7ff feb9 	bl	800105c <generateNeighbor>
        generateNeighbor(q,SOUTH,current,currentVal);
 80012ea:	463d      	mov	r5, r7
 80012ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012f0:	9303      	str	r3, [sp, #12]
 80012f2:	466c      	mov	r4, sp
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2202      	movs	r2, #2
 8001304:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001308:	4628      	mov	r0, r5
 800130a:	f7ff fea7 	bl	800105c <generateNeighbor>
        generateNeighbor(q,EAST,current,currentVal);        
 800130e:	463d      	mov	r5, r7
 8001310:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001314:	9303      	str	r3, [sp, #12]
 8001316:	466c      	mov	r4, sp
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001320:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2203      	movs	r2, #3
 8001328:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800132c:	4628      	mov	r0, r5
 800132e:	f7ff fe95 	bl	800105c <generateNeighbor>
    while (!queue_is_empty(q)) {
 8001332:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001336:	f7ff fc61 	bl	8000bfc <queue_is_empty>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d088      	beq.n	8001252 <floodFill+0xfe>
    }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3798      	adds	r7, #152	@ 0x98
 8001346:	46bd      	mov	sp, r7
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000d68 	.word	0x20000d68
 8001350:	0800d3b4 	.word	0x0800d3b4

08001354 <placeWall>:

// places a wall in respective arrays and API at the given heading and coordinate
void placeWall(Heading heading, coord c) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	e883 0006 	stmia.w	r3, {r1, r2}
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
    // sets a wall in the wall arrays
    switch (heading) {
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d84c      	bhi.n	8001404 <placeWall+0xb0>
 800136a:	a201      	add	r2, pc, #4	@ (adr r2, 8001370 <placeWall+0x1c>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	08001381 	.word	0x08001381
 8001374:	080013a5 	.word	0x080013a5
 8001378:	080013c3 	.word	0x080013c3
 800137c:	080013e5 	.word	0x080013e5
        case NORTH:
            horizontalWalls[c.x][c.y+1] = 1;
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	4821      	ldr	r0, [pc, #132]	@ (800140c <placeWall+0xb8>)
 8001388:	4613      	mov	r3, r2
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	440b      	add	r3, r1
 8001390:	2201      	movs	r2, #1
 8001392:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            API_setWall(c.x,c.y,'n');
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	226e      	movs	r2, #110	@ 0x6e
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f813 	bl	80003c8 <API_setWall>
            return;
 80013a2:	e02f      	b.n	8001404 <placeWall+0xb0>
        case WEST:
            verticalWalls[c.x][c.y] = 1;
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4919      	ldr	r1, [pc, #100]	@ (8001410 <placeWall+0xbc>)
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	2201      	movs	r2, #1
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            API_setWall(c.x,c.y,'w');
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	2277      	movs	r2, #119	@ 0x77
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f804 	bl	80003c8 <API_setWall>
            return;
 80013c0:	e020      	b.n	8001404 <placeWall+0xb0>
        case SOUTH:
            horizontalWalls[c.x][c.y] = 1;
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	4811      	ldr	r0, [pc, #68]	@ (800140c <placeWall+0xb8>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	2201      	movs	r2, #1
 80013d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            API_setWall(c.x,c.y,'s');
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	2273      	movs	r2, #115	@ 0x73
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe fff3 	bl	80003c8 <API_setWall>
            return;
 80013e2:	e00f      	b.n	8001404 <placeWall+0xb0>
        case EAST:
            verticalWalls[c.x+1][c.y] = 1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4909      	ldr	r1, [pc, #36]	@ (8001410 <placeWall+0xbc>)
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	2201      	movs	r2, #1
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            API_setWall(c.x,c.y,'e');
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	2265      	movs	r2, #101	@ 0x65
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe ffe3 	bl	80003c8 <API_setWall>
            return;
 8001402:	bf00      	nop
    }
}
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000928 	.word	0x20000928
 8001410:	200004e8 	.word	0x200004e8

08001414 <generateInitialWalls>:

void generateInitialWalls() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
    for (int x = 0; x < MAZE_WIDTH; x++) {
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
 800141e:	e018      	b.n	8001452 <generateInitialWalls+0x3e>
        placeWall(SOUTH,(coord){x,0});
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001430:	2002      	movs	r0, #2
 8001432:	f7ff ff8f 	bl	8001354 <placeWall>
        placeWall(NORTH,(coord){x,MAZE_HEIGHT-1});
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	230f      	movs	r3, #15
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff84 	bl	8001354 <placeWall>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	3301      	adds	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	2b0f      	cmp	r3, #15
 8001456:	dde3      	ble.n	8001420 <generateInitialWalls+0xc>
    }
    for (int y = 0; y < MAZE_HEIGHT; y++) {
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
 800145c:	e017      	b.n	800148e <generateInitialWalls+0x7a>
        placeWall(WEST,(coord){0,y});
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff ff70 	bl	8001354 <placeWall>
        placeWall(EAST,(coord){MAZE_WIDTH-1,y});
 8001474:	230f      	movs	r3, #15
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	463b      	mov	r3, r7
 800147e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001482:	2003      	movs	r0, #3
 8001484:	f7ff ff66 	bl	8001354 <placeWall>
    for (int y = 0; y < MAZE_HEIGHT; y++) {
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	3301      	adds	r3, #1
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	dde4      	ble.n	800145e <generateInitialWalls+0x4a>
    }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <updateWalls>:

// checks for and then updates the walls for the current cell
void updateWalls()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    // based on the current heading, places walls at the respective locations
    if (API_wallFront()) placeWall(currentHeading,currentXY);
 80014a4:	f7fe ff54 	bl	8000350 <API_wallFront>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <updateWalls+0x1c>
 80014ae:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <updateWalls+0x74>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <updateWalls+0x78>)
 80014b4:	ca06      	ldmia	r2, {r1, r2}
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff4c 	bl	8001354 <placeWall>
    if (API_wallLeft()) placeWall((currentHeading+1)%4,currentXY);
 80014bc:	f7fe ff5c 	bl	8000378 <API_wallLeft>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00f      	beq.n	80014e6 <updateWalls+0x46>
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <updateWalls+0x74>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	425a      	negs	r2, r3
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	f002 0203 	and.w	r2, r2, #3
 80014d6:	bf58      	it	pl
 80014d8:	4253      	negpl	r3, r2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001518 <updateWalls+0x78>)
 80014de:	ca06      	ldmia	r2, {r1, r2}
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff37 	bl	8001354 <placeWall>
    if (API_wallRight()) placeWall((currentHeading-1)%4,currentXY);
 80014e6:	f7fe ff3d 	bl	8000364 <API_wallRight>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00f      	beq.n	8001510 <updateWalls+0x70>
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <updateWalls+0x74>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	425a      	negs	r2, r3
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	bf58      	it	pl
 8001502:	4253      	negpl	r3, r2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <updateWalls+0x78>)
 8001508:	ca06      	ldmia	r2, {r1, r2}
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff22 	bl	8001354 <placeWall>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200004e4 	.word	0x200004e4
 8001518:	200004dc 	.word	0x200004dc

0800151c <nextAction>:

// based on updated wall and floodfill information, return the next action that the mouse should do
Action nextAction()
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08b      	sub	sp, #44	@ 0x2c
 8001520:	af02      	add	r7, sp, #8
    // stay at center if already in center
    if (target && mouseInGoal() && STAY_AT_CENTER)
 8001522:	4b54      	ldr	r3, [pc, #336]	@ (8001674 <nextAction+0x158>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <nextAction+0x22>
 800152a:	f7ff fd19 	bl	8000f60 <mouseInGoal>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <nextAction+0x22>
 8001534:	2300      	movs	r3, #0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <nextAction+0x22>
        return IDLE;
 800153a:	2303      	movs	r3, #3
 800153c:	e095      	b.n	800166a <nextAction+0x14e>

    Heading newHeading = getPathArray(currentXY);
 800153e:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <nextAction+0x15c>)
 8001540:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001544:	f7ff fbee 	bl	8000d24 <getPathArray>
 8001548:	4603      	mov	r3, r0
 800154a:	75fb      	strb	r3, [r7, #23]
    updateTravelArray(currentXY);
 800154c:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <nextAction+0x15c>)
 800154e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001552:	f7ff fb89 	bl	8000c68 <updateTravelArray>
    coord originalCoord = currentXY;
 8001556:	4a48      	ldr	r2, [pc, #288]	@ (8001678 <nextAction+0x15c>)
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001560:	e883 0003 	stmia.w	r3, {r0, r1}

    // moves forward if the mouse is already facing the correct heading
    if (newHeading == currentHeading) {
 8001564:	4b45      	ldr	r3, [pc, #276]	@ (800167c <nextAction+0x160>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	7dfa      	ldrb	r2, [r7, #23]
 800156a:	429a      	cmp	r2, r3
 800156c:	d151      	bne.n	8001612 <nextAction+0xf6>
        int moveNumber = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 8001572:	e016      	b.n	80015a2 <nextAction+0x86>
        && getPathArray(currentXY) == currentHeading) {
            moveNumber++;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
            updateTravelArray(currentXY);
 800157a:	4b3f      	ldr	r3, [pc, #252]	@ (8001678 <nextAction+0x15c>)
 800157c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001580:	f7ff fb72 	bl	8000c68 <updateTravelArray>
            currentXY = incrementCoord(newHeading,currentXY,1);
 8001584:	4c3c      	ldr	r4, [pc, #240]	@ (8001678 <nextAction+0x15c>)
 8001586:	4638      	mov	r0, r7
 8001588:	4b3b      	ldr	r3, [pc, #236]	@ (8001678 <nextAction+0x15c>)
 800158a:	7df9      	ldrb	r1, [r7, #23]
 800158c:	2201      	movs	r2, #1
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	cb0c      	ldmia	r3, {r2, r3}
 8001592:	f7ff fc6d 	bl	8000e70 <incrementCoord>
 8001596:	4622      	mov	r2, r4
 8001598:	463b      	mov	r3, r7
 800159a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800159e:	e882 0003 	stmia.w	r2, {r0, r1}
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 80015a2:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <nextAction+0x15c>)
 80015a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a8:	f7ff fb48 	bl	8000c3c <checkTravelArray>
 80015ac:	4603      	mov	r3, r0
        && getPathArray(currentXY) == currentHeading) {
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d113      	bne.n	80015da <nextAction+0xbe>
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 80015b2:	4a31      	ldr	r2, [pc, #196]	@ (8001678 <nextAction+0x15c>)
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	ca06      	ldmia	r2, {r1, r2}
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fc13 	bl	8000de4 <checkWall>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10a      	bne.n	80015da <nextAction+0xbe>
        && getPathArray(currentXY) == currentHeading) {
 80015c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <nextAction+0x15c>)
 80015c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015ca:	f7ff fbab 	bl	8000d24 <getPathArray>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <nextAction+0x160>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d0cc      	beq.n	8001574 <nextAction+0x58>
        } 

        char forSetText[4] = "";
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
        sprintf(forSetText, "%d", moveNumber);
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4926      	ldr	r1, [pc, #152]	@ (8001680 <nextAction+0x164>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00a fe8e 	bl	800c308 <siprintf>
        debug_log(forSetText);
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff57 	bl	80004a4 <debug_log>

        for (int i = 0; i < moveNumber; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	e004      	b.n	8001606 <nextAction+0xea>
            API_moveForward();
 80015fc:	f7fe fec6 	bl	800038c <API_moveForward>
        for (int i = 0; i < moveNumber; i++)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	3301      	adds	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbf6      	blt.n	80015fc <nextAction+0xe0>
        return FORWARD;
 800160e:	2301      	movs	r3, #1
 8001610:	e02b      	b.n	800166a <nextAction+0x14e>
    }

    // determines which way to turn based on current direction and desired direction
    if (currentHeading == (newHeading+1)%4)
 8001612:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <nextAction+0x160>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	3301      	adds	r3, #1
 800161c:	425a      	negs	r2, r3
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	bf58      	it	pl
 8001628:	4253      	negpl	r3, r2
 800162a:	4299      	cmp	r1, r3
 800162c:	d103      	bne.n	8001636 <nextAction+0x11a>
        return turnRight();
 800162e:	f7ff fc81 	bl	8000f34 <turnRight>
 8001632:	4603      	mov	r3, r0
 8001634:	e019      	b.n	800166a <nextAction+0x14e>
    else if (currentHeading == (newHeading-1)%4)
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <nextAction+0x160>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	3b01      	subs	r3, #1
 8001640:	425a      	negs	r2, r3
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	bf58      	it	pl
 800164c:	4253      	negpl	r3, r2
 800164e:	4299      	cmp	r1, r3
 8001650:	d103      	bne.n	800165a <nextAction+0x13e>
        return turnLeft();
 8001652:	f7ff fc59 	bl	8000f08 <turnLeft>
 8001656:	4603      	mov	r3, r0
 8001658:	e007      	b.n	800166a <nextAction+0x14e>
    else {
        debug_log("turned 180");
 800165a:	480a      	ldr	r0, [pc, #40]	@ (8001684 <nextAction+0x168>)
 800165c:	f7fe ff22 	bl	80004a4 <debug_log>
        turnLeft();
 8001660:	f7ff fc52 	bl	8000f08 <turnLeft>
        return turnLeft();
 8001664:	f7ff fc50 	bl	8000f08 <turnLeft>
 8001668:	4603      	mov	r3, r0
    }
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	200004dc 	.word	0x200004dc
 800167c:	200004e4 	.word	0x200004e4
 8001680:	0800d3b4 	.word	0x0800d3b4
 8001684:	0800d3b8 	.word	0x0800d3b8

08001688 <checkDestination>:

// checks if the mouse has reached its target
void checkDestination()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
    if (target) {
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <checkDestination+0x64>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01a      	beq.n	80016cc <checkDestination+0x44>
        if (mouseInGoal()) {
 8001696:	f7ff fc63 	bl	8000f60 <mouseInGoal>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <checkDestination+0x5a>
            if (RESET_AT_CENTER) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <checkDestination+0x36>
                API_ackReset();
 80016a6:	f7fe fef3 	bl	8000490 <API_ackReset>
                currentXY = (coord){0,0};
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <checkDestination+0x68>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <checkDestination+0x68>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
                currentHeading = NORTH;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <checkDestination+0x6c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
            else if (!STAY_AT_CENTER)
                target = 0;       
        }
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y)
        target = 1;
}
 80016bc:	e011      	b.n	80016e2 <checkDestination+0x5a>
            else if (!STAY_AT_CENTER)
 80016be:	2300      	movs	r3, #0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10e      	bne.n	80016e2 <checkDestination+0x5a>
                target = 0;       
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <checkDestination+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
}
 80016ca:	e00a      	b.n	80016e2 <checkDestination+0x5a>
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y)
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <checkDestination+0x68>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d106      	bne.n	80016e2 <checkDestination+0x5a>
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <checkDestination+0x68>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <checkDestination+0x5a>
        target = 1;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <checkDestination+0x64>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000
 80016f0:	200004dc 	.word	0x200004dc
 80016f4:	200004e4 	.word	0x200004e4

080016f8 <highlightPath>:

// highlights the optimal path for the mouse
void highlightPath()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
    API_clearAllColor();
 80016fe:	f7fe fe9b 	bl	8000438 <API_clearAllColor>
    if (target) {
 8001702:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <highlightPath+0x134>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d03b      	beq.n	8001782 <highlightPath+0x8a>
        int x = STARTING_X;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
        int y = STARTING_Y;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
        while (!(x >= LOWER_X_GOAL && x <= UPPER_X_GOAL && y >= LOWER_Y_GOAL && y <= UPPER_Y_GOAL)) {
 8001712:	e029      	b.n	8001768 <highlightPath+0x70>
            API_setColor(x,y,'w');
 8001714:	2277      	movs	r2, #119	@ 0x77
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f7fe fe71 	bl	8000400 <API_setColor>
            switch (pathArray[x][y]) {
 800171e:	4a44      	ldr	r2, [pc, #272]	@ (8001830 <highlightPath+0x138>)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	441a      	add	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4413      	add	r3, r2
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d81b      	bhi.n	8001768 <highlightPath+0x70>
 8001730:	a201      	add	r2, pc, #4	@ (adr r2, 8001738 <highlightPath+0x40>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	08001749 	.word	0x08001749
 800173c:	08001751 	.word	0x08001751
 8001740:	08001759 	.word	0x08001759
 8001744:	08001761 	.word	0x08001761
                case NORTH: y++; break;
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	3301      	adds	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e00b      	b.n	8001768 <highlightPath+0x70>
                case WEST: x--; break;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3b01      	subs	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e007      	b.n	8001768 <highlightPath+0x70>
                case SOUTH: y--; break;
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	3b01      	subs	r3, #1
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	e003      	b.n	8001768 <highlightPath+0x70>
                case EAST: x++; break;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	bf00      	nop
        while (!(x >= LOWER_X_GOAL && x <= UPPER_X_GOAL && y >= LOWER_Y_GOAL && y <= UPPER_Y_GOAL)) {
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b06      	cmp	r3, #6
 800176c:	ddd2      	ble.n	8001714 <highlightPath+0x1c>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b08      	cmp	r3, #8
 8001772:	dccf      	bgt.n	8001714 <highlightPath+0x1c>
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b06      	cmp	r3, #6
 8001778:	ddcc      	ble.n	8001714 <highlightPath+0x1c>
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b08      	cmp	r3, #8
 800177e:	dcc9      	bgt.n	8001714 <highlightPath+0x1c>
 8001780:	e034      	b.n	80017ec <highlightPath+0xf4>
            }
        }
    } else {
        int x = LOWER_X_GOAL;
 8001782:	2307      	movs	r3, #7
 8001784:	60fb      	str	r3, [r7, #12]
        int y = LOWER_Y_GOAL;
 8001786:	2307      	movs	r3, #7
 8001788:	60bb      	str	r3, [r7, #8]
        while (!(x == STARTING_X && y == STARTING_Y)) {
 800178a:	e029      	b.n	80017e0 <highlightPath+0xe8>
            API_setColor(x,y,'w');
 800178c:	2277      	movs	r2, #119	@ 0x77
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7fe fe35 	bl	8000400 <API_setColor>
            switch (pathArray[x][y]) {
 8001796:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <highlightPath+0x138>)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	441a      	add	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d81b      	bhi.n	80017e0 <highlightPath+0xe8>
 80017a8:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <highlightPath+0xb8>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017c9 	.word	0x080017c9
 80017b8:	080017d1 	.word	0x080017d1
 80017bc:	080017d9 	.word	0x080017d9
                case NORTH: y++; break;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	e00b      	b.n	80017e0 <highlightPath+0xe8>
                case WEST: x--; break;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e007      	b.n	80017e0 <highlightPath+0xe8>
                case SOUTH: y--; break;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	e003      	b.n	80017e0 <highlightPath+0xe8>
                case EAST: x++; break;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	bf00      	nop
        while (!(x == STARTING_X && y == STARTING_Y)) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1d2      	bne.n	800178c <highlightPath+0x94>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1cf      	bne.n	800178c <highlightPath+0x94>
            }
        }
    }  
    // highlight start and goal values
    for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 80017ec:	2307      	movs	r3, #7
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	e010      	b.n	8001814 <highlightPath+0x11c>
        for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)  
 80017f2:	2307      	movs	r3, #7
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	e007      	b.n	8001808 <highlightPath+0x110>
            API_setColor(x,y,'w');
 80017f8:	2277      	movs	r2, #119	@ 0x77
 80017fa:	6839      	ldr	r1, [r7, #0]
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7fe fdff 	bl	8000400 <API_setColor>
        for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)  
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b08      	cmp	r3, #8
 800180c:	ddf4      	ble.n	80017f8 <highlightPath+0x100>
    for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3301      	adds	r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b08      	cmp	r3, #8
 8001818:	ddeb      	ble.n	80017f2 <highlightPath+0xfa>
    API_setColor(STARTING_X,STARTING_Y,'w');
 800181a:	2277      	movs	r2, #119	@ 0x77
 800181c:	2100      	movs	r1, #0
 800181e:	2000      	movs	r0, #0
 8001820:	f7fe fdee 	bl	8000400 <API_setColor>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20001168 	.word	0x20001168

08001834 <solver>:

// sends the mouse's recommended next action back to main
Action solver() {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    checkDestination();
 8001838:	f7ff ff26 	bl	8001688 <checkDestination>
    updateWalls();    
 800183c:	f7ff fe30 	bl	80014a0 <updateWalls>
    floodFill();
 8001840:	f7ff fc88 	bl	8001154 <floodFill>
    if (HIGHLIGHT_PATH) highlightPath();
 8001844:	2301      	movs	r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <solver+0x1a>
 800184a:	f7ff ff55 	bl	80016f8 <highlightPath>
    return nextAction();
 800184e:	f7ff fe65 	bl	800151c <nextAction>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0ce      	sub	sp, #312	@ 0x138
 800186c:	af00      	add	r7, sp, #0
 800186e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001872:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001876:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001888:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800188c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001890:	4618      	mov	r0, r3
 8001892:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001896:	461a      	mov	r2, r3
 8001898:	2100      	movs	r1, #0
 800189a:	f00a fe2f 	bl	800c4fc <memset>
  if(hi2c->Instance==I2C1)
 800189e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a68      	ldr	r2, [pc, #416]	@ (8001a4c <HAL_I2C_MspInit+0x1e4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d15f      	bne.n	8001970 <HAL_I2C_MspInit+0x108>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018b4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80018b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018cc:	2200      	movs	r2, #0
 80018ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d2:	f107 0318 	add.w	r3, r7, #24
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 f9ba 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80018e2:	f7ff f8cd 	bl	8000a80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 80018e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ec:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018f6:	4b56      	ldr	r3, [pc, #344]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 80018f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fc:	f003 0202 	and.w	r2, r3, #2
 8001900:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001904:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800190e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001912:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001914:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001918:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	2312      	movs	r3, #18
 800191e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192e:	2304      	movs	r3, #4
 8001930:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001938:	4619      	mov	r1, r3
 800193a:	4846      	ldr	r0, [pc, #280]	@ (8001a54 <HAL_I2C_MspInit+0x1ec>)
 800193c:	f000 fe02 	bl	8002544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001940:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 8001942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001946:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 8001948:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800194c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001950:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 8001952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001956:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800195a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800195e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001968:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800196c:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800196e:	e067      	b.n	8001a40 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 8001970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001974:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a36      	ldr	r2, [pc, #216]	@ (8001a58 <HAL_I2C_MspInit+0x1f0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d15e      	bne.n	8001a40 <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001986:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800198a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001996:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800199a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800199e:	2200      	movs	r2, #0
 80019a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 f951 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_MspInit+0x150>
      Error_Handler();
 80019b4:	f7ff f864 	bl	8000a80 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 80019ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019be:	4a24      	ldr	r2, [pc, #144]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019c8:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 80019ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ce:	f003 0202 	and.w	r2, r3, #2
 80019d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019e4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80019e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a00:	2304      	movs	r3, #4
 8001a02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4811      	ldr	r0, [pc, #68]	@ (8001a54 <HAL_I2C_MspInit+0x1ec>)
 8001a0e:	f000 fd99 	bl	8002544 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 8001a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 8001a1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a1e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_I2C_MspInit+0x1e8>)
 8001a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a30:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	44020c00 	.word	0x44020c00
 8001a54:	42020400 	.word	0x42020400
 8001a58:	40005800 	.word	0x40005800

08001a5c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0ce      	sub	sp, #312	@ 0x138
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a66:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a6a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a80:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a84:	4618      	mov	r0, r3
 8001a86:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f00a fd35 	bl	800c4fc <memset>
  if(hsd->Instance==SDMMC1)
 8001a92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc8 <HAL_SD_MspInit+0x16c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	f040 808b 	bne.w	8001bbc <HAL_SD_MspInit+0x160>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001aa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001aaa:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001aae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL1Q;
 8001aba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001abe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 f8bf 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_SD_MspInit+0x80>
    {
      Error_Handler();
 8001ad8:	f7fe ffd2 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001adc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae2:	4a3a      	ldr	r2, [pc, #232]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001ae4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ae8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001aec:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001af6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001afa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b08:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b10:	4a2e      	ldr	r2, [pc, #184]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b20:	f003 0204 	and.w	r2, r3, #4
 8001b24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b28:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b32:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b36:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b3e:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b48:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_SD_MspInit+0x170>)
 8001b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b4e:	f003 0208 	and.w	r2, r3, #8
 8001b52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b64:	681b      	ldr	r3, [r3, #0]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b66:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001b6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b80:	230c      	movs	r3, #12
 8001b82:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b86:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4810      	ldr	r0, [pc, #64]	@ (8001bd0 <HAL_SD_MspInit+0x174>)
 8001b8e:	f000 fcd9 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b92:	2304      	movs	r3, #4
 8001b94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001baa:	230c      	movs	r3, #12
 8001bac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <HAL_SD_MspInit+0x178>)
 8001bb8:	f000 fcc4 	bl	8002544 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001bbc:	bf00      	nop
 8001bbe:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	46008000 	.word	0x46008000
 8001bcc:	44020c00 	.word	0x44020c00
 8001bd0:	42020800 	.word	0x42020800
 8001bd4:	42020c00 	.word	0x42020c00

08001bd8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_TIM_Base_MspInit+0x3c>)
 8001bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bf0:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <HAL_TIM_Base_MspInit+0x3c>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_TIM_Base_MspInit+0x3c>)
 8001bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	44020c00 	.word	0x44020c00

08001c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c38:	d13e      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c40:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PC4     ------> TIM2_CH4
    PA15(JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM2_Pin;
 8001c76:	2310      	movs	r3, #16
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c86:	2301      	movs	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c92:	f000 fc57 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin;
 8001c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <HAL_TIM_MspPostInit+0xb0>)
 8001cb4:	f000 fc46 	bl	8002544 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	44020c00 	.word	0x44020c00
 8001cc4:	42020800 	.word	0x42020800
 8001cc8:	42020000 	.word	0x42020000

08001ccc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0c6      	sub	sp, #280	@ 0x118
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cda:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cdc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001cea:	461a      	mov	r2, r3
 8001cec:	2100      	movs	r1, #0
 8001cee:	f00a fc05 	bl	800c4fc <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001cf2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <HAL_PCD_MspInit+0xac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d133      	bne.n	8001d6c <HAL_PCD_MspInit+0xa0>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d08:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0310 	mov.w	r3, #16
 8001d14:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001d18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d20:	2230      	movs	r2, #48	@ 0x30
 8001d22:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f001 ff90 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001d36:	f7fe fea3 	bl	8000a80 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001d3a:	f000 ffff 	bl	8002d3c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_PCD_MspInit+0xb0>)
 8001d40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d44:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <HAL_PCD_MspInit+0xb0>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d4a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_PCD_MspInit+0xb0>)
 8001d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d54:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001d58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d6a:	681b      	ldr	r3, [r3, #0]

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001d6c:	bf00      	nop
 8001d6e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40016000 	.word	0x40016000
 8001d7c:	44020c00 	.word	0x44020c00

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 fa0d 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_kill>:

int _kill(int pid, int sig)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df8:	f00a fc22 	bl	800c640 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2216      	movs	r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_exit>:

void _exit (int status)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffe7 	bl	8001dee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <_exit+0x12>

08001e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e00a      	b.n	8001e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e36:	f3af 8000 	nop.w
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	b2ca      	uxtb	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf0      	blt.n	8001e36 <_read+0x12>
  }

  return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e009      	b.n	8001e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf1      	blt.n	8001e70 <_write+0x12>
  }
  return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_close>:

int _close(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <_isatty>:

int _isatty(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f00a fb86 	bl	800c640 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200a0000 	.word	0x200a0000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	20001668 	.word	0x20001668
 8001f68:	200017c0 	.word	0x200017c0

08001f6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f72:	4b35      	ldr	r3, [pc, #212]	@ (8002048 <SystemInit+0xdc>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f78:	4a33      	ldr	r2, [pc, #204]	@ (8002048 <SystemInit+0xdc>)
 8001f7a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001f82:	4b32      	ldr	r3, [pc, #200]	@ (800204c <SystemInit+0xe0>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <SystemInit+0xe0>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <SystemInit+0xe0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <SystemInit+0xe0>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	492c      	ldr	r1, [pc, #176]	@ (800204c <SystemInit+0xe0>)
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <SystemInit+0xe4>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <SystemInit+0xe0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001fa6:	4b29      	ldr	r3, [pc, #164]	@ (800204c <SystemInit+0xe0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <SystemInit+0xe0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <SystemInit+0xe0>)
 8001fb4:	4a27      	ldr	r2, [pc, #156]	@ (8002054 <SystemInit+0xe8>)
 8001fb6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <SystemInit+0xe0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <SystemInit+0xe0>)
 8001fc0:	4a24      	ldr	r2, [pc, #144]	@ (8002054 <SystemInit+0xe8>)
 8001fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <SystemInit+0xe0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <SystemInit+0xe0>)
 8001fcc:	4a21      	ldr	r2, [pc, #132]	@ (8002054 <SystemInit+0xe8>)
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <SystemInit+0xe0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <SystemInit+0xe0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <SystemInit+0xe0>)
 8001fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <SystemInit+0xe0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <SystemInit+0xdc>)
 8001fea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fee:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <SystemInit+0xec>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001ff8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002000:	d003      	beq.n	800200a <SystemInit+0x9e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002008:	d117      	bne.n	800203a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800200a:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <SystemInit+0xec>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <SystemInit+0xec>)
 8002018:	4a10      	ldr	r2, [pc, #64]	@ (800205c <SystemInit+0xf0>)
 800201a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <SystemInit+0xec>)
 800201e:	4a10      	ldr	r2, [pc, #64]	@ (8002060 <SystemInit+0xf4>)
 8002020:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <SystemInit+0xec>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a0c      	ldr	r2, [pc, #48]	@ (8002058 <SystemInit+0xec>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <SystemInit+0xec>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <SystemInit+0xec>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	61d3      	str	r3, [r2, #28]
  }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	44020c00 	.word	0x44020c00
 8002050:	eae2eae3 	.word	0xeae2eae3
 8002054:	01010280 	.word	0x01010280
 8002058:	40022000 	.word	0x40022000
 800205c:	08192a3b 	.word	0x08192a3b
 8002060:	4c5d6e7f 	.word	0x4c5d6e7f

08002064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800209c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002068:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800206a:	e003      	b.n	8002074 <LoopCopyDataInit>

0800206c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800206e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002070:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002072:	3104      	adds	r1, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002074:	480b      	ldr	r0, [pc, #44]	@ (80020a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002076:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002078:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800207a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800207c:	d3f6      	bcc.n	800206c <CopyDataInit>
	ldr	r2, =_sbss
 800207e:	4a0b      	ldr	r2, [pc, #44]	@ (80020ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002080:	e002      	b.n	8002088 <LoopFillZerobss>

08002082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002082:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002084:	f842 3b04 	str.w	r3, [r2], #4

08002088 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <LoopForever+0x16>)
	cmp	r2, r3
 800208a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800208c:	d3f9      	bcc.n	8002082 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800208e:	f7ff ff6d 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f00a fadb 	bl	800c64c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002096:	f7fe fa1f 	bl	80004d8 <main>

0800209a <LoopForever>:

LoopForever:
    b LoopForever
 800209a:	e7fe      	b.n	800209a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800209c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80020a0:	0800d420 	.word	0x0800d420
	ldr	r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020a8:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80020ac:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80020b0:	200017bc 	.word	0x200017bc

080020b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC1_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f96c 	bl	800239a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80020c2:	f001 fc3b 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_Init+0x44>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	490b      	ldr	r1, [pc, #44]	@ (8002100 <HAL_Init+0x48>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_Init+0x4c>)
 80020da:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020dc:	2004      	movs	r0, #4
 80020de:	f000 f9a3 	bl	8002428 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020e2:	200f      	movs	r0, #15
 80020e4:	f000 f810 	bl	8002108 <HAL_InitTick>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e002      	b.n	80020f8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020f2:	f7ff fbb1 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	44020c00 	.word	0x44020c00
 8002100:	0800d3c4 	.word	0x0800d3c4
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002114:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <HAL_InitTick+0xdc>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e05c      	b.n	80021da <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002120:	4b31      	ldr	r3, [pc, #196]	@ (80021e8 <HAL_InitTick+0xe0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b04      	cmp	r3, #4
 800212a:	d10c      	bne.n	8002146 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_InitTick+0xe4>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_InitTick+0xdc>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213a:	fbb3 f3f1 	udiv	r3, r3, r1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e037      	b.n	80021b6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002146:	f000 f9c7 	bl	80024d8 <HAL_SYSTICK_GetCLKSourceConfig>
 800214a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d023      	beq.n	800219a <HAL_InitTick+0x92>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d82d      	bhi.n	80021b4 <HAL_InitTick+0xac>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_InitTick+0x5e>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d00d      	beq.n	8002180 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002164:	e026      	b.n	80021b4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002166:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <HAL_InitTick+0xe4>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_InitTick+0xdc>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002174:	fbb3 f3f1 	udiv	r3, r3, r1
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	60fb      	str	r3, [r7, #12]
        break;
 800217e:	e01a      	b.n	80021b6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002180:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <HAL_InitTick+0xdc>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218a:	fbb3 f3f2 	udiv	r3, r3, r2
 800218e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	60fb      	str	r3, [r7, #12]
        break;
 8002198:	e00d      	b.n	80021b6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800219a:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_InitTick+0xdc>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80021a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	60fb      	str	r3, [r7, #12]
        break;
 80021b2:	e000      	b.n	80021b6 <HAL_InitTick+0xae>
        break;
 80021b4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f914 	bl	80023e4 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e009      	b.n	80021da <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c6:	2200      	movs	r2, #0
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	f04f 30ff 	mov.w	r0, #4294967295
 80021ce:	f000 f8ef 	bl	80023b0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80021d2:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <HAL_InitTick+0xe8>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	e000e010 	.word	0xe000e010
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000000c 	.word	0x2000000c
 8002218:	2000166c 	.word	0x2000166c

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000166c 	.word	0x2000166c

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	@ (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	@ (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff6a 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023be:	f7ff ff81 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 80023c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7ff ffb3 	bl	8002334 <NVIC_EncodePriority>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff82 	bl	80022e0 <__NVIC_SetPriority>
}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f4:	d301      	bcc.n	80023fa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00d      	b.n	8002416 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80023fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <HAL_SYSTICK_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_SYSTICK_Config+0x40>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_SYSTICK_Config+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <HAL_SYSTICK_Config+0x40>)
 800240e:	f043 0303 	orr.w	r3, r3, #3
 8002412:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d844      	bhi.n	80024c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002436:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	0800245f 	.word	0x0800245f
 8002440:	0800247d 	.word	0x0800247d
 8002444:	0800249f 	.word	0x0800249f
 8002448:	080024c1 	.word	0x080024c1
 800244c:	08002451 	.word	0x08002451
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002450:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6013      	str	r3, [r2, #0]
      break;
 800245c:	e031      	b.n	80024c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800246c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002470:	4a18      	ldr	r2, [pc, #96]	@ (80024d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002472:	f023 030c 	bic.w	r3, r3, #12
 8002476:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800247a:	e022      	b.n	80024c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a13      	ldr	r2, [pc, #76]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002488:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800248a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800248e:	f023 030c 	bic.w	r3, r3, #12
 8002492:	4a10      	ldr	r2, [pc, #64]	@ (80024d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800249c:	e011      	b.n	80024c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a0b      	ldr	r2, [pc, #44]	@ (80024d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80024aa:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024b0:	f023 030c 	bic.w	r3, r3, #12
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80024be:	e000      	b.n	80024c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80024c0:	bf00      	nop
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010
 80024d4:	44020c00 	.word	0x44020c00

080024d8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80024de:	4b17      	ldr	r3, [pc, #92]	@ (800253c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80024ea:	2304      	movs	r3, #4
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	e01e      	b.n	800252e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80024f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d00f      	beq.n	8002522 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d80f      	bhi.n	8002528 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d003      	beq.n	800251c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002514:	e008      	b.n	8002528 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
        break;
 800251a:	e008      	b.n	800252e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800251c:	2301      	movs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
        break;
 8002520:	e005      	b.n	800252e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002522:	2302      	movs	r3, #2
 8002524:	607b      	str	r3, [r7, #4]
        break;
 8002526:	e002      	b.n	800252e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002528:	2300      	movs	r3, #0
 800252a:	607b      	str	r3, [r7, #4]
        break;
 800252c:	bf00      	nop
    }
  }
  return systick_source;
 800252e:	687b      	ldr	r3, [r7, #4]
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e010 	.word	0xe000e010
 8002540:	44020c00 	.word	0x44020c00

08002544 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002552:	e142      	b.n	80027da <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8134 	beq.w	80027d4 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x38>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d125      	bne.n	80025c8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	6979      	ldr	r1, [r7, #20]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4013      	ands	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d00b      	beq.n	800261c <HAL_GPIO_Init+0xd8>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002610:	2b11      	cmp	r3, #17
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d130      	bne.n	800267e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002652:	2201      	movs	r2, #1
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4013      	ands	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 0201 	and.w	r2, r3, #1
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b03      	cmp	r3, #3
 8002688:	d109      	bne.n	800269e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002692:	2b03      	cmp	r3, #3
 8002694:	d11b      	bne.n	80026ce <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d017      	beq.n	80026ce <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4013      	ands	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d07c      	beq.n	80027d4 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80026da:	4a47      	ldr	r2, [pc, #284]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3318      	adds	r3, #24
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4013      	ands	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0a9a      	lsrs	r2, r3, #10
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <HAL_GPIO_Init+0x2b8>)
 8002704:	4013      	ands	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	f002 0203 	and.w	r2, r2, #3
 800270c:	00d2      	lsls	r2, r2, #3
 800270e:	4093      	lsls	r3, r2
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002716:	4938      	ldr	r1, [pc, #224]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3318      	adds	r3, #24
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002724:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4013      	ands	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002748:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4013      	ands	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002772:	4a21      	ldr	r2, [pc, #132]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002778:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800277e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43db      	mvns	r3, r3
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4013      	ands	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800279e:	4a16      	ldr	r2, [pc, #88]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80027a6:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 80027a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80027cc:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <HAL_GPIO_Init+0x2b4>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	3301      	adds	r3, #1
 80027d8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f47f aeb5 	bne.w	8002554 <HAL_GPIO_Init+0x10>
  }
}
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	44022000 	.word	0x44022000
 80027fc:	002f7f7f 	.word	0x002f7f7f

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800281c:	e002      	b.n	8002824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e08d      	b.n	800295e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff f806 	bl	8001868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	@ 0x24
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002880:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002890:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e006      	b.n	80028b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d108      	bne.n	80028d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	e007      	b.n	80028e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002904:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69d9      	ldr	r1, [r3, #28]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b20      	cmp	r3, #32
 800297a:	d138      	bne.n	80029ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002986:	2302      	movs	r3, #2
 8002988:	e032      	b.n	80029f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2224      	movs	r2, #36	@ 0x24
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d139      	bne.n	8002a86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e033      	b.n	8002a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	@ 0x24
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e007      	b.n	8002ac2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0204 	bic.w	r2, r3, #4
 8002aba:	4905      	ldr	r1, [pc, #20]	@ (8002ad0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40030400 	.word	0x40030400

08002ad4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_ICACHE_Enable+0x1c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <HAL_ICACHE_Enable+0x1c>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40030400 	.word	0x40030400

08002af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0f3      	b.n	8002cee <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff f8d6 	bl	8001ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2203      	movs	r2, #3
 8002b24:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f008 ff68 	bl	800ba02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7c1a      	ldrb	r2, [r3, #16]
 8002b3a:	f88d 2000 	strb.w	r2, [sp]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b42:	f008 ff40 	bl	800b9c6 <USB_CoreInit>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0ca      	b.n	8002cee <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f008 ff64 	bl	800ba2c <USB_SetCurrentMode>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0bb      	b.n	8002cee <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e03f      	b.n	8002bfc <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	3315      	adds	r3, #21
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3317      	adds	r3, #23
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3324      	adds	r3, #36	@ 0x24
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3328      	adds	r3, #40	@ 0x28
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	791b      	ldrb	r3, [r3, #4]
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3ba      	bcc.n	8002b7c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	e044      	b.n	8002c96 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	791b      	ldrb	r3, [r3, #4]
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3b5      	bcc.n	8002c0c <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7c1a      	ldrb	r2, [r3, #16]
 8002ca8:	f88d 2000 	strb.w	r2, [sp]
 8002cac:	3304      	adds	r3, #4
 8002cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb0:	f008 fedf 	bl	800ba72 <USB_DevInit>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e013      	b.n	8002cee <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7b1b      	ldrb	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d102      	bne.n	8002ce2 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f80a 	bl	8002cf6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f008 fee6 	bl	800bab8 <USB_DevDisconnect>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	f043 0202 	orr.w	r2, r3, #2
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	44020800 	.word	0x44020800

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f000 bc28 	b.w	80035c0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d70:	4b94      	ldr	r3, [pc, #592]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 0318 	and.w	r3, r3, #24
 8002d78:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002d7a:	4b92      	ldr	r3, [pc, #584]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05b      	beq.n	8002e48 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_OscConfig+0x46>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b18      	cmp	r3, #24
 8002d9a:	d114      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d111      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f000 bc08 	b.w	80035c0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002db0:	4b84      	ldr	r3, [pc, #528]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	4981      	ldr	r1, [pc, #516]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002dc4:	e040      	b.n	8002e48 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d023      	beq.n	8002e16 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dce:	4b7d      	ldr	r3, [pc, #500]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7ff fa1f 	bl	800221c <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002de2:	f7ff fa1b 	bl	800221c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e3e5      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002df4:	4b73      	ldr	r3, [pc, #460]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002e00:	4b70      	ldr	r3, [pc, #448]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	496d      	ldr	r1, [pc, #436]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	618b      	str	r3, [r1, #24]
 8002e14:	e018      	b.n	8002e48 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e16:	4b6b      	ldr	r3, [pc, #428]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7ff f9fb 	bl	800221c <HAL_GetTick>
 8002e26:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002e2a:	f7ff f9f7 	bl	800221c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e3c1      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002e3c:	4b61      	ldr	r3, [pc, #388]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a0 	beq.w	8002f96 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x10c>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b18      	cmp	r3, #24
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 8092 	bne.w	8002f96 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e3a4      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x132>
 8002e80:	4b50      	ldr	r3, [pc, #320]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	e058      	b.n	8002f40 <HAL_RCC_OscConfig+0x1e4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x160>
 8002e96:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b48      	ldr	r3, [pc, #288]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a47      	ldr	r2, [pc, #284]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ea8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b45      	ldr	r3, [pc, #276]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a44      	ldr	r2, [pc, #272]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e041      	b.n	8002f40 <HAL_RCC_OscConfig+0x1e4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec4:	d112      	bne.n	8002eec <HAL_RCC_OscConfig+0x190>
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ed8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b39      	ldr	r3, [pc, #228]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a38      	ldr	r2, [pc, #224]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e029      	b.n	8002f40 <HAL_RCC_OscConfig+0x1e4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002ef4:	d112      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
 8002ef6:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b30      	ldr	r3, [pc, #192]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e011      	b.n	8002f40 <HAL_RCC_OscConfig+0x1e4>
 8002f1c:	4b29      	ldr	r3, [pc, #164]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a28      	ldr	r2, [pc, #160]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a25      	ldr	r2, [pc, #148]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a22      	ldr	r2, [pc, #136]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f3a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7ff f968 	bl	800221c <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f50:	f7ff f964 	bl	800221c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e32e      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	4b18      	ldr	r3, [pc, #96]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x1f4>
 8002f6e:	e012      	b.n	8002f96 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7ff f954 	bl	800221c <HAL_GetTick>
 8002f74:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f78:	f7ff f950 	bl	800221c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e31a      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <HAL_RCC_OscConfig+0x268>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 809a 	beq.w	80030d8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x25a>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b18      	cmp	r3, #24
 8002fae:	d149      	bne.n	8003044 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d146      	bne.n	8003044 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d104      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e2fe      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
 8002fc2:	bf00      	nop
 8002fc4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11c      	bne.n	8003008 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002fce:	4b9a      	ldr	r3, [pc, #616]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0218 	and.w	r2, r3, #24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d014      	beq.n	8003008 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002fde:	4b96      	ldr	r3, [pc, #600]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0218 	bic.w	r2, r3, #24
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	4993      	ldr	r1, [pc, #588]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002ff0:	f000 fdd0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ff4:	4b91      	ldr	r3, [pc, #580]	@ (800323c <HAL_RCC_OscConfig+0x4e0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f885 	bl	8002108 <HAL_InitTick>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e2db      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7ff f908 	bl	800221c <HAL_GetTick>
 800300c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003010:	f7ff f904 	bl	800221c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e2ce      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003022:	4b85      	ldr	r3, [pc, #532]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800302e:	4b82      	ldr	r3, [pc, #520]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	497e      	ldr	r1, [pc, #504]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003042:	e049      	b.n	80030d8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800304c:	4b7a      	ldr	r3, [pc, #488]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 0218 	bic.w	r2, r3, #24
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	4977      	ldr	r1, [pc, #476]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800305e:	4b76      	ldr	r3, [pc, #472]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7ff f8d7 	bl	800221c <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003072:	f7ff f8d3 	bl	800221c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e29d      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003084:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003090:	4b69      	ldr	r3, [pc, #420]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	4966      	ldr	r1, [pc, #408]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	610b      	str	r3, [r1, #16]
 80030a4:	e018      	b.n	80030d8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a6:	4b64      	ldr	r3, [pc, #400]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a63      	ldr	r2, [pc, #396]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7ff f8b3 	bl	800221c <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80030ba:	f7ff f8af 	bl	800221c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e279      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d03c      	beq.n	800315e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01c      	beq.n	8003126 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ec:	4b52      	ldr	r3, [pc, #328]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80030ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030f2:	4a51      	ldr	r2, [pc, #324]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80030f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7ff f88e 	bl	800221c <HAL_GetTick>
 8003100:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003104:	f7ff f88a 	bl	800221c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e254      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003116:	4b48      	ldr	r3, [pc, #288]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800311c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ef      	beq.n	8003104 <HAL_RCC_OscConfig+0x3a8>
 8003124:	e01b      	b.n	800315e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003126:	4b44      	ldr	r3, [pc, #272]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800312c:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800312e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003132:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7ff f871 	bl	800221c <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800313e:	f7ff f86d 	bl	800221c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e237      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003150:	4b39      	ldr	r3, [pc, #228]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003156:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1ef      	bne.n	800313e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80d2 	beq.w	8003310 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800316c:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <HAL_RCC_OscConfig+0x4e4>)
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d118      	bne.n	80031aa <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003178:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <HAL_RCC_OscConfig+0x4e4>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	4a30      	ldr	r2, [pc, #192]	@ (8003240 <HAL_RCC_OscConfig+0x4e4>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003184:	f7ff f84a 	bl	800221c <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318c:	f7ff f846 	bl	800221c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e210      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800319e:	4b28      	ldr	r3, [pc, #160]	@ (8003240 <HAL_RCC_OscConfig+0x4e4>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_RCC_OscConfig+0x468>
 80031b2:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031c2:	e074      	b.n	80032ae <HAL_RCC_OscConfig+0x552>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d118      	bne.n	80031fe <HAL_RCC_OscConfig+0x4a2>
 80031cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031d2:	4a19      	ldr	r2, [pc, #100]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031dc:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031e2:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031ec:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031f2:	4a11      	ldr	r2, [pc, #68]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031fc:	e057      	b.n	80032ae <HAL_RCC_OscConfig+0x552>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d11e      	bne.n	8003244 <HAL_RCC_OscConfig+0x4e8>
 8003206:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800320c:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003216:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800321c:	4a06      	ldr	r2, [pc, #24]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800321e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003222:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003226:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 8003228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800322c:	4a02      	ldr	r2, [pc, #8]	@ (8003238 <HAL_RCC_OscConfig+0x4dc>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x552>
 8003238:	44020c00 	.word	0x44020c00
 800323c:	20000008 	.word	0x20000008
 8003240:	44020800 	.word	0x44020800
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b85      	cmp	r3, #133	@ 0x85
 800324a:	d118      	bne.n	800327e <HAL_RCC_OscConfig+0x522>
 800324c:	4ba2      	ldr	r3, [pc, #648]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800324e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003252:	4aa1      	ldr	r2, [pc, #644]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800325c:	4b9e      	ldr	r3, [pc, #632]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800325e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003262:	4a9d      	ldr	r2, [pc, #628]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003268:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800326c:	4b9a      	ldr	r3, [pc, #616]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800326e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003272:	4a99      	ldr	r2, [pc, #612]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800327c:	e017      	b.n	80032ae <HAL_RCC_OscConfig+0x552>
 800327e:	4b96      	ldr	r3, [pc, #600]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003284:	4a94      	ldr	r2, [pc, #592]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800328e:	4b92      	ldr	r3, [pc, #584]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003294:	4a90      	ldr	r2, [pc, #576]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800329e:	4b8e      	ldr	r3, [pc, #568]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80032a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032a4:	4a8c      	ldr	r2, [pc, #560]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80032a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe ffb1 	bl	800221c <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe ffad 	bl	800221c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e175      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d4:	4b80      	ldr	r3, [pc, #512]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80032d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ed      	beq.n	80032be <HAL_RCC_OscConfig+0x562>
 80032e2:	e015      	b.n	8003310 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe ff9a 	bl	800221c <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe ff96 	bl	800221c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e15e      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003302:	4b75      	ldr	r3, [pc, #468]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ed      	bne.n	80032ec <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d036      	beq.n	800338a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d019      	beq.n	8003358 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003324:	4b6c      	ldr	r3, [pc, #432]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6b      	ldr	r2, [pc, #428]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800332a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800332e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe ff74 	bl	800221c <HAL_GetTick>
 8003334:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003338:	f7fe ff70 	bl	800221c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e13a      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800334a:	4b63      	ldr	r3, [pc, #396]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x5dc>
 8003356:	e018      	b.n	800338a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003358:	4b5f      	ldr	r3, [pc, #380]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5e      	ldr	r2, [pc, #376]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800335e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe ff5a 	bl	800221c <HAL_GetTick>
 8003368:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800336c:	f7fe ff56 	bl	800221c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e120      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800337e:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8115 	beq.w	80035be <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b18      	cmp	r3, #24
 8003398:	f000 80af 	beq.w	80034fa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	f040 8086 	bne.w	80034b2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80033a6:	4b4c      	ldr	r3, [pc, #304]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a4b      	ldr	r2, [pc, #300]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80033ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe ff33 	bl	800221c <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80033ba:	f7fe ff2f 	bl	800221c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e0f9      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033cc:	4b42      	ldr	r3, [pc, #264]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80033d8:	4b3f      	ldr	r3, [pc, #252]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033ec:	0212      	lsls	r2, r2, #8
 80033ee:	430a      	orrs	r2, r1
 80033f0:	4939      	ldr	r1, [pc, #228]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	628b      	str	r3, [r1, #40]	@ 0x28
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	3b01      	subs	r3, #1
 8003406:	025b      	lsls	r3, r3, #9
 8003408:	b29b      	uxth	r3, r3
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	3b01      	subs	r3, #1
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	3b01      	subs	r3, #1
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003426:	492c      	ldr	r1, [pc, #176]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800342c:	4b2a      	ldr	r3, [pc, #168]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003432:	f023 0310 	bic.w	r3, r3, #16
 8003436:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343c:	4a26      	ldr	r2, [pc, #152]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003442:	4b25      	ldr	r3, [pc, #148]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800344e:	4b22      	ldr	r3, [pc, #136]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	f023 020c 	bic.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	491f      	ldr	r1, [pc, #124]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800345c:	4313      	orrs	r3, r2
 800345e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003460:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	f023 0220 	bic.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346c:	491a      	ldr	r1, [pc, #104]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003472:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	4a18      	ldr	r2, [pc, #96]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800347e:	4b16      	ldr	r3, [pc, #88]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 8003484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe fec7 	bl	800221c <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003492:	f7fe fec3 	bl	800221c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e08d      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x736>
 80034b0:	e085      	b.n	80035be <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a08      	ldr	r2, [pc, #32]	@ (80034d8 <HAL_RCC_OscConfig+0x77c>)
 80034b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fead 	bl	800221c <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fea9 	bl	800221c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d903      	bls.n	80034dc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e073      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
 80034d8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80034e8:	4b37      	ldr	r3, [pc, #220]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	4a36      	ldr	r2, [pc, #216]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 80034ee:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	6293      	str	r3, [r2, #40]	@ 0x28
 80034f8:	e061      	b.n	80035be <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80034fa:	4b33      	ldr	r3, [pc, #204]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003500:	4b31      	ldr	r3, [pc, #196]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 8003502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003504:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	2b01      	cmp	r3, #1
 800350c:	d031      	beq.n	8003572 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d12a      	bne.n	8003572 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d122      	bne.n	8003572 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003536:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d11a      	bne.n	8003572 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	0a5b      	lsrs	r3, r3, #9
 8003540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d111      	bne.n	8003572 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d108      	bne.n	8003572 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	0e1b      	lsrs	r3, r3, #24
 8003564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e024      	b.n	80035c0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 8003578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357a:	08db      	lsrs	r3, r3, #3
 800357c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003584:	429a      	cmp	r2, r3
 8003586:	d01a      	beq.n	80035be <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003588:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	4a0e      	ldr	r2, [pc, #56]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe fe42 	bl	800221c <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800359a:	bf00      	nop
 800359c:	f7fe fe3e 	bl	800221c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d0f9      	beq.n	800359c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ac:	4a06      	ldr	r2, [pc, #24]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 80035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b6:	4a04      	ldr	r2, [pc, #16]	@ (80035c8 <HAL_RCC_OscConfig+0x86c>)
 80035b8:	f043 0310 	orr.w	r3, r3, #16
 80035bc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	44020c00 	.word	0x44020c00

080035cc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e19e      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b83      	ldr	r3, [pc, #524]	@ (80037f0 <HAL_RCC_ClockConfig+0x224>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d910      	bls.n	8003610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b80      	ldr	r3, [pc, #512]	@ (80037f0 <HAL_RCC_ClockConfig+0x224>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 020f 	bic.w	r2, r3, #15
 80035f6:	497e      	ldr	r1, [pc, #504]	@ (80037f0 <HAL_RCC_ClockConfig+0x224>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b7c      	ldr	r3, [pc, #496]	@ (80037f0 <HAL_RCC_ClockConfig+0x224>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e186      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	4b74      	ldr	r3, [pc, #464]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800362a:	429a      	cmp	r2, r3
 800362c:	d909      	bls.n	8003642 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800362e:	4b71      	ldr	r3, [pc, #452]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	496d      	ldr	r1, [pc, #436]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 800363e:	4313      	orrs	r3, r2
 8003640:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	4b68      	ldr	r3, [pc, #416]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800365c:	429a      	cmp	r2, r3
 800365e:	d909      	bls.n	8003674 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003660:	4b64      	ldr	r3, [pc, #400]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	4961      	ldr	r1, [pc, #388]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003670:	4313      	orrs	r3, r2
 8003672:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4b5b      	ldr	r3, [pc, #364]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800368c:	429a      	cmp	r2, r3
 800368e:	d908      	bls.n	80036a2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003690:	4b58      	ldr	r3, [pc, #352]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4955      	ldr	r1, [pc, #340]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d010      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	4b50      	ldr	r3, [pc, #320]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d908      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80036be:	4b4d      	ldr	r3, [pc, #308]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 020f 	bic.w	r2, r3, #15
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	494a      	ldr	r1, [pc, #296]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8093 	beq.w	8003804 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036e6:	4b43      	ldr	r3, [pc, #268]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d121      	bne.n	8003736 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e113      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fe:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d115      	bne.n	8003736 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e107      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003716:	4b37      	ldr	r3, [pc, #220]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0fb      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003726:	4b33      	ldr	r3, [pc, #204]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0f3      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003736:	4b2f      	ldr	r3, [pc, #188]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	492c      	ldr	r1, [pc, #176]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fe fd68 	bl	800221c <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d112      	bne.n	800377c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003756:	e00a      	b.n	800376e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003758:	f7fe fd60 	bl	800221c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0d7      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376e:	4b21      	ldr	r3, [pc, #132]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0318 	and.w	r3, r3, #24
 8003776:	2b18      	cmp	r3, #24
 8003778:	d1ee      	bne.n	8003758 <HAL_RCC_ClockConfig+0x18c>
 800377a:	e043      	b.n	8003804 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d112      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003784:	e00a      	b.n	800379c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fe fd49 	bl	800221c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0c0      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800379c:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f003 0318 	and.w	r3, r3, #24
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d1ee      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
 80037a8:	e02c      	b.n	8003804 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d122      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7fe fd32 	bl	800221c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0a9      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80037ca:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <HAL_RCC_ClockConfig+0x228>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 0318 	and.w	r3, r3, #24
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d1ee      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
 80037d6:	e015      	b.n	8003804 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fe fd20 	bl	800221c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d906      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e097      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
 80037ee:	bf00      	nop
 80037f0:	40022000 	.word	0x40022000
 80037f4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0318 	and.w	r3, r3, #24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e9      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	4b44      	ldr	r3, [pc, #272]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	429a      	cmp	r2, r3
 800381e:	d208      	bcs.n	8003832 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003820:	4b41      	ldr	r3, [pc, #260]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 020f 	bic.w	r2, r3, #15
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	493e      	ldr	r1, [pc, #248]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003832:	4b3e      	ldr	r3, [pc, #248]	@ (800392c <HAL_RCC_ClockConfig+0x360>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d210      	bcs.n	8003862 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003840:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <HAL_RCC_ClockConfig+0x360>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 020f 	bic.w	r2, r3, #15
 8003848:	4938      	ldr	r1, [pc, #224]	@ (800392c <HAL_RCC_ClockConfig+0x360>)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003850:	4b36      	ldr	r3, [pc, #216]	@ (800392c <HAL_RCC_ClockConfig+0x360>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e05d      	b.n	800391e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d010      	beq.n	8003890 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	4b2d      	ldr	r3, [pc, #180]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800387a:	429a      	cmp	r2, r3
 800387c:	d208      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800387e:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4927      	ldr	r1, [pc, #156]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d209      	bcs.n	80038c2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	491a      	ldr	r1, [pc, #104]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d012      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038dc:	429a      	cmp	r2, r3
 80038de:	d209      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	490e      	ldr	r1, [pc, #56]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80038f4:	f000 f822 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	490b      	ldr	r1, [pc, #44]	@ (8003930 <HAL_RCC_ClockConfig+0x364>)
 8003904:	5ccb      	ldrb	r3, [r1, r3]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <HAL_RCC_ClockConfig+0x368>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800390e:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <HAL_RCC_ClockConfig+0x36c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fbf8 	bl	8002108 <HAL_InitTick>
 8003918:	4603      	mov	r3, r0
 800391a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800391c:	7afb      	ldrb	r3, [r7, #11]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	44020c00 	.word	0x44020c00
 800392c:	40022000 	.word	0x40022000
 8003930:	0800d3c4 	.word	0x0800d3c4
 8003934:	20000004 	.word	0x20000004
 8003938:	20000008 	.word	0x20000008

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	@ 0x24
 8003940:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003942:	4b8c      	ldr	r3, [pc, #560]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 0318 	and.w	r3, r3, #24
 800394a:	2b08      	cmp	r3, #8
 800394c:	d102      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800394e:	4b8a      	ldr	r3, [pc, #552]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	e107      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003954:	4b87      	ldr	r3, [pc, #540]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f003 0318 	and.w	r3, r3, #24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d112      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003960:	4b84      	ldr	r3, [pc, #528]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800396c:	4b81      	ldr	r3, [pc, #516]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	4a81      	ldr	r2, [pc, #516]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x240>)
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	e0f1      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003980:	4b7e      	ldr	r3, [pc, #504]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x240>)
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	e0ee      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003986:	4b7b      	ldr	r3, [pc, #492]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0318 	and.w	r3, r3, #24
 800398e:	2b10      	cmp	r3, #16
 8003990:	d102      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003992:	4b7b      	ldr	r3, [pc, #492]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x244>)
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e0e5      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003998:	4b76      	ldr	r3, [pc, #472]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0318 	and.w	r3, r3, #24
 80039a0:	2b18      	cmp	r3, #24
 80039a2:	f040 80dd 	bne.w	8003b60 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039a6:	4b73      	ldr	r3, [pc, #460]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80039b0:	4b70      	ldr	r3, [pc, #448]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80039c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 80039ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80039cc:	08db      	lsrs	r3, r3, #3
 80039ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80b7 	beq.w	8003b5a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0xbe>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d056      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x16a>
 80039f8:	e077      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80039fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d02d      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a06:	4b5b      	ldr	r3, [pc, #364]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	4a5a      	ldr	r2, [pc, #360]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x240>)
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a30:	4b50      	ldr	r3, [pc, #320]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a38:	ee07 3a90 	vmov	s15, r3
 8003a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a40:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a44:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x248>
 8003a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003a60:	e065      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003b88 <HAL_RCC_GetSysClockFreq+0x24c>
 8003a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a74:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a88:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x248>
 8003a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003aa4:	e043      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003b8c <HAL_RCC_GetSysClockFreq+0x250>
 8003ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003acc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x248>
 8003ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ad8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003ae8:	e021      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b90 <HAL_RCC_GetSysClockFreq+0x254>
 8003af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b10:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x248>
 8003b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b28:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003b2c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003b2e:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b32:	0a5b      	lsrs	r3, r3, #9
 8003b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b38:	3301      	adds	r3, #1
 8003b3a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b46:	edd7 6a06 	vldr	s13, [r7, #24]
 8003b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b52:	ee17 3a90 	vmov	r3, s15
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	e004      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e001      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003b60:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x240>)
 8003b62:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003b64:	69fb      	ldr	r3, [r7, #28]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	44020c00 	.word	0x44020c00
 8003b78:	003d0900 	.word	0x003d0900
 8003b7c:	03d09000 	.word	0x03d09000
 8003b80:	007a1200 	.word	0x007a1200
 8003b84:	46000000 	.word	0x46000000
 8003b88:	4c742400 	.word	0x4c742400
 8003b8c:	4af42400 	.word	0x4af42400
 8003b90:	4a742400 	.word	0x4a742400

08003b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003b98:	f7ff fed0 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b08      	ldr	r3, [pc, #32]	@ (8003bc0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003ba2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003ba6:	4907      	ldr	r1, [pc, #28]	@ (8003bc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003baa:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a05      	ldr	r2, [pc, #20]	@ (8003bc8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003bb4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003bb6:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	44020c00 	.word	0x44020c00
 8003bc4:	0800d3c4 	.word	0x0800d3c4
 8003bc8:	20000004 	.word	0x20000004

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003bd0:	f7ff ffe0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4904      	ldr	r1, [pc, #16]	@ (8003bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	44020c00 	.word	0x44020c00
 8003bf4:	0800d3d4 	.word	0x0800d3d4

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003bfc:	f7ff ffca 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	@ (8003c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	44020c00 	.word	0x44020c00
 8003c20:	0800d3d4 	.word	0x0800d3d4

08003c24 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003c28:	f7ff ffb4 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	0b1b      	lsrs	r3, r3, #12
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4904      	ldr	r1, [pc, #16]	@ (8003c4c <HAL_RCC_GetPCLK3Freq+0x28>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	44020c00 	.word	0x44020c00
 8003c4c:	0800d3d4 	.word	0x0800d3d4

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c54:	b0d6      	sub	sp, #344	@ 0x158
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c68:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003c74:	2500      	movs	r5, #0
 8003c76:	ea54 0305 	orrs.w	r3, r4, r5
 8003c7a:	d00b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003c7c:	4bcd      	ldr	r3, [pc, #820]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c82:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003c86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	4ac9      	ldr	r2, [pc, #804]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c94:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f002 0801 	and.w	r8, r2, #1
 8003ca0:	f04f 0900 	mov.w	r9, #0
 8003ca4:	ea58 0309 	orrs.w	r3, r8, r9
 8003ca8:	d042      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003caa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d823      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003d05 	.word	0x08003d05
 8003cc0:	08003cd5 	.word	0x08003cd5
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003d05 	.word	0x08003d05
 8003ccc:	08003d05 	.word	0x08003d05
 8003cd0:	08003d05 	.word	0x08003d05
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003cd8:	3308      	adds	r3, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f004 fe68 	bl	80089b0 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8003ce6:	e00e      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ce8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003cec:	3330      	adds	r3, #48	@ 0x30
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 fef6 	bl	8008ae0 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d06:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003d0e:	4ba9      	ldr	r3, [pc, #676]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d14:	f023 0107 	bic.w	r1, r3, #7
 8003d18:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	4aa5      	ldr	r2, [pc, #660]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003d2c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d30:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 0a02 	and.w	sl, r2, #2
 8003d3c:	f04f 0b00 	mov.w	fp, #0
 8003d40:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d44:	f000 8088 	beq.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003d48:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4e:	2b28      	cmp	r3, #40	@ 0x28
 8003d50:	d868      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003d52:	a201      	add	r2, pc, #4	@ (adr r2, 8003d58 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003e2d 	.word	0x08003e2d
 8003d5c:	08003e25 	.word	0x08003e25
 8003d60:	08003e25 	.word	0x08003e25
 8003d64:	08003e25 	.word	0x08003e25
 8003d68:	08003e25 	.word	0x08003e25
 8003d6c:	08003e25 	.word	0x08003e25
 8003d70:	08003e25 	.word	0x08003e25
 8003d74:	08003e25 	.word	0x08003e25
 8003d78:	08003dfd 	.word	0x08003dfd
 8003d7c:	08003e25 	.word	0x08003e25
 8003d80:	08003e25 	.word	0x08003e25
 8003d84:	08003e25 	.word	0x08003e25
 8003d88:	08003e25 	.word	0x08003e25
 8003d8c:	08003e25 	.word	0x08003e25
 8003d90:	08003e25 	.word	0x08003e25
 8003d94:	08003e25 	.word	0x08003e25
 8003d98:	08003e11 	.word	0x08003e11
 8003d9c:	08003e25 	.word	0x08003e25
 8003da0:	08003e25 	.word	0x08003e25
 8003da4:	08003e25 	.word	0x08003e25
 8003da8:	08003e25 	.word	0x08003e25
 8003dac:	08003e25 	.word	0x08003e25
 8003db0:	08003e25 	.word	0x08003e25
 8003db4:	08003e25 	.word	0x08003e25
 8003db8:	08003e2d 	.word	0x08003e2d
 8003dbc:	08003e25 	.word	0x08003e25
 8003dc0:	08003e25 	.word	0x08003e25
 8003dc4:	08003e25 	.word	0x08003e25
 8003dc8:	08003e25 	.word	0x08003e25
 8003dcc:	08003e25 	.word	0x08003e25
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003e25 	.word	0x08003e25
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003e25 	.word	0x08003e25
 8003de0:	08003e25 	.word	0x08003e25
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e25 	.word	0x08003e25
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e25 	.word	0x08003e25
 8003df8:	08003e2d 	.word	0x08003e2d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dfc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e00:	3308      	adds	r3, #8
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 fdd4 	bl	80089b0 <RCCEx_PLL2_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8003e0e:	e00e      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e10:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e14:	3330      	adds	r3, #48	@ 0x30
 8003e16:	4618      	mov	r0, r3
 8003e18:	f004 fe62 	bl	8008ae0 <RCCEx_PLL3_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8003e22:	e004      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003e36:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e3c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e46:	4a5b      	ldr	r2, [pc, #364]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003e54:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f002 0304 	and.w	r3, r2, #4
 8003e64:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003e6e:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003e72:	460b      	mov	r3, r1
 8003e74:	4313      	orrs	r3, r2
 8003e76:	d04e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003e78:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e7e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003e82:	d02c      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003e84:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003e88:	d825      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8e:	d028      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e94:	d81f      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e98:	d025      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e9c:	d81b      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e9e:	2b80      	cmp	r3, #128	@ 0x80
 8003ea0:	d00f      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003ea2:	2b80      	cmp	r3, #128	@ 0x80
 8003ea4:	d817      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01f      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003eaa:	2b40      	cmp	r3, #64	@ 0x40
 8003eac:	d113      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003eae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 fd7b 	bl	80089b0 <RCCEx_PLL2_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8003ec0:	e014      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ec2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ec6:	3330      	adds	r3, #48	@ 0x30
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 fe09 	bl	8008ae0 <RCCEx_PLL3_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8003ed4:	e00a      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e004      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eec:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003efa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003efe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f04:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003f12:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f16:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f002 0308 	and.w	r3, r2, #8
 8003f22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003f2c:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d056      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003f36:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f3c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003f40:	d031      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003f42:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003f46:	d82a      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f4c:	d02d      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f52:	d824      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f58:	d029      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003f5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f5e:	d81e      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f64:	d011      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6a:	d818      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f74:	d113      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 fd17 	bl	80089b0 <RCCEx_PLL2_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003f88:	e017      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f8a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f8e:	3330      	adds	r3, #48	@ 0x30
 8003f90:	4618      	mov	r0, r3
 8003f92:	f004 fda5 	bl	8008ae0 <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003f9c:	e00d      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003fa4:	e009      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e007      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003faa:	bf00      	nop
 8003fac:	e005      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003fb2:	bf00      	nop
 8003fb4:	44020c00 	.word	0x44020c00
        break;
 8003fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fba:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003fc2:	4bbb      	ldr	r3, [pc, #748]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fc8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003fcc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003fd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fd2:	4ab7      	ldr	r2, [pc, #732]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003fe0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fe4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f002 0310 	and.w	r3, r2, #16
 8003ff0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003ffa:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	d053      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004004:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800400a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800400e:	d031      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004010:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004014:	d82a      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401a:	d02d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800401c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004020:	d824      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004022:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004026:	d029      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004028:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800402c:	d81e      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004032:	d011      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004038:	d818      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d020      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004042:	d113      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004044:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004048:	3308      	adds	r3, #8
 800404a:	4618      	mov	r0, r3
 800404c:	f004 fcb0 	bl	80089b0 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8004056:	e014      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004058:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800405c:	3330      	adds	r3, #48	@ 0x30
 800405e:	4618      	mov	r0, r3
 8004060:	f004 fd3e 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800408a:	4b89      	ldr	r3, [pc, #548]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800408c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004090:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004094:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409a:	4a85      	ldr	r2, [pc, #532]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800409c:	430b      	orrs	r3, r1
 800409e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80040a2:	e003      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80040a8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f002 0320 	and.w	r3, r2, #32
 80040b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80040c2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80040c6:	460b      	mov	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	d053      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80040cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80040d6:	d031      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80040d8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80040dc:	d82a      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80040de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040e2:	d02d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040e8:	d824      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80040ea:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80040ee:	d029      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80040f0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80040f4:	d81e      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80040f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040fa:	d011      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004100:	d818      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d020      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410a:	d113      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800410c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004110:	3308      	adds	r3, #8
 8004112:	4618      	mov	r0, r3
 8004114:	f004 fc4c 	bl	80089b0 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 800411e:	e014      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004120:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004124:	3330      	adds	r3, #48	@ 0x30
 8004126:	4618      	mov	r0, r3
 8004128:	f004 fcda 	bl	8008ae0 <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8004132:	e00a      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800413a:	e006      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800413c:	bf00      	nop
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004140:	bf00      	nop
 8004142:	e002      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004152:	4b57      	ldr	r3, [pc, #348]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004158:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800415c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	4a53      	ldr	r2, [pc, #332]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004164:	430b      	orrs	r3, r1
 8004166:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004170:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004174:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004180:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800418a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800418e:	460b      	mov	r3, r1
 8004190:	4313      	orrs	r3, r2
 8004192:	d053      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004194:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800419e:	d031      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80041a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80041a4:	d82a      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041aa:	d02d      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80041ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b0:	d824      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041b6:	d029      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041bc:	d81e      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041c2:	d011      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80041c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041c8:	d818      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d020      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80041ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041d2:	d113      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80041d8:	3308      	adds	r3, #8
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 fbe8 	bl	80089b0 <RCCEx_PLL2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 80041e6:	e014      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80041ec:	3330      	adds	r3, #48	@ 0x30
 80041ee:	4618      	mov	r0, r3
 80041f0:	f004 fc76 	bl	8008ae0 <RCCEx_PLL3_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 80041fa:	e00a      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004202:	e006      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004204:	bf00      	nop
 8004206:	e004      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004208:	bf00      	nop
 800420a:	e002      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004212:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800421a:	4b25      	ldr	r3, [pc, #148]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800421c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004220:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8004224:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	4a21      	ldr	r2, [pc, #132]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800422c:	430b      	orrs	r3, r1
 800422e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004232:	e003      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004238:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800423c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004248:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004252:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d055      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800425c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004262:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004266:	d033      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004268:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800426c:	d82c      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800426e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004272:	d02f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004278:	d826      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800427a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800427e:	d02b      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004280:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004284:	d820      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800428a:	d013      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800428c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004290:	d81a      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d022      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800429a:	d115      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800429c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042a0:	3308      	adds	r3, #8
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 fb84 	bl	80089b0 <RCCEx_PLL2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80042ae:	e016      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80042b0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042b8:	3330      	adds	r3, #48	@ 0x30
 80042ba:	4618      	mov	r0, r3
 80042bc:	f004 fc10 	bl	8008ae0 <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80042c6:	e00a      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80042ce:	e006      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042d0:	bf00      	nop
 80042d2:	e004      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042d4:	bf00      	nop
 80042d6:	e002      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042d8:	bf00      	nop
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042de:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80042e6:	4bbb      	ldr	r3, [pc, #748]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80042e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042ec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80042f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042f6:	4ab7      	ldr	r2, [pc, #732]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80042fe:	e003      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004304:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004308:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004314:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800431e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d053      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004328:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800432c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800432e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004332:	d031      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004334:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004338:	d82a      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800433a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800433e:	d02d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004344:	d824      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004346:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800434a:	d029      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800434c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004350:	d81e      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004356:	d011      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800435c:	d818      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004366:	d113      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004368:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800436c:	3308      	adds	r3, #8
 800436e:	4618      	mov	r0, r3
 8004370:	f004 fb1e 	bl	80089b0 <RCCEx_PLL2_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 800437a:	e014      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800437c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004380:	3330      	adds	r3, #48	@ 0x30
 8004382:	4618      	mov	r0, r3
 8004384:	f004 fbac 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 800438e:	e00a      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004396:	e006      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004398:	bf00      	nop
 800439a:	e004      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80043a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80043ae:	4b89      	ldr	r3, [pc, #548]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80043b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80043b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043be:	4a85      	ldr	r2, [pc, #532]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80043cc:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80043d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80043dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80043e6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80043ea:	460b      	mov	r3, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	d055      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80043f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80043fc:	d031      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80043fe:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004402:	d82a      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004408:	d02d      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800440a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800440e:	d824      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004410:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004414:	d029      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004416:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800441a:	d81e      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800441c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004420:	d011      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004426:	d818      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800442c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004430:	d113      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004432:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004436:	3308      	adds	r3, #8
 8004438:	4618      	mov	r0, r3
 800443a:	f004 fab9 	bl	80089b0 <RCCEx_PLL2_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8004444:	e014      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004446:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800444a:	3330      	adds	r3, #48	@ 0x30
 800444c:	4618      	mov	r0, r3
 800444e:	f004 fb47 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8004458:	e00a      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004460:	e006      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004462:	bf00      	nop
 8004464:	e004      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004466:	bf00      	nop
 8004468:	e002      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800446a:	bf00      	nop
 800446c:	e000      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800446e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004470:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004478:	4b56      	ldr	r3, [pc, #344]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800447a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800447e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8004482:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800448a:	4a52      	ldr	r2, [pc, #328]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800448c:	430b      	orrs	r3, r1
 800448e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004492:	e003      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004498:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800449c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80044a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80044b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80044b6:	460b      	mov	r3, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	d044      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80044bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80044c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d823      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80044c8:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	08004519 	.word	0x08004519
 80044d4:	080044e9 	.word	0x080044e9
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	08004519 	.word	0x08004519
 80044e0:	08004519 	.word	0x08004519
 80044e4:	08004519 	.word	0x08004519
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80044ec:	3308      	adds	r3, #8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 fa5e 	bl	80089b0 <RCCEx_PLL2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 80044fa:	e00e      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004500:	3330      	adds	r3, #48	@ 0x30
 8004502:	4618      	mov	r0, r3
 8004504:	f004 faec 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 800450e:	e004      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004516:	e000      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004522:	4b2c      	ldr	r3, [pc, #176]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004524:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004528:	f023 0107 	bic.w	r1, r3, #7
 800452c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004534:	4a27      	ldr	r2, [pc, #156]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004536:	430b      	orrs	r3, r1
 8004538:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800453c:	e003      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004542:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004546:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004552:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800455c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d04f      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004566:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	2b50      	cmp	r3, #80	@ 0x50
 8004570:	d029      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004572:	2b50      	cmp	r3, #80	@ 0x50
 8004574:	d823      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004576:	2b40      	cmp	r3, #64	@ 0x40
 8004578:	d027      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800457a:	2b40      	cmp	r3, #64	@ 0x40
 800457c:	d81f      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800457e:	2b30      	cmp	r3, #48	@ 0x30
 8004580:	d025      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004582:	2b30      	cmp	r3, #48	@ 0x30
 8004584:	d81b      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004586:	2b20      	cmp	r3, #32
 8004588:	d00f      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800458a:	2b20      	cmp	r3, #32
 800458c:	d817      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d022      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004592:	2b10      	cmp	r3, #16
 8004594:	d113      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004596:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800459a:	3308      	adds	r3, #8
 800459c:	4618      	mov	r0, r3
 800459e:	f004 fa07 	bl	80089b0 <RCCEx_PLL2_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 80045a8:	e017      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045ae:	3330      	adds	r3, #48	@ 0x30
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 fa95 	bl	8008ae0 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 80045bc:	e00d      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80045c4:	e009      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80045c6:	bf00      	nop
 80045c8:	e007      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80045ca:	bf00      	nop
 80045cc:	e005      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80045ce:	bf00      	nop
 80045d0:	e003      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80045d2:	bf00      	nop
 80045d4:	44020c00 	.word	0x44020c00
        break;
 80045d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80045e2:	4baf      	ldr	r3, [pc, #700]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80045e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80045e8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80045ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	4aaa      	ldr	r2, [pc, #680]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80045f6:	430b      	orrs	r3, r1
 80045f8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80045fc:	e003      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fe:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004602:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004606:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800461c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d055      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004626:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800462a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800462e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004632:	d031      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004634:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004638:	d82a      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800463a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800463e:	d02d      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004644:	d824      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004646:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800464a:	d029      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800464c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004650:	d81e      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004656:	d011      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004658:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800465c:	d818      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d020      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004666:	d113      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004668:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800466c:	3308      	adds	r3, #8
 800466e:	4618      	mov	r0, r3
 8004670:	f004 f99e 	bl	80089b0 <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800467a:	e014      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800467c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004680:	3330      	adds	r3, #48	@ 0x30
 8004682:	4618      	mov	r0, r3
 8004684:	f004 fa2c 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800468e:	e00a      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004696:	e006      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004698:	bf00      	nop
 800469a:	e004      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80046a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80046ae:	4b7c      	ldr	r3, [pc, #496]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80046b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80046b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046c0:	4a77      	ldr	r2, [pc, #476]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80046c2:	430b      	orrs	r3, r1
 80046c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046c8:	e003      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ca:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80046ce:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80046de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4313      	orrs	r3, r2
 80046f0:	d03d      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80046f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046fe:	d01b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004700:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004704:	d814      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800470a:	d017      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800470c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004710:	d80e      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d014      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471a:	d109      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800471c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004720:	3330      	adds	r3, #48	@ 0x30
 8004722:	4618      	mov	r0, r3
 8004724:	f004 f9dc 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800472e:	e008      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004736:	e004      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004738:	bf00      	nop
 800473a:	e002      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800473c:	bf00      	nop
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004742:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10d      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800474a:	4b55      	ldr	r3, [pc, #340]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800474c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004750:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004754:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475c:	4a50      	ldr	r2, [pc, #320]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800475e:	430b      	orrs	r3, r1
 8004760:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004764:	e003      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800476a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800476e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800477a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004784:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004788:	460b      	mov	r3, r1
 800478a:	4313      	orrs	r3, r2
 800478c:	d03d      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800478e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004796:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800479a:	d01b      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800479c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047a0:	d814      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80047a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047a6:	d017      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80047a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047ac:	d80e      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d014      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80047b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047b6:	d109      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047bc:	3330      	adds	r3, #48	@ 0x30
 80047be:	4618      	mov	r0, r3
 80047c0:	f004 f98e 	bl	8008ae0 <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80047ca:	e008      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80047d2:	e004      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80047d4:	bf00      	nop
 80047d6:	e002      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80047d8:	bf00      	nop
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80047dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047de:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10d      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80047e6:	4b2e      	ldr	r3, [pc, #184]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80047e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047ec:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80047f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047f8:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80047fa:	430b      	orrs	r3, r1
 80047fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004800:	e003      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004806:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800480a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004816:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004820:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004824:	460b      	mov	r3, r1
 8004826:	4313      	orrs	r3, r2
 8004828:	d040      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800482a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800482e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004832:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004836:	d01b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004838:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800483c:	d814      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800483e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004842:	d017      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004844:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004848:	d80e      	bhi.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d014      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004852:	d109      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004854:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004858:	3330      	adds	r3, #48	@ 0x30
 800485a:	4618      	mov	r0, r3
 800485c:	f004 f940 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004866:	e008      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004870:	bf00      	nop
 8004872:	e002      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800487e:	2b00      	cmp	r3, #0
 8004880:	d110      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004882:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004888:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800488c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004890:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004894:	4a02      	ldr	r2, [pc, #8]	@ (80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004896:	430b      	orrs	r3, r1
 8004898:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800489c:	e006      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800489e:	bf00      	nop
 80048a0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80048a8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	2100      	movs	r1, #0
 80048b6:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80048ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80048c6:	460b      	mov	r3, r1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	d03d      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80048cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80048d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048d8:	d01b      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80048da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048de:	d814      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80048e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048e4:	d017      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80048e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048ea:	d80e      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d014      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80048f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f4:	d109      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80048fa:	3330      	adds	r3, #48	@ 0x30
 80048fc:	4618      	mov	r0, r3
 80048fe:	f004 f8ef 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004908:	e008      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004910:	e004      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004912:	bf00      	nop
 8004914:	e002      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800491a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10d      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004924:	4bbe      	ldr	r3, [pc, #760]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004926:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800492a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800492e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004932:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004936:	4aba      	ldr	r2, [pc, #744]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004938:	430b      	orrs	r3, r1
 800493a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800493e:	e003      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004944:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004948:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004954:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800495e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004962:	460b      	mov	r3, r1
 8004964:	4313      	orrs	r3, r2
 8004966:	d035      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004968:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800496c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004974:	d015      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800497a:	d80e      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d012      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004984:	d109      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004986:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800498a:	3330      	adds	r3, #48	@ 0x30
 800498c:	4618      	mov	r0, r3
 800498e:	f004 f8a7 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004998:	e006      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80049a0:	e002      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80049a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10d      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80049b0:	4b9b      	ldr	r3, [pc, #620]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049b6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80049ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80049be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049c2:	4a97      	ldr	r2, [pc, #604]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049ca:	e003      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049cc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80049d0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	2100      	movs	r1, #0
 80049de:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80049e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80049ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80049ee:	460b      	mov	r3, r1
 80049f0:	4313      	orrs	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80049f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4a89      	ldr	r2, [pc, #548]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049fe:	61d3      	str	r3, [r2, #28]
 8004a00:	4b87      	ldr	r3, [pc, #540]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a02:	69d9      	ldr	r1, [r3, #28]
 8004a04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a08:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004a0c:	4a84      	ldr	r2, [pc, #528]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a12:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a28:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d055      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004a32:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a3a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a3e:	d031      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004a40:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a44:	d82a      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4a:	d02d      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a50:	d824      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a56:	d029      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004a58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a5c:	d81e      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a62:	d011      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a68:	d818      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a72:	d113      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a78:	3308      	adds	r3, #8
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f003 ff98 	bl	80089b0 <RCCEx_PLL2_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004a86:	e014      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a8c:	3330      	adds	r3, #48	@ 0x30
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 f826 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004aa2:	e006      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004aa4:	bf00      	nop
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004aa8:	bf00      	nop
 8004aaa:	e002      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004aba:	4b59      	ldr	r3, [pc, #356]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004abc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ac0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004ac4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004acc:	4a54      	ldr	r2, [pc, #336]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004ada:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ade:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d055      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004afe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b0a:	d031      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004b0c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b10:	d82a      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b16:	d02d      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004b18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b1c:	d824      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b22:	d029      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004b24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b28:	d81e      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2e:	d011      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b34:	d818      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3e:	d113      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b44:	3308      	adds	r3, #8
 8004b46:	4618      	mov	r0, r3
 8004b48:	f003 ff32 	bl	80089b0 <RCCEx_PLL2_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004b52:	e014      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b58:	3330      	adds	r3, #48	@ 0x30
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f003 ffc0 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004b66:	e00a      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004b6e:	e006      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b70:	bf00      	nop
 8004b72:	e004      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10d      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004b86:	4b26      	ldr	r3, [pc, #152]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004b88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b98:	4a21      	ldr	r2, [pc, #132]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004ba0:	e003      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004ba6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004baa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bc0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d057      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004bca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bd6:	d033      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bdc:	d82c      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004bde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004be2:	d02f      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004be4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004be8:	d826      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004bea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bee:	d02b      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004bf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bf4:	d820      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bfa:	d013      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c00:	d81a      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d022      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0a:	d115      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c10:	3308      	adds	r3, #8
 8004c12:	4618      	mov	r0, r3
 8004c14:	f003 fecc 	bl	80089b0 <RCCEx_PLL2_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004c1e:	e016      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004c20:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c24:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c28:	3330      	adds	r3, #48	@ 0x30
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f003 ff58 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004c36:	e00a      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004c3e:	e006      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c40:	bf00      	nop
 8004c42:	e004      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c44:	bf00      	nop
 8004c46:	e002      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c48:	bf00      	nop
 8004c4a:	e000      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004c56:	4bbb      	ldr	r3, [pc, #748]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004c58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c60:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c68:	4ab6      	ldr	r2, [pc, #728]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004c70:	e003      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004c76:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004c7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	2100      	movs	r1, #0
 8004c84:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c90:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d055      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004c9a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ca2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004ca6:	d031      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004ca8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004cac:	d82a      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004cae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb2:	d02d      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb8:	d824      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004cba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cbe:	d029      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004cc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cc4:	d81e      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cca:	d011      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cd0:	d818      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d020      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cda:	d113      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cdc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f003 fe64 	bl	80089b0 <RCCEx_PLL2_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004cee:	e014      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cf0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004cf4:	3330      	adds	r3, #48	@ 0x30
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f003 fef2 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004d02:	e00a      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004d0a:	e006      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d0c:	bf00      	nop
 8004d0e:	e004      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004d22:	4b88      	ldr	r3, [pc, #544]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d28:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004d2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d34:	4a83      	ldr	r2, [pc, #524]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004d42:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004d46:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d5c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d055      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004d66:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d6e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d72:	d031      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004d74:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d78:	d82a      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004d7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d7e:	d02d      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004d80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d84:	d824      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004d86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d8a:	d029      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004d8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d90:	d81e      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004d92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d96:	d011      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004d98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d9c:	d818      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d020      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004da6:	d113      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004da8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dac:	3308      	adds	r3, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f003 fdfe 	bl	80089b0 <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004dba:	e014      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dbc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dc0:	3330      	adds	r3, #48	@ 0x30
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f003 fe8c 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004dce:	e00a      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004dd6:	e006      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004dd8:	bf00      	nop
 8004dda:	e004      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10d      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004dee:	4b55      	ldr	r3, [pc, #340]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004df0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004df4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004df8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e00:	4a50      	ldr	r2, [pc, #320]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004e02:	430b      	orrs	r3, r1
 8004e04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004e08:	e003      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004e0e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004e12:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d055      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004e32:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e3e:	d031      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e44:	d82a      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d02d      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e50:	d824      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e56:	d029      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004e58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e5c:	d81e      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e62:	d011      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e68:	d818      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e72:	d113      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e78:	3308      	adds	r3, #8
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f003 fd98 	bl	80089b0 <RCCEx_PLL2_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004e86:	e014      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e8c:	3330      	adds	r3, #48	@ 0x30
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f003 fe26 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004ea2:	e006      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004ea4:	bf00      	nop
 8004ea6:	e004      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004eba:	4b22      	ldr	r3, [pc, #136]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004ebc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ec0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ec4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ec8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004ed4:	e003      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004eda:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ede:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4313      	orrs	r3, r2
 8004efc:	d055      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004efe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f0a:	d035      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004f0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f10:	d82e      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004f12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f16:	d031      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004f18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f1c:	d828      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f22:	d01b      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f28:	d822      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f32:	d009      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004f34:	e01c      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f36:	4b03      	ldr	r3, [pc, #12]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	4a02      	ldr	r2, [pc, #8]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f40:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f42:	e01c      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004f44:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f48:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f003 fd2e 	bl	80089b0 <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f5a:	e010      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f60:	3330      	adds	r3, #48	@ 0x30
 8004f62:	4618      	mov	r0, r3
 8004f64:	f003 fdbc 	bl	8008ae0 <RCCEx_PLL3_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f6e:	e006      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004f76:	e002      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004f78:	bf00      	nop
 8004f7a:	e000      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10d      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f86:	4bc2      	ldr	r3, [pc, #776]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004f90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f98:	4abd      	ldr	r2, [pc, #756]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004fa0:	e003      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004fa6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004faa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fb8:	2300      	movs	r3, #0
 8004fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	d051      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004fc6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004fca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fd2:	d033      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8004fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fd8:	d82c      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004fda:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004fde:	d02d      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8004fe0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004fe4:	d826      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fea:	d019      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8004fec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ff0:	d820      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 8004ff6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ffa:	d007      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8004ffc:	e01a      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffe:	4ba4      	ldr	r3, [pc, #656]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	4aa3      	ldr	r2, [pc, #652]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005008:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800500a:	e018      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800500c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005010:	3308      	adds	r3, #8
 8005012:	4618      	mov	r0, r3
 8005014:	f003 fccc 	bl	80089b0 <RCCEx_PLL2_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 800501e:	e00e      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005020:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005024:	3330      	adds	r3, #48	@ 0x30
 8005026:	4618      	mov	r0, r3
 8005028:	f003 fd5a 	bl	8008ae0 <RCCEx_PLL3_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005032:	e004      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800503a:	e000      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 800503c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005046:	4b92      	ldr	r3, [pc, #584]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800504c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005050:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005054:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005058:	4a8d      	ldr	r2, [pc, #564]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800505a:	430b      	orrs	r3, r1
 800505c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005060:	e003      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005066:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800506a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005076:	673b      	str	r3, [r7, #112]	@ 0x70
 8005078:	2300      	movs	r3, #0
 800507a:	677b      	str	r3, [r7, #116]	@ 0x74
 800507c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005080:	460b      	mov	r3, r1
 8005082:	4313      	orrs	r3, r2
 8005084:	d032      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005086:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800508a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800508e:	2b05      	cmp	r3, #5
 8005090:	d80f      	bhi.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1462>
 8005092:	2b03      	cmp	r3, #3
 8005094:	d211      	bcs.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x146a>
 8005096:	2b01      	cmp	r3, #1
 8005098:	d911      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800509a:	2b02      	cmp	r3, #2
 800509c:	d109      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800509e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050a2:	3308      	adds	r3, #8
 80050a4:	4618      	mov	r0, r3
 80050a6:	f003 fc83 	bl	80089b0 <RCCEx_PLL2_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80050b0:	e006      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80050b8:	e002      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 80050ba:	bf00      	nop
 80050bc:	e000      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 80050be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10d      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050c8:	4b71      	ldr	r3, [pc, #452]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80050ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ce:	f023 0107 	bic.w	r1, r3, #7
 80050d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80050da:	4a6d      	ldr	r2, [pc, #436]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80050dc:	430b      	orrs	r3, r1
 80050de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050e2:	e003      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80050e8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80050ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	2100      	movs	r1, #0
 80050f6:	66b9      	str	r1, [r7, #104]	@ 0x68
 80050f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005102:	460b      	mov	r3, r1
 8005104:	4313      	orrs	r3, r2
 8005106:	d024      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005108:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800510c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 8005114:	2b08      	cmp	r3, #8
 8005116:	d005      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800511e:	e002      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8005124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005126:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10d      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800512e:	4b58      	ldr	r3, [pc, #352]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005134:	f023 0108 	bic.w	r1, r3, #8
 8005138:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800513c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005140:	4a53      	ldr	r2, [pc, #332]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005142:	430b      	orrs	r3, r1
 8005144:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005148:	e003      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800514e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005152:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800515e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005160:	2300      	movs	r3, #0
 8005162:	667b      	str	r3, [r7, #100]	@ 0x64
 8005164:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005168:	460b      	mov	r3, r1
 800516a:	4313      	orrs	r3, r2
 800516c:	f000 80b9 	beq.w	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005170:	4b48      	ldr	r3, [pc, #288]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	4a47      	ldr	r2, [pc, #284]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800517c:	f7fd f84e 	bl	800221c <HAL_GetTick>
 8005180:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005184:	e00b      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005186:	f7fd f849 	bl	800221c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d903      	bls.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800519c:	e005      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800519e:	4b3d      	ldr	r3, [pc, #244]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0ed      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 80051aa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 8093 	bne.w	80052da <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051b4:	4b36      	ldr	r3, [pc, #216]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80051b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80051c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d023      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 80051ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80051ce:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80051d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01b      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051da:	4b2d      	ldr	r3, [pc, #180]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80051dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051e4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051e8:	4b29      	ldr	r3, [pc, #164]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80051ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051ee:	4a28      	ldr	r2, [pc, #160]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051f8:	4b25      	ldr	r3, [pc, #148]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80051fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051fe:	4a24      	ldr	r2, [pc, #144]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005204:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005208:	4a21      	ldr	r2, [pc, #132]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800520a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800520e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005212:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d019      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521e:	f7fc fffd 	bl	800221c <HAL_GetTick>
 8005222:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005226:	e00d      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005228:	f7fc fff8 	bl	800221c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005238:	429a      	cmp	r2, r3
 800523a:	d903      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
            break;
 8005242:	e006      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005244:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0ea      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 8005252:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005256:	2b00      	cmp	r3, #0
 8005258:	d13a      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800525a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800525e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800526a:	d115      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1648>
 800526c:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005274:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005282:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005286:	4a02      	ldr	r2, [pc, #8]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005288:	430b      	orrs	r3, r1
 800528a:	61d3      	str	r3, [r2, #28]
 800528c:	e00a      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1654>
 800528e:	bf00      	nop
 8005290:	44020c00 	.word	0x44020c00
 8005294:	44020800 	.word	0x44020800
 8005298:	4bc6      	ldr	r3, [pc, #792]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4ac5      	ldr	r2, [pc, #788]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800529e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052a2:	61d3      	str	r3, [r2, #28]
 80052a4:	4bc3      	ldr	r3, [pc, #780]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80052a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052aa:	4ac2      	ldr	r2, [pc, #776]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80052ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052b4:	4bbf      	ldr	r3, [pc, #764]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80052b6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80052ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80052be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c6:	4abb      	ldr	r2, [pc, #748]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80052c8:	430b      	orrs	r3, r1
 80052ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052ce:	e008      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052d0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80052d4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
 80052d8:	e003      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80052de:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80052ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052f0:	2300      	movs	r3, #0
 80052f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80052f8:	460b      	mov	r3, r1
 80052fa:	4313      	orrs	r3, r2
 80052fc:	d035      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80052fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005302:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005306:	2b30      	cmp	r3, #48	@ 0x30
 8005308:	d014      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 800530a:	2b30      	cmp	r3, #48	@ 0x30
 800530c:	d80e      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 800530e:	2b20      	cmp	r3, #32
 8005310:	d012      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005312:	2b20      	cmp	r3, #32
 8005314:	d80a      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d010      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800531a:	2b10      	cmp	r3, #16
 800531c:	d106      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800531e:	4ba5      	ldr	r3, [pc, #660]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	4aa4      	ldr	r2, [pc, #656]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005328:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800532a:	e008      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005332:	e004      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8005334:	bf00      	nop
 8005336:	e002      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8005338:	bf00      	nop
 800533a:	e000      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 800533c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10d      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005346:	4b9b      	ldr	r3, [pc, #620]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800534c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005350:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005354:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005358:	4a96      	ldr	r2, [pc, #600]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800535a:	430b      	orrs	r3, r1
 800535c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005362:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005366:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800536a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005376:	653b      	str	r3, [r7, #80]	@ 0x50
 8005378:	2300      	movs	r3, #0
 800537a:	657b      	str	r3, [r7, #84]	@ 0x54
 800537c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d033      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005386:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800538a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1748>
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	d007      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1756>
 8005396:	e010      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005398:	4b86      	ldr	r3, [pc, #536]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	4a85      	ldr	r2, [pc, #532]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800539e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80053a4:	e00d      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053aa:	3308      	adds	r3, #8
 80053ac:	4618      	mov	r0, r3
 80053ae:	f003 faff 	bl	80089b0 <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80053ca:	4b7a      	ldr	r3, [pc, #488]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80053cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053d0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80053d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053d8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80053dc:	4a75      	ldr	r2, [pc, #468]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80053de:	430b      	orrs	r3, r1
 80053e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053e4:	e003      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80053ea:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80053ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80053fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fc:	2300      	movs	r3, #0
 80053fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005400:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005404:	460b      	mov	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	d048      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800540a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800540e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005412:	2b04      	cmp	r3, #4
 8005414:	d827      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8005416:	a201      	add	r2, pc, #4	@ (adr r2, 800541c <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005431 	.word	0x08005431
 8005420:	0800543f 	.word	0x0800543f
 8005424:	08005453 	.word	0x08005453
 8005428:	0800546f 	.word	0x0800546f
 800542c:	0800546f 	.word	0x0800546f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005430:	4b60      	ldr	r3, [pc, #384]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	4a5f      	ldr	r2, [pc, #380]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800543a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800543c:	e018      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800543e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005442:	3308      	adds	r3, #8
 8005444:	4618      	mov	r0, r3
 8005446:	f003 fab3 	bl	80089b0 <RCCEx_PLL2_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005450:	e00e      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005452:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005456:	3330      	adds	r3, #48	@ 0x30
 8005458:	4618      	mov	r0, r3
 800545a:	f003 fb41 	bl	8008ae0 <RCCEx_PLL3_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005464:	e004      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800546c:	e000      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 800546e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005470:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10d      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005478:	4b4e      	ldr	r3, [pc, #312]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800547a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800547e:	f023 0107 	bic.w	r1, r3, #7
 8005482:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005486:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800548a:	4a4a      	ldr	r2, [pc, #296]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800548c:	430b      	orrs	r3, r1
 800548e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005492:	e003      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005498:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800549c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80054a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054aa:	2300      	movs	r3, #0
 80054ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80054b2:	460b      	mov	r3, r1
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f000 8083 	beq.w	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80054ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80054be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d85f      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1936>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	08005551 	.word	0x08005551
 80054d0:	08005587 	.word	0x08005587
 80054d4:	08005587 	.word	0x08005587
 80054d8:	08005587 	.word	0x08005587
 80054dc:	08005587 	.word	0x08005587
 80054e0:	08005587 	.word	0x08005587
 80054e4:	08005587 	.word	0x08005587
 80054e8:	08005587 	.word	0x08005587
 80054ec:	0800555f 	.word	0x0800555f
 80054f0:	08005587 	.word	0x08005587
 80054f4:	08005587 	.word	0x08005587
 80054f8:	08005587 	.word	0x08005587
 80054fc:	08005587 	.word	0x08005587
 8005500:	08005587 	.word	0x08005587
 8005504:	08005587 	.word	0x08005587
 8005508:	08005587 	.word	0x08005587
 800550c:	08005573 	.word	0x08005573
 8005510:	08005587 	.word	0x08005587
 8005514:	08005587 	.word	0x08005587
 8005518:	08005587 	.word	0x08005587
 800551c:	08005587 	.word	0x08005587
 8005520:	08005587 	.word	0x08005587
 8005524:	08005587 	.word	0x08005587
 8005528:	08005587 	.word	0x08005587
 800552c:	0800558f 	.word	0x0800558f
 8005530:	08005587 	.word	0x08005587
 8005534:	08005587 	.word	0x08005587
 8005538:	08005587 	.word	0x08005587
 800553c:	08005587 	.word	0x08005587
 8005540:	08005587 	.word	0x08005587
 8005544:	08005587 	.word	0x08005587
 8005548:	08005587 	.word	0x08005587
 800554c:	0800558f 	.word	0x0800558f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4b18      	ldr	r3, [pc, #96]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	4a17      	ldr	r2, [pc, #92]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800555c:	e018      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800555e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005562:	3308      	adds	r3, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f003 fa23 	bl	80089b0 <RCCEx_PLL2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005570:	e00e      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005572:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005576:	3330      	adds	r3, #48	@ 0x30
 8005578:	4618      	mov	r0, r3
 800557a:	f003 fab1 	bl	8008ae0 <RCCEx_PLL3_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005584:	e004      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800558c:	e000      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 800558e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005590:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10f      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005598:	4b06      	ldr	r3, [pc, #24]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800559a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800559e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80055a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055aa:	4a02      	ldr	r2, [pc, #8]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80055ac:	430b      	orrs	r3, r1
 80055ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055b2:	e005      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1970>
 80055b4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80055bc:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80055c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ce:	2300      	movs	r3, #0
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d04e      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80055dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e8:	d02e      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ee:	d827      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80055f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80055f2:	d02b      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 80055f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80055f6:	d823      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80055f8:	2b80      	cmp	r3, #128	@ 0x80
 80055fa:	d017      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 80055fc:	2b80      	cmp	r3, #128	@ 0x80
 80055fe:	d81f      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d007      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 8005608:	e01a      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560a:	4bb0      	ldr	r3, [pc, #704]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	4aaf      	ldr	r2, [pc, #700]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005614:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005616:	e01a      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005618:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800561c:	3308      	adds	r3, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f003 f9c6 	bl	80089b0 <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800562a:	e010      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800562c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005630:	3330      	adds	r3, #48	@ 0x30
 8005632:	4618      	mov	r0, r3
 8005634:	f003 fa54 	bl	8008ae0 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800563e:	e006      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005646:	e002      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8005648:	bf00      	nop
 800564a:	e000      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 800564c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005656:	4b9d      	ldr	r3, [pc, #628]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800565c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005660:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005664:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005668:	4a98      	ldr	r2, [pc, #608]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800566a:	430b      	orrs	r3, r1
 800566c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005670:	e003      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005676:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800567a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30
 8005688:	2300      	movs	r3, #0
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
 800568c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d055      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005696:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800569a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800569e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80056a2:	d031      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 80056a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80056a8:	d82a      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ae:	d02d      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b4:	d824      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80056b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056ba:	d029      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 80056bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056c0:	d81e      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80056c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c6:	d011      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 80056c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056cc:	d818      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d020      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 80056d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d6:	d113      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056dc:	3308      	adds	r3, #8
 80056de:	4618      	mov	r0, r3
 80056e0:	f003 f966 	bl	80089b0 <RCCEx_PLL2_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80056ea:	e014      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056f0:	3330      	adds	r3, #48	@ 0x30
 80056f2:	4618      	mov	r0, r3
 80056f4:	f003 f9f4 	bl	8008ae0 <RCCEx_PLL3_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80056fe:	e00a      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005706:	e006      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8005708:	bf00      	nop
 800570a:	e004      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 800570c:	bf00      	nop
 800570e:	e002      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8005710:	bf00      	nop
 8005712:	e000      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8005714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005716:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10d      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800571e:	4b6b      	ldr	r3, [pc, #428]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005724:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005728:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800572c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005730:	4a66      	ldr	r2, [pc, #408]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005732:	430b      	orrs	r3, r1
 8005734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005738:	e003      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800573e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005742:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800574e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005750:	2300      	movs	r3, #0
 8005752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005754:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005758:	460b      	mov	r3, r1
 800575a:	4313      	orrs	r3, r2
 800575c:	d055      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800575e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005762:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005766:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800576a:	d031      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 800576c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005770:	d82a      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8005772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005776:	d02d      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 8005778:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800577c:	d824      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800577e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005782:	d029      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8005784:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005788:	d81e      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578e:	d011      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005794:	d818      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d020      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 800579a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800579e:	d113      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80057a4:	3308      	adds	r3, #8
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 f902 	bl	80089b0 <RCCEx_PLL2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80057b2:	e014      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80057b8:	3330      	adds	r3, #48	@ 0x30
 80057ba:	4618      	mov	r0, r3
 80057bc:	f003 f990 	bl	8008ae0 <RCCEx_PLL3_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80057c6:	e00a      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80057ce:	e006      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80057d0:	bf00      	nop
 80057d2:	e004      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80057dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057de:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10d      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80057e6:	4b39      	ldr	r3, [pc, #228]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80057e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80057f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80057f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80057f8:	4934      	ldr	r1, [pc, #208]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005800:	e003      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005802:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005806:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800580a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	2100      	movs	r1, #0
 8005814:	6239      	str	r1, [r7, #32]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
 800581c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005820:	460b      	mov	r3, r1
 8005822:	4313      	orrs	r3, r2
 8005824:	d058      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005826:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800582a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800582e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005832:	d031      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005834:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005838:	d82a      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800583a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800583e:	d02d      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 8005840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005844:	d824      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8005846:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800584a:	d029      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 800584c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005850:	d81e      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8005852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005856:	d011      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800585c:	d818      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 8005862:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005866:	d113      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005868:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800586c:	3308      	adds	r3, #8
 800586e:	4618      	mov	r0, r3
 8005870:	f003 f89e 	bl	80089b0 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800587a:	e014      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800587c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005880:	3330      	adds	r3, #48	@ 0x30
 8005882:	4618      	mov	r0, r3
 8005884:	f003 f92c 	bl	8008ae0 <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800588e:	e00a      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005896:	e006      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8005898:	bf00      	nop
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800589c:	bf00      	nop
 800589e:	e002      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 80058a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d110      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80058ae:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80058b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058b4:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80058b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80058bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058c0:	4902      	ldr	r1, [pc, #8]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80058c8:	e006      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 80058ca:	bf00      	nop
 80058cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80058d4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	2100      	movs	r1, #0
 80058e2:	61b9      	str	r1, [r7, #24]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058ee:	460b      	mov	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	d03d      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80058f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80058f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d81c      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 8005900:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005943 	.word	0x08005943
 800590c:	08005919 	.word	0x08005919
 8005910:	08005927 	.word	0x08005927
 8005914:	08005943 	.word	0x08005943
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	4a6e      	ldr	r2, [pc, #440]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005922:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005924:	e00e      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005926:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800592a:	3308      	adds	r3, #8
 800592c:	4618      	mov	r0, r3
 800592e:	f003 f83f 	bl	80089b0 <RCCEx_PLL2_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 8005942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005944:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800594c:	4b62      	ldr	r3, [pc, #392]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800594e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800595a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800595e:	495e      	ldr	r1, [pc, #376]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800596c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005970:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	2100      	movs	r1, #0
 800597a:	6139      	str	r1, [r7, #16]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d03a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800598c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005990:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005998:	d00e      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 800599a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800599e:	d815      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d017      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a8:	d110      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059aa:	4b4b      	ldr	r3, [pc, #300]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80059ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ae:	4a4a      	ldr	r2, [pc, #296]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80059b6:	e00e      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80059bc:	3308      	adds	r3, #8
 80059be:	4618      	mov	r0, r3
 80059c0:	f002 fff6 	bl	80089b0 <RCCEx_PLL2_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80059ca:	e004      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 80059d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80059de:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80059e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80059ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059f0:	4939      	ldr	r1, [pc, #228]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80059fe:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a02:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	f003 0310 	and.w	r3, r3, #16
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d038      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005a1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a22:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005a26:	2b30      	cmp	r3, #48	@ 0x30
 8005a28:	d01b      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 8005a2a:	2b30      	cmp	r3, #48	@ 0x30
 8005a2c:	d815      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d002      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d007      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 8005a36:	e010      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a38:	4b27      	ldr	r3, [pc, #156]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	4a26      	ldr	r2, [pc, #152]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a44:	e00e      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a46:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a4a:	3330      	adds	r3, #48	@ 0x30
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f003 f847 	bl	8008ae0 <RCCEx_PLL3_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005a58:	e004      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005a60:	e000      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 8005a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a64:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10d      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005a6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a72:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a7a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005a7e:	4916      	ldr	r1, [pc, #88]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005a86:	e003      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005a8c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	6039      	str	r1, [r7, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	607b      	str	r3, [r7, #4]
 8005aa2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005aac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ab2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ab6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005aba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005abe:	4906      	ldr	r1, [pc, #24]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005ac6:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad6:	bf00      	nop
 8005ad8:	44020c00 	.word	0x44020c00

08005adc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08b      	sub	sp, #44	@ 0x2c
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005ae4:	4bae      	ldr	r3, [pc, #696]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aec:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005aee:	4bac      	ldr	r3, [pc, #688]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005af8:	4ba9      	ldr	r3, [pc, #676]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b02:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b04:	4ba6      	ldr	r3, [pc, #664]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b10:	4ba3      	ldr	r3, [pc, #652]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b28:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8126 	beq.w	8005d80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d053      	beq.n	8005be2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d86f      	bhi.n	8005c20 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d003      	beq.n	8005b4e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d02b      	beq.n	8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005b4c:	e068      	b.n	8005c20 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b4e:	4b94      	ldr	r3, [pc, #592]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	08db      	lsrs	r3, r3, #3
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	4a92      	ldr	r2, [pc, #584]	@ (8005da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b82:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b86:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005ba2:	e068      	b.n	8005c76 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005dac <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bc4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bdc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005be0:	e049      	b.n	8005c76 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005db0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8005bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c02:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005c1e:	e02a      	b.n	8005c76 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c20:	4b5f      	ldr	r3, [pc, #380]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8005da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c54:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c58:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005c74:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c76:	4b4a      	ldr	r3, [pc, #296]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c82:	d121      	bne.n	8005cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005c84:	4b46      	ldr	r3, [pc, #280]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d017      	beq.n	8005cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c90:	4b43      	ldr	r3, [pc, #268]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c94:	0a5b      	lsrs	r3, r3, #9
 8005c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005caa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e006      	b.n	8005cce <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e002      	b.n	8005cce <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cce:	4b34      	ldr	r3, [pc, #208]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cda:	d121      	bne.n	8005d20 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005cdc:	4b30      	ldr	r3, [pc, #192]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d017      	beq.n	8005d18 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005d02:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d0e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	e006      	b.n	8005d26 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	e002      	b.n	8005d26 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d26:	4b1e      	ldr	r3, [pc, #120]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d32:	d121      	bne.n	8005d78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005d34:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d40:	4b17      	ldr	r3, [pc, #92]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d44:	0e1b      	lsrs	r3, r3, #24
 8005d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d56:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005d5a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d66:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d6e:	e010      	b.n	8005d92 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
}
 8005d76:	e00c      	b.n	8005d92 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	609a      	str	r2, [r3, #8]
}
 8005d7e:	e008      	b.n	8005d92 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	609a      	str	r2, [r3, #8]
}
 8005d92:	bf00      	nop
 8005d94:	372c      	adds	r7, #44	@ 0x2c
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	44020c00 	.word	0x44020c00
 8005da4:	03d09000 	.word	0x03d09000
 8005da8:	46000000 	.word	0x46000000
 8005dac:	4a742400 	.word	0x4a742400
 8005db0:	4af42400 	.word	0x4af42400

08005db4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b08b      	sub	sp, #44	@ 0x2c
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005dbc:	4bae      	ldr	r3, [pc, #696]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005dc6:	4bac      	ldr	r3, [pc, #688]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005dd0:	4ba9      	ldr	r3, [pc, #676]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dda:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005ddc:	4ba6      	ldr	r3, [pc, #664]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de0:	091b      	lsrs	r3, r3, #4
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005de8:	4ba3      	ldr	r3, [pc, #652]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	fb02 f303 	mul.w	r3, r2, r3
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e00:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8126 	beq.w	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d053      	beq.n	8005eba <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d86f      	bhi.n	8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d02b      	beq.n	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005e24:	e068      	b.n	8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e26:	4b94      	ldr	r3, [pc, #592]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	08db      	lsrs	r3, r3, #3
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	4a92      	ldr	r2, [pc, #584]	@ (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e5e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005e7a:	e068      	b.n	8005f4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e98:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e9c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005eb8:	e049      	b.n	8005f4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005eda:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005ef6:	e02a      	b.n	8005f4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	08db      	lsrs	r3, r3, #3
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	4a5e      	ldr	r2, [pc, #376]	@ (800607c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	ee07 3a90 	vmov	s15, r3
 8005f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f30:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005f4c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f5a:	d121      	bne.n	8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005f5c:	4b46      	ldr	r3, [pc, #280]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d017      	beq.n	8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f68:	4b43      	ldr	r3, [pc, #268]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6c:	0a5b      	lsrs	r3, r3, #9
 8005f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005f7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005f82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f8e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e006      	b.n	8005fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fa6:	4b34      	ldr	r3, [pc, #208]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fb2:	d121      	bne.n	8005ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005fb4:	4b30      	ldr	r3, [pc, #192]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	0c1b      	lsrs	r3, r3, #16
 8005fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005fda:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	e006      	b.n	8005ffe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	e002      	b.n	8005ffe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800600a:	d121      	bne.n	8006050 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800600c:	4b1a      	ldr	r3, [pc, #104]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006018:	4b17      	ldr	r3, [pc, #92]	@ (8006078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800601a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601c:	0e1b      	lsrs	r3, r3, #24
 800601e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800602a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800602e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006032:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800603a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006046:	e010      	b.n	800606a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
}
 800604e:	e00c      	b.n	800606a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	609a      	str	r2, [r3, #8]
}
 8006056:	e008      	b.n	800606a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	609a      	str	r2, [r3, #8]
}
 800606a:	bf00      	nop
 800606c:	372c      	adds	r7, #44	@ 0x2c
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	44020c00 	.word	0x44020c00
 800607c:	03d09000 	.word	0x03d09000
 8006080:	46000000 	.word	0x46000000
 8006084:	4a742400 	.word	0x4a742400
 8006088:	4af42400 	.word	0x4af42400

0800608c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800608c:	b480      	push	{r7}
 800608e:	b08b      	sub	sp, #44	@ 0x2c
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006094:	4bae      	ldr	r3, [pc, #696]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800609e:	4bac      	ldr	r3, [pc, #688]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80060a8:	4ba9      	ldr	r3, [pc, #676]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060b2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80060b4:	4ba6      	ldr	r3, [pc, #664]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80060b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80060c0:	4ba3      	ldr	r3, [pc, #652]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80060c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c4:	08db      	lsrs	r3, r3, #3
 80060c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	fb02 f303 	mul.w	r3, r2, r3
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8126 	beq.w	8006330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d053      	beq.n	8006192 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d86f      	bhi.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d003      	beq.n	80060fe <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d02b      	beq.n	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80060fc:	e068      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060fe:	4b94      	ldr	r3, [pc, #592]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	08db      	lsrs	r3, r3, #3
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	4a92      	ldr	r2, [pc, #584]	@ (8006354 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006132:	ed97 6a04 	vldr	s12, [r7, #16]
 8006136:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800613a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006152:	e068      	b.n	8006226 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800635c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006170:	ed97 6a04 	vldr	s12, [r7, #16]
 8006174:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006190:	e049      	b.n	8006226 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006360 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80061a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80061b2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80061b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80061ce:	e02a      	b.n	8006226 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	4a5e      	ldr	r2, [pc, #376]	@ (8006354 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006204:	ed97 6a04 	vldr	s12, [r7, #16]
 8006208:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800620c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006214:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006220:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006224:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006226:	4b4a      	ldr	r3, [pc, #296]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800622e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006232:	d121      	bne.n	8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006234:	4b46      	ldr	r3, [pc, #280]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006240:	4b43      	ldr	r3, [pc, #268]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006244:	0a5b      	lsrs	r3, r3, #9
 8006246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006252:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006256:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800625a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800625e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006266:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e006      	b.n	800627e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e002      	b.n	800627e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800627e:	4b34      	ldr	r3, [pc, #208]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628a:	d121      	bne.n	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800628c:	4b30      	ldr	r3, [pc, #192]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d017      	beq.n	80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006298:	4b2d      	ldr	r3, [pc, #180]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800629a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629c:	0c1b      	lsrs	r3, r3, #16
 800629e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80062aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80062b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80062b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062be:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	e002      	b.n	80062d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062e2:	d121      	bne.n	8006328 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80062e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d017      	beq.n	8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062f0:	4b17      	ldr	r3, [pc, #92]	@ (8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80062f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006306:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800630a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800630e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006316:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800631e:	e010      	b.n	8006342 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]
}
 8006326:	e00c      	b.n	8006342 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	609a      	str	r2, [r3, #8]
}
 800632e:	e008      	b.n	8006342 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
}
 8006342:	bf00      	nop
 8006344:	372c      	adds	r7, #44	@ 0x2c
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	44020c00 	.word	0x44020c00
 8006354:	03d09000 	.word	0x03d09000
 8006358:	46000000 	.word	0x46000000
 800635c:	4a742400 	.word	0x4a742400
 8006360:	4af42400 	.word	0x4af42400

08006364 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006364:	b590      	push	{r4, r7, lr}
 8006366:	b08f      	sub	sp, #60	@ 0x3c
 8006368:	af00      	add	r7, sp, #0
 800636a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800636e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006372:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006376:	4321      	orrs	r1, r4
 8006378:	d150      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800637a:	4b26      	ldr	r3, [pc, #152]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800637c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006384:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006386:	4b23      	ldr	r3, [pc, #140]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b02      	cmp	r3, #2
 8006392:	d108      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800639a:	d104      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800639c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a2:	f002 baf6 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80063a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b4:	d108      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063bc:	d104      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80063be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c4:	f002 bae5 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80063c8:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063d4:	d119      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063dc:	d115      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80063de:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80063e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ea:	d30a      	bcc.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80063ec:	4b09      	ldr	r3, [pc, #36]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063f6:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80063fe:	f002 bac8 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006406:	f002 bac4 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
 800640e:	f002 bac0 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006412:	bf00      	nop
 8006414:	44020c00 	.word	0x44020c00
 8006418:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800641c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006420:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8006424:	ea50 0104 	orrs.w	r1, r0, r4
 8006428:	f001 8242 	beq.w	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 800642c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006430:	2801      	cmp	r0, #1
 8006432:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8006436:	f082 82a9 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800643a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800643e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006442:	ea50 0104 	orrs.w	r1, r0, r4
 8006446:	f001 8139 	beq.w	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800644a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800644e:	2801      	cmp	r0, #1
 8006450:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006454:	f082 829a 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8006460:	ea50 0104 	orrs.w	r1, r0, r4
 8006464:	f001 85ce 	beq.w	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 8006468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800646c:	2801      	cmp	r0, #1
 800646e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8006472:	f082 828b 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006476:	e9d7 0100 	ldrd	r0, r1, [r7]
 800647a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800647e:	ea50 0104 	orrs.w	r1, r0, r4
 8006482:	f001 8518 	beq.w	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 8006486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800648a:	2801      	cmp	r0, #1
 800648c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8006490:	f082 827c 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006498:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800649c:	ea50 0104 	orrs.w	r1, r0, r4
 80064a0:	f001 846a 	beq.w	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 80064a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064a8:	2801      	cmp	r0, #1
 80064aa:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80064ae:	f082 826d 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80064b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064b6:	f1a1 0420 	sub.w	r4, r1, #32
 80064ba:	ea50 0104 	orrs.w	r1, r0, r4
 80064be:	f001 83b4 	beq.w	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 80064c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064c6:	2801      	cmp	r0, #1
 80064c8:	f171 0120 	sbcs.w	r1, r1, #32
 80064cc:	f082 825e 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80064d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064d4:	f1a1 0410 	sub.w	r4, r1, #16
 80064d8:	ea50 0104 	orrs.w	r1, r0, r4
 80064dc:	f002 8222 	beq.w	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 80064e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064e4:	2801      	cmp	r0, #1
 80064e6:	f171 0110 	sbcs.w	r1, r1, #16
 80064ea:	f082 824f 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80064ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064f2:	f1a1 0408 	sub.w	r4, r1, #8
 80064f6:	ea50 0104 	orrs.w	r1, r0, r4
 80064fa:	f002 8198 	beq.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 80064fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006502:	2801      	cmp	r0, #1
 8006504:	f171 0108 	sbcs.w	r1, r1, #8
 8006508:	f082 8240 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800650c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006510:	1f0c      	subs	r4, r1, #4
 8006512:	ea50 0104 	orrs.w	r1, r0, r4
 8006516:	f001 8614 	beq.w	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 800651a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800651e:	2801      	cmp	r0, #1
 8006520:	f171 0104 	sbcs.w	r1, r1, #4
 8006524:	f082 8232 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800652c:	1e8c      	subs	r4, r1, #2
 800652e:	ea50 0104 	orrs.w	r1, r0, r4
 8006532:	f002 810f 	beq.w	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8006536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800653a:	2801      	cmp	r0, #1
 800653c:	f171 0102 	sbcs.w	r1, r1, #2
 8006540:	f082 8224 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006548:	1e4c      	subs	r4, r1, #1
 800654a:	ea50 0104 	orrs.w	r1, r0, r4
 800654e:	f002 809a 	beq.w	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8006552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006556:	2801      	cmp	r0, #1
 8006558:	f171 0101 	sbcs.w	r1, r1, #1
 800655c:	f082 8216 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006564:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8006568:	4321      	orrs	r1, r4
 800656a:	f002 8025 	beq.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800656e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006572:	4cd6      	ldr	r4, [pc, #856]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8006574:	42a0      	cmp	r0, r4
 8006576:	f171 0100 	sbcs.w	r1, r1, #0
 800657a:	f082 8207 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800657e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006582:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006586:	4321      	orrs	r1, r4
 8006588:	f001 87a5 	beq.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 800658c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006590:	4ccf      	ldr	r4, [pc, #828]	@ (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006592:	42a0      	cmp	r0, r4
 8006594:	f171 0100 	sbcs.w	r1, r1, #0
 8006598:	f082 81f8 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800659c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065a0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80065a4:	4321      	orrs	r1, r4
 80065a6:	f001 871d 	beq.w	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 80065aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ae:	4cc9      	ldr	r4, [pc, #804]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80065b0:	42a0      	cmp	r0, r4
 80065b2:	f171 0100 	sbcs.w	r1, r1, #0
 80065b6:	f082 81e9 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80065ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065be:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80065c2:	4321      	orrs	r1, r4
 80065c4:	f001 8666 	beq.w	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 80065c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065cc:	4cc2      	ldr	r4, [pc, #776]	@ (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80065ce:	42a0      	cmp	r0, r4
 80065d0:	f171 0100 	sbcs.w	r1, r1, #0
 80065d4:	f082 81da 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80065d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065dc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80065e0:	4321      	orrs	r1, r4
 80065e2:	f001 85de 	beq.w	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 80065e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ea:	4cbc      	ldr	r4, [pc, #752]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80065ec:	42a0      	cmp	r0, r4
 80065ee:	f171 0100 	sbcs.w	r1, r1, #0
 80065f2:	f082 81cb 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80065f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065fa:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80065fe:	4321      	orrs	r1, r4
 8006600:	f002 814a 	beq.w	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 8006604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006608:	4cb5      	ldr	r4, [pc, #724]	@ (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800660a:	42a0      	cmp	r0, r4
 800660c:	f171 0100 	sbcs.w	r1, r1, #0
 8006610:	f082 81bc 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006618:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800661c:	4321      	orrs	r1, r4
 800661e:	f000 826b 	beq.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006626:	4caf      	ldr	r4, [pc, #700]	@ (80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006628:	42a0      	cmp	r0, r4
 800662a:	f171 0100 	sbcs.w	r1, r1, #0
 800662e:	f082 81ad 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006636:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800663a:	4321      	orrs	r1, r4
 800663c:	f000 87e9 	beq.w	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8006640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006644:	4ca8      	ldr	r4, [pc, #672]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006646:	42a0      	cmp	r0, r4
 8006648:	f171 0100 	sbcs.w	r1, r1, #0
 800664c:	f082 819e 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006654:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8006658:	4321      	orrs	r1, r4
 800665a:	f000 81ce 	beq.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800665e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006662:	4ca2      	ldr	r4, [pc, #648]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006664:	42a0      	cmp	r0, r4
 8006666:	f171 0100 	sbcs.w	r1, r1, #0
 800666a:	f082 818f 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800666e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006672:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8006676:	4321      	orrs	r1, r4
 8006678:	f000 8140 	beq.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800667c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006680:	4c9b      	ldr	r4, [pc, #620]	@ (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006682:	42a0      	cmp	r0, r4
 8006684:	f171 0100 	sbcs.w	r1, r1, #0
 8006688:	f082 8180 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800668c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006690:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006694:	4321      	orrs	r1, r4
 8006696:	f001 8229 	beq.w	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 800669a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800669e:	4c95      	ldr	r4, [pc, #596]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	f171 0100 	sbcs.w	r1, r1, #0
 80066a6:	f082 8171 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80066aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066ae:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80066b2:	4321      	orrs	r1, r4
 80066b4:	f001 8173 	beq.w	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 80066b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066bc:	4c8e      	ldr	r4, [pc, #568]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066be:	42a0      	cmp	r0, r4
 80066c0:	f171 0100 	sbcs.w	r1, r1, #0
 80066c4:	f082 8162 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80066c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066cc:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80066d0:	4321      	orrs	r1, r4
 80066d2:	f001 8130 	beq.w	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80066d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066da:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80066de:	f171 0100 	sbcs.w	r1, r1, #0
 80066e2:	f082 8153 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80066e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066ea:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80066ee:	4321      	orrs	r1, r4
 80066f0:	f001 8093 	beq.w	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 80066f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066f8:	f248 0401 	movw	r4, #32769	@ 0x8001
 80066fc:	42a0      	cmp	r0, r4
 80066fe:	f171 0100 	sbcs.w	r1, r1, #0
 8006702:	f082 8143 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800670a:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800670e:	4321      	orrs	r1, r4
 8006710:	f001 8040 	beq.w	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 8006714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006718:	f244 0401 	movw	r4, #16385	@ 0x4001
 800671c:	42a0      	cmp	r0, r4
 800671e:	f171 0100 	sbcs.w	r1, r1, #0
 8006722:	f082 8133 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800672a:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800672e:	4321      	orrs	r1, r4
 8006730:	f000 87ed 	beq.w	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8006734:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006738:	f242 0401 	movw	r4, #8193	@ 0x2001
 800673c:	42a0      	cmp	r0, r4
 800673e:	f171 0100 	sbcs.w	r1, r1, #0
 8006742:	f082 8123 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800674a:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800674e:	4321      	orrs	r1, r4
 8006750:	f000 86f9 	beq.w	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006758:	f241 0401 	movw	r4, #4097	@ 0x1001
 800675c:	42a0      	cmp	r0, r4
 800675e:	f171 0100 	sbcs.w	r1, r1, #0
 8006762:	f082 8113 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006766:	e9d7 0100 	ldrd	r0, r1, [r7]
 800676a:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800676e:	4321      	orrs	r1, r4
 8006770:	f000 8683 	beq.w	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006774:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006778:	f640 0401 	movw	r4, #2049	@ 0x801
 800677c:	42a0      	cmp	r0, r4
 800677e:	f171 0100 	sbcs.w	r1, r1, #0
 8006782:	f082 8103 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800678a:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800678e:	4321      	orrs	r1, r4
 8006790:	f000 860d 	beq.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 8006794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006798:	f240 4401 	movw	r4, #1025	@ 0x401
 800679c:	42a0      	cmp	r0, r4
 800679e:	f171 0100 	sbcs.w	r1, r1, #0
 80067a2:	f082 80f3 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80067a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067aa:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80067ae:	4321      	orrs	r1, r4
 80067b0:	f000 858b 	beq.w	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 80067b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067b8:	f240 2401 	movw	r4, #513	@ 0x201
 80067bc:	42a0      	cmp	r0, r4
 80067be:	f171 0100 	sbcs.w	r1, r1, #0
 80067c2:	f082 80e3 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80067c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ca:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80067ce:	4321      	orrs	r1, r4
 80067d0:	f000 8510 	beq.w	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80067d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067d8:	f240 1401 	movw	r4, #257	@ 0x101
 80067dc:	42a0      	cmp	r0, r4
 80067de:	f171 0100 	sbcs.w	r1, r1, #0
 80067e2:	f082 80d3 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80067e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ea:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80067ee:	4321      	orrs	r1, r4
 80067f0:	f000 8495 	beq.w	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80067f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067f8:	2881      	cmp	r0, #129	@ 0x81
 80067fa:	f171 0100 	sbcs.w	r1, r1, #0
 80067fe:	f082 80c5 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006806:	2821      	cmp	r0, #33	@ 0x21
 8006808:	f171 0100 	sbcs.w	r1, r1, #0
 800680c:	d254      	bcs.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800680e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006812:	4301      	orrs	r1, r0
 8006814:	f002 80ba 	beq.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800681c:	1e42      	subs	r2, r0, #1
 800681e:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006822:	2a20      	cmp	r2, #32
 8006824:	f173 0100 	sbcs.w	r1, r3, #0
 8006828:	f082 80b0 	bcs.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800682c:	2a1f      	cmp	r2, #31
 800682e:	f202 80ad 	bhi.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006832:	a101      	add	r1, pc, #4	@ (adr r1, 8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8006834:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006838:	08006b3d 	.word	0x08006b3d
 800683c:	08006c1d 	.word	0x08006c1d
 8006840:	0800898d 	.word	0x0800898d
 8006844:	08006cdd 	.word	0x08006cdd
 8006848:	0800898d 	.word	0x0800898d
 800684c:	0800898d 	.word	0x0800898d
 8006850:	0800898d 	.word	0x0800898d
 8006854:	08006dad 	.word	0x08006dad
 8006858:	0800898d 	.word	0x0800898d
 800685c:	0800898d 	.word	0x0800898d
 8006860:	0800898d 	.word	0x0800898d
 8006864:	0800898d 	.word	0x0800898d
 8006868:	0800898d 	.word	0x0800898d
 800686c:	0800898d 	.word	0x0800898d
 8006870:	0800898d 	.word	0x0800898d
 8006874:	08006e8f 	.word	0x08006e8f
 8006878:	0800898d 	.word	0x0800898d
 800687c:	0800898d 	.word	0x0800898d
 8006880:	0800898d 	.word	0x0800898d
 8006884:	0800898d 	.word	0x0800898d
 8006888:	0800898d 	.word	0x0800898d
 800688c:	0800898d 	.word	0x0800898d
 8006890:	0800898d 	.word	0x0800898d
 8006894:	0800898d 	.word	0x0800898d
 8006898:	0800898d 	.word	0x0800898d
 800689c:	0800898d 	.word	0x0800898d
 80068a0:	0800898d 	.word	0x0800898d
 80068a4:	0800898d 	.word	0x0800898d
 80068a8:	0800898d 	.word	0x0800898d
 80068ac:	0800898d 	.word	0x0800898d
 80068b0:	0800898d 	.word	0x0800898d
 80068b4:	08006f65 	.word	0x08006f65
 80068b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068bc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80068c0:	430b      	orrs	r3, r1
 80068c2:	f000 83ba 	beq.w	800703a <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 80068c6:	f002 b861 	b.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80068ca:	bf00      	nop
 80068cc:	80000001 	.word	0x80000001
 80068d0:	40000001 	.word	0x40000001
 80068d4:	20000001 	.word	0x20000001
 80068d8:	10000001 	.word	0x10000001
 80068dc:	08000001 	.word	0x08000001
 80068e0:	04000001 	.word	0x04000001
 80068e4:	00400001 	.word	0x00400001
 80068e8:	00200001 	.word	0x00200001
 80068ec:	00100001 	.word	0x00100001
 80068f0:	00080001 	.word	0x00080001
 80068f4:	00040001 	.word	0x00040001
 80068f8:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068fc:	4b9f      	ldr	r3, [pc, #636]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80068fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006902:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006906:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800690e:	d036      	beq.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006916:	d86b      	bhi.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800691e:	d02b      	beq.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006926:	d863      	bhi.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800692e:	d01b      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006936:	d85b      	bhi.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006944:	d008      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 8006946:	e053      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006948:	f107 0320 	add.w	r3, r7, #32
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff f8c5 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006956:	e04e      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006958:	f107 0314 	add.w	r3, r7, #20
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fa29 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006966:	e046      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006968:	f107 0308 	add.w	r3, r7, #8
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fb8d 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006976:	e03e      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006978:	4b81      	ldr	r3, [pc, #516]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800697c:	e03b      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800697e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006984:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006988:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800698a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d10c      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800699c:	4b77      	ldr	r3, [pc, #476]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	08db      	lsrs	r3, r3, #3
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	4a77      	ldr	r2, [pc, #476]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80069a8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ae:	e01e      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069b0:	4b72      	ldr	r3, [pc, #456]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069bc:	d106      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80069be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c4:	d102      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80069c6:	4b70      	ldr	r3, [pc, #448]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ca:	e010      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069cc:	4b6b      	ldr	r3, [pc, #428]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069d8:	d106      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80069da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e0:	d102      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80069e2:	4b6a      	ldr	r3, [pc, #424]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80069e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e6:	e002      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80069ec:	e003      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80069ee:	e002      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069f4:	bf00      	nop
          }
        }
        break;
 80069f6:	f001 bfcc 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80069fa:	4b60      	ldr	r3, [pc, #384]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80069fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a00:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8006a04:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a0c:	d036      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a14:	d86b      	bhi.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006a1c:	d02b      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006a24:	d863      	bhi.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2c:	d01b      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a34:	d85b      	bhi.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a42:	d008      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 8006a44:	e053      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a46:	f107 0320 	add.w	r3, r7, #32
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff f846 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a54:	e04e      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a56:	f107 0314 	add.w	r3, r7, #20
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff f9aa 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a64:	e046      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a66:	f107 0308 	add.w	r3, r7, #8
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fb0e 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a74:	e03e      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006a76:	4b42      	ldr	r3, [pc, #264]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a7a:	e03b      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a82:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a88:	4b3c      	ldr	r3, [pc, #240]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d10c      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a9a:	4b38      	ldr	r3, [pc, #224]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	08db      	lsrs	r3, r3, #3
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	4a37      	ldr	r2, [pc, #220]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aac:	e01e      	b.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aae:	4b33      	ldr	r3, [pc, #204]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aba:	d106      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac2:	d102      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ac4:	4b30      	ldr	r3, [pc, #192]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac8:	e010      	b.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aca:	4b2c      	ldr	r3, [pc, #176]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad6:	d106      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ada:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ade:	d102      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006aea:	e003      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 8006aec:	e002      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006af2:	bf00      	nop
          }
        }
        break;
 8006af4:	f001 bf4d 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006af8:	4b20      	ldr	r3, [pc, #128]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006afa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b02:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d108      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b0a:	f107 0320 	add.w	r3, r7, #32
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe ffe4 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b18:	f001 bf3b 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	2b40      	cmp	r3, #64	@ 0x40
 8006b20:	d108      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b22:	f107 0314 	add.w	r3, r7, #20
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff f944 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b30:	f001 bf2f 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b38:	f001 bf2b 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006b4e:	f7fd f853 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8006b52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b54:	f001 bf1d 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006b58:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b64:	d114      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d111      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff f91f 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7a:	e04d      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 8006b7c:	44020c00 	.word	0x44020c00
 8006b80:	00bb8000 	.word	0x00bb8000
 8006b84:	03d09000 	.word	0x03d09000
 8006b88:	003d0900 	.word	0x003d0900
 8006b8c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006b90:	4ba0      	ldr	r3, [pc, #640]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba4:	f107 0308 	add.w	r3, r7, #8
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff fa6f 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb2:	e031      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006bb4:	4b97      	ldr	r3, [pc, #604]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d10c      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d109      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bc6:	4b93      	ldr	r3, [pc, #588]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	4a91      	ldr	r2, [pc, #580]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd8:	e01e      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006bda:	4b8e      	ldr	r3, [pc, #568]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be6:	d105      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	d102      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 8006bee:	4b8b      	ldr	r3, [pc, #556]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf2:	e011      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006bf4:	4b87      	ldr	r3, [pc, #540]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d106      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d103      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 8006c08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	e003      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c14:	f001 bebd 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006c18:	f001 bebb 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006c1c:	4b7d      	ldr	r3, [pc, #500]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c2e:	f7fc ffcd 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8006c32:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c34:	f001 bead 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006c38:	4b76      	ldr	r3, [pc, #472]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c44:	d10a      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d107      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c4c:	f107 0314 	add.w	r3, r7, #20
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff f8af 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5a:	e03d      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d108      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c62:	f107 0308 	add.w	r3, r7, #8
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff fa10 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c70:	f001 be8f 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006c74:	4b67      	ldr	r3, [pc, #412]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d10c      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	2b18      	cmp	r3, #24
 8006c84:	d109      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c86:	4b63      	ldr	r3, [pc, #396]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	08db      	lsrs	r3, r3, #3
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	4a61      	ldr	r2, [pc, #388]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006c92:	fa22 f303 	lsr.w	r3, r2, r3
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c98:	e01e      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d102      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 8006cae:	4b5b      	ldr	r3, [pc, #364]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb2:	e011      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006cb4:	4b57      	ldr	r3, [pc, #348]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d106      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	2b28      	cmp	r3, #40	@ 0x28
 8006cc6:	d103      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 8006cc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cd4:	f001 be5d 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006cd8:	f001 be5b 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ce2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006ce6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cee:	f7fc ff6d 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8006cf2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006cf4:	f001 be4d 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006cf8:	4b46      	ldr	r3, [pc, #280]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d04:	d10a      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff f84f 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1a:	e045      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d28:	d10a      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2b80      	cmp	r3, #128	@ 0x80
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d30:	f107 0308 	add.w	r3, r7, #8
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff f9a9 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	e033      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006d40:	4b34      	ldr	r3, [pc, #208]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d10c      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d50:	d109      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d52:	4b30      	ldr	r3, [pc, #192]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d64:	e020      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006d66:	4b2b      	ldr	r3, [pc, #172]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d72:	d106      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 8006d7c:	4b27      	ldr	r3, [pc, #156]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d80:	e012      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006d82:	4b24      	ldr	r3, [pc, #144]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006d96:	d103      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 8006d98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9e:	e003      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da4:	f001 bdf5 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006da8:	f001 bdf3 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006dac:	4b19      	ldr	r3, [pc, #100]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006db2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006db6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d104      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dbe:	f7fc ff05 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8006dc2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006dc4:	f001 bde5 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006dc8:	4b12      	ldr	r3, [pc, #72]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dd4:	d10b      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ddc:	d107      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dde:	f107 0314 	add.w	r3, r7, #20
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe ffe6 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	e04d      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006dee:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dfa:	d111      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e02:	d10d      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff f93f 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e12:	e03a      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8006e14:	44020c00 	.word	0x44020c00
 8006e18:	03d09000 	.word	0x03d09000
 8006e1c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006e20:	4ba0      	ldr	r3, [pc, #640]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d10d      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006e32:	d109      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e34:	4b9b      	ldr	r3, [pc, #620]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	08db      	lsrs	r3, r3, #3
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	4a9a      	ldr	r2, [pc, #616]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e46:	e020      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006e48:	4b96      	ldr	r3, [pc, #600]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e54:	d106      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e5c:	d102      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 8006e5e:	4b93      	ldr	r3, [pc, #588]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e62:	e012      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006e64:	4b8f      	ldr	r3, [pc, #572]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d107      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006e78:	d103      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e80:	e003      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e86:	f001 bd84 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006e8a:	f001 bd82 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e8e:	4b85      	ldr	r3, [pc, #532]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e98:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7fc fe94 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8006ea4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ea6:	f001 bd74 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ec0:	f107 0314 	add.w	r3, r7, #20
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe ff75 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ece:	e047      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006ed0:	4b74      	ldr	r3, [pc, #464]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006edc:	d10b      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ee6:	f107 0308 	add.w	r3, r7, #8
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff f8ce 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef4:	e034      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d10d      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f08:	d109      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f0a:	4b66      	ldr	r3, [pc, #408]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	08db      	lsrs	r3, r3, #3
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	4a64      	ldr	r2, [pc, #400]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1c:	e020      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006f1e:	4b61      	ldr	r3, [pc, #388]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f2a:	d106      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f32:	d102      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 8006f34:	4b5d      	ldr	r3, [pc, #372]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f38:	e012      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d107      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f4e:	d103      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 8006f50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f56:	e003      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f5c:	f001 bd19 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006f60:	f001 bd17 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006f64:	4b4f      	ldr	r3, [pc, #316]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f6a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006f6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f76:	f7fc fe29 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8006f7a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f7c:	f001 bd09 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006f80:	4b48      	ldr	r3, [pc, #288]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe ff0a 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa4:	e047      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb2:	d10b      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fba:	d107      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fbc:	f107 0308 	add.w	r3, r7, #8
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff f863 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fca:	e034      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006fcc:	4b35      	ldr	r3, [pc, #212]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d10d      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fda:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006fde:	d109      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fe0:	4b30      	ldr	r3, [pc, #192]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	08db      	lsrs	r3, r3, #3
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	4a2f      	ldr	r2, [pc, #188]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff2:	e020      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007000:	d106      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007008:	d102      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 800700a:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
 800700e:	e012      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007010:	4b24      	ldr	r3, [pc, #144]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b02      	cmp	r3, #2
 800701c:	d107      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007024:	d103      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702a:	637b      	str	r3, [r7, #52]	@ 0x34
 800702c:	e003      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007032:	f001 bcae 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007036:	f001 bcac 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800703a:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800703c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007040:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8007044:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	2b00      	cmp	r3, #0
 800704a:	d104      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fc fdbe 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8007050:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007052:	f001 bc9e 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007056:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800705e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007062:	d10b      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800706a:	d107      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800706c:	f107 0314 	add.w	r3, r7, #20
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fe9f 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	637b      	str	r3, [r7, #52]	@ 0x34
 800707a:	e04e      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800707c:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007088:	d112      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007090:	d10e      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fff8 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a0:	e03b      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 80070a2:	bf00      	nop
 80070a4:	44020c00 	.word	0x44020c00
 80070a8:	03d09000 	.word	0x03d09000
 80070ac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80070b0:	4ba0      	ldr	r3, [pc, #640]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d10d      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80070c2:	d109      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070c4:	4b9b      	ldr	r3, [pc, #620]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	4a9a      	ldr	r2, [pc, #616]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d6:	e020      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80070d8:	4b96      	ldr	r3, [pc, #600]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070e4:	d106      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ec:	d102      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 80070ee:	4b93      	ldr	r3, [pc, #588]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 80070f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f2:	e012      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80070f4:	4b8f      	ldr	r3, [pc, #572]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80070f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d107      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007108:	d103      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 800710a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007110:	e003      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007116:	f001 bc3c 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800711a:	f001 bc3a 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800711e:	4b85      	ldr	r3, [pc, #532]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007124:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007128:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fc fd4c 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8007134:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007136:	f001 bc2c 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800713a:	4b7e      	ldr	r3, [pc, #504]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007146:	d10b      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800714e:	d107      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007150:	f107 0314 	add.w	r3, r7, #20
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe fe2d 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
 800715e:	e047      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007160:	4b74      	ldr	r3, [pc, #464]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716c:	d10b      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007174:	d107      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe ff86 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	637b      	str	r3, [r7, #52]	@ 0x34
 8007184:	e034      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007186:	4b6b      	ldr	r3, [pc, #428]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b02      	cmp	r3, #2
 8007190:	d10d      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007198:	d109      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800719a:	4b66      	ldr	r3, [pc, #408]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	08db      	lsrs	r3, r3, #3
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	4a64      	ldr	r2, [pc, #400]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80071a6:	fa22 f303 	lsr.w	r3, r2, r3
 80071aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ac:	e020      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80071ae:	4b61      	ldr	r3, [pc, #388]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ba:	d106      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80071c2:	d102      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 80071c4:	4b5d      	ldr	r3, [pc, #372]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c8:	e012      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80071ca:	4b5a      	ldr	r3, [pc, #360]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80071cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d107      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80071de:	d103      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 80071e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e6:	e003      	b.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ec:	f001 bbd1 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80071f0:	f001 bbcf 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80071f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80071f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071fa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80071fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	2b00      	cmp	r3, #0
 8007204:	d104      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007206:	f7fc fce1 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 800720a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800720c:	f001 bbc1 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007210:	4b48      	ldr	r3, [pc, #288]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800721c:	d10b      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007224:	d107      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007226:	f107 0314 	add.w	r3, r7, #20
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fdc2 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
 8007234:	e047      	b.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007236:	4b3f      	ldr	r3, [pc, #252]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800723e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007242:	d10b      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800724a:	d107      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800724c:	f107 0308 	add.w	r3, r7, #8
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe ff1b 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
 800725a:	e034      	b.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800725c:	4b35      	ldr	r3, [pc, #212]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d10d      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800726e:	d109      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007270:	4b30      	ldr	r3, [pc, #192]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	08db      	lsrs	r3, r3, #3
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	4a2f      	ldr	r2, [pc, #188]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
 8007280:	637b      	str	r3, [r7, #52]	@ 0x34
 8007282:	e020      	b.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007284:	4b2b      	ldr	r3, [pc, #172]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800728c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007290:	d106      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007298:	d102      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 800729a:	4b28      	ldr	r3, [pc, #160]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
 800729e:	e012      	b.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80072a0:	4b24      	ldr	r3, [pc, #144]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80072a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d107      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072b4:	d103      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 80072b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80072bc:	e003      	b.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072c2:	f001 bb66 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80072c6:	f001 bb64 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80072ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80072cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80072d0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80072d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072dc:	f7fc fc76 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 80072e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80072e2:	f001 bb56 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80072e6:	4b13      	ldr	r3, [pc, #76]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072f2:	d10b      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072fa:	d107      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072fc:	f107 0314 	add.w	r3, r7, #20
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fd57 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	637b      	str	r3, [r7, #52]	@ 0x34
 800730a:	e04e      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800730c:	4b09      	ldr	r3, [pc, #36]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007318:	d112      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007320:	d10e      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007322:	f107 0308 	add.w	r3, r7, #8
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe feb0 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	e03b      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 8007332:	bf00      	nop
 8007334:	44020c00 	.word	0x44020c00
 8007338:	03d09000 	.word	0x03d09000
 800733c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007340:	4b9f      	ldr	r3, [pc, #636]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b02      	cmp	r3, #2
 800734a:	d10d      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007352:	d109      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007354:	4b9a      	ldr	r3, [pc, #616]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	08db      	lsrs	r3, r3, #3
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	4a99      	ldr	r2, [pc, #612]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
 8007366:	e020      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007368:	4b95      	ldr	r3, [pc, #596]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007374:	d106      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800737c:	d102      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 800737e:	4b92      	ldr	r3, [pc, #584]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
 8007382:	e012      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007384:	4b8e      	ldr	r3, [pc, #568]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b02      	cmp	r3, #2
 8007390:	d107      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007398:	d103      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 800739a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800739e:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073a6:	f001 baf4 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80073aa:	f001 baf2 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80073ae:	4b84      	ldr	r3, [pc, #528]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80073b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fc fc04 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 80073c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80073c6:	f001 bae4 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80073ca:	4b7d      	ldr	r3, [pc, #500]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073d6:	d10a      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d107      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fce6 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ec:	e043      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80073ee:	4b74      	ldr	r3, [pc, #464]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073fa:	d10a      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d107      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007402:	f107 0308 	add.w	r3, r7, #8
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe fe40 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007410:	e031      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007412:	4b6b      	ldr	r3, [pc, #428]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d10c      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	2b03      	cmp	r3, #3
 8007422:	d109      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007424:	4b66      	ldr	r3, [pc, #408]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	08db      	lsrs	r3, r3, #3
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	4a65      	ldr	r2, [pc, #404]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
 8007436:	e01e      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007438:	4b61      	ldr	r3, [pc, #388]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007444:	d105      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	2b04      	cmp	r3, #4
 800744a:	d102      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 800744c:	4b5e      	ldr	r3, [pc, #376]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007450:	e011      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007452:	4b5b      	ldr	r3, [pc, #364]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b02      	cmp	r3, #2
 800745e:	d106      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	2b05      	cmp	r3, #5
 8007464:	d103      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800746a:	637b      	str	r3, [r7, #52]	@ 0x34
 800746c:	e003      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007472:	f001 ba8e 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007476:	f001 ba8c 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800747a:	4b51      	ldr	r3, [pc, #324]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800747c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007484:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fc fb9e 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8007490:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007492:	f001 ba7e 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007496:	4b4a      	ldr	r3, [pc, #296]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a2:	d10a      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	2b10      	cmp	r3, #16
 80074a8:	d107      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074aa:	f107 0314 	add.w	r3, r7, #20
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fc80 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b8:	e043      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80074ba:	4b41      	ldr	r3, [pc, #260]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c6:	d10a      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d107      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fdda 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
 80074dc:	e031      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80074de:	4b38      	ldr	r3, [pc, #224]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d10c      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2b30      	cmp	r3, #48	@ 0x30
 80074ee:	d109      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074f0:	4b33      	ldr	r3, [pc, #204]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	08db      	lsrs	r3, r3, #3
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	4a32      	ldr	r2, [pc, #200]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80074fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
 8007502:	e01e      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007504:	4b2e      	ldr	r3, [pc, #184]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d105      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	2b40      	cmp	r3, #64	@ 0x40
 8007516:	d102      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 8007518:	4b2b      	ldr	r3, [pc, #172]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
 800751c:	e011      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800751e:	4b28      	ldr	r3, [pc, #160]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b02      	cmp	r3, #2
 800752a:	d106      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800752c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752e:	2b50      	cmp	r3, #80	@ 0x50
 8007530:	d103      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 8007532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800753e:	f001 ba28 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007542:	f001 ba26 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007546:	4b1e      	ldr	r3, [pc, #120]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800754c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007550:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007558:	f7fc fb64 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 800755c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800755e:	f001 ba18 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007568:	d108      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800756a:	f107 0314 	add.w	r3, r7, #20
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe fc20 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007578:	f001 ba0b 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007582:	d108      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007584:	f107 0308 	add.w	r3, r7, #8
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fd7f 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007592:	f001 b9fe 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007596:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d114      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075a8:	d110      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075aa:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	08db      	lsrs	r3, r3, #3
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	4a03      	ldr	r2, [pc, #12]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80075b6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80075bc:	e027      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 80075be:	bf00      	nop
 80075c0:	44020c00 	.word	0x44020c00
 80075c4:	03d09000 	.word	0x03d09000
 80075c8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80075cc:	4ba0      	ldr	r3, [pc, #640]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075d8:	d106      	bne.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075e0:	d102      	bne.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 80075e2:	4b9c      	ldr	r3, [pc, #624]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e6:	e012      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80075e8:	4b99      	ldr	r3, [pc, #612]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80075ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d107      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075fc:	d103      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 80075fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
 8007604:	e003      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800760a:	f001 b9c2 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800760e:	f001 b9c0 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007612:	4b8f      	ldr	r3, [pc, #572]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007624:	f7fc fab6 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8007628:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800762a:	f001 b9b2 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	2b01      	cmp	r3, #1
 8007632:	d104      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 8007634:	f7fc f982 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8007638:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800763a:	f001 b9aa 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	2b02      	cmp	r3, #2
 8007642:	d108      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007644:	f107 0314 	add.w	r3, r7, #20
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe fbb3 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007652:	f001 b99e 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007656:	4b7e      	ldr	r3, [pc, #504]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007662:	d105      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	2b03      	cmp	r3, #3
 8007668:	d102      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 800766a:	4b7b      	ldr	r3, [pc, #492]	@ (8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
 800766e:	e023      	b.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007670:	4b77      	ldr	r3, [pc, #476]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d10c      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	2b04      	cmp	r3, #4
 8007680:	d109      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007682:	4b73      	ldr	r3, [pc, #460]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	08db      	lsrs	r3, r3, #3
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	4a73      	ldr	r2, [pc, #460]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
 8007694:	e010      	b.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007696:	4b6e      	ldr	r3, [pc, #440]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800769e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076a2:	d105      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	d102      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 80076aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 80076ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ae:	e003      	b.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076b4:	f001 b96d 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80076b8:	f001 b96b 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80076bc:	4b64      	ldr	r3, [pc, #400]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80076be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80076c8:	4b61      	ldr	r3, [pc, #388]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80076ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d106      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 80076dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e2:	e012      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80076e4:	4b5a      	ldr	r3, [pc, #360]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80076e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f2:	d106      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d103      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 80076fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007700:	e003      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007706:	f001 b944 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800770a:	f001 b942 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800770e:	4b50      	ldr	r3, [pc, #320]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007710:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fc fa54 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8007724:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007726:	f001 b934 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007730:	d108      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fca8 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007740:	f001 b927 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007744:	4b42      	ldr	r3, [pc, #264]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b02      	cmp	r3, #2
 800774e:	d10d      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007756:	d109      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007758:	4b3d      	ldr	r3, [pc, #244]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a3e      	ldr	r2, [pc, #248]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
 800776a:	e011      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800776c:	4b38      	ldr	r3, [pc, #224]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007778:	d106      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007780:	d102      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 8007782:	4b34      	ldr	r3, [pc, #208]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800778c:	f001 b901 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007790:	f001 b8ff 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007794:	4b2e      	ldr	r3, [pc, #184]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007796:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800779a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800779e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077a6:	f7fc fa11 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 80077aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80077ac:	f001 b8f1 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077b6:	d108      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077b8:	f107 0308 	add.w	r3, r7, #8
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe fc65 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c6:	f001 b8e4 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80077ca:	4b21      	ldr	r3, [pc, #132]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d10d      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80077dc:	d109      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077de:	4b1c      	ldr	r3, [pc, #112]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	08db      	lsrs	r3, r3, #3
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	4a1c      	ldr	r2, [pc, #112]	@ (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f0:	e011      	b.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80077f2:	4b17      	ldr	r3, [pc, #92]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077fe:	d106      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007806:	d102      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 8007808:	4b12      	ldr	r3, [pc, #72]	@ (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800780a:	637b      	str	r3, [r7, #52]	@ 0x34
 800780c:	e003      	b.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007812:	f001 b8be 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007816:	f001 b8bc 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800781a:	4b0d      	ldr	r3, [pc, #52]	@ (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800781c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007820:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007824:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800782c:	f7fc f9fa 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 8007830:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007832:	f001 b8ae 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800783c:	d110      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fc22 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800784c:	f001 b8a1 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007850:	44020c00 	.word	0x44020c00
 8007854:	003d0900 	.word	0x003d0900
 8007858:	007a1200 	.word	0x007a1200
 800785c:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007860:	4b9e      	ldr	r3, [pc, #632]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b02      	cmp	r3, #2
 800786a:	d10d      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007872:	d109      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007874:	4b99      	ldr	r3, [pc, #612]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	08db      	lsrs	r3, r3, #3
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	4a98      	ldr	r2, [pc, #608]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
 8007886:	e011      	b.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007888:	4b94      	ldr	r3, [pc, #592]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007894:	d106      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800789c:	d102      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 800789e:	4b91      	ldr	r3, [pc, #580]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 80078a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078a2:	e003      	b.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078a8:	f001 b873 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80078ac:	f001 b871 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80078b0:	4b8a      	ldr	r3, [pc, #552]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80078b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078b6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80078ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80078c2:	f7fc f9af 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 80078c6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80078c8:	f001 b863 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078d2:	d108      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d4:	f107 0308 	add.w	r3, r7, #8
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fbd7 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078e2:	f001 b856 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80078e6:	4b7d      	ldr	r3, [pc, #500]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d10d      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078f8:	d109      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078fa:	4b78      	ldr	r3, [pc, #480]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	08db      	lsrs	r3, r3, #3
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	4a76      	ldr	r2, [pc, #472]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8007906:	fa22 f303 	lsr.w	r3, r2, r3
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
 800790c:	e011      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800790e:	4b73      	ldr	r3, [pc, #460]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800791a:	d106      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007922:	d102      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 8007924:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
 8007928:	e003      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800792e:	f001 b830 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007932:	f001 b82e 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007936:	4b69      	ldr	r3, [pc, #420]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800793c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007940:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007948:	f7fc f940 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 800794c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800794e:	f001 b820 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007958:	d108      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fb94 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007968:	f001 b813 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800796c:	4b5b      	ldr	r3, [pc, #364]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b02      	cmp	r3, #2
 8007976:	d10e      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800797e:	d10a      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007980:	4b56      	ldr	r3, [pc, #344]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	08db      	lsrs	r3, r3, #3
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	4a55      	ldr	r2, [pc, #340]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800798c:	fa22 f303 	lsr.w	r3, r2, r3
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007992:	f000 bffe 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800799a:	f000 bffa 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800799e:	4b4f      	ldr	r3, [pc, #316]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80079a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80079a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079a8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80079b0:	d056      	beq.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80079b8:	f200 808b 	bhi.w	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079c2:	d03e      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ca:	f200 8082 	bhi.w	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d4:	d027      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079dc:	d879      	bhi.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e4:	d017      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ec:	d871      	bhi.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079fa:	d004      	beq.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 80079fc:	e069      	b.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80079fe:	f7fc f911 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 8007a02:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007a04:	e068      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a06:	f107 0314 	add.w	r3, r7, #20
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe f9d2 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a14:	e060      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a16:	f107 0308 	add.w	r3, r7, #8
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe fb36 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a24:	e058      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a26:	4b2d      	ldr	r3, [pc, #180]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d103      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 8007a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a38:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007a3a:	e04d      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a40:	e04a      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007a42:	4b26      	ldr	r3, [pc, #152]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a50:	d103      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 8007a52:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007a58:	e03e      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a5e:	e03b      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a60:	4b1e      	ldr	r3, [pc, #120]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d10c      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 8007a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a7e:	4b17      	ldr	r3, [pc, #92]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8007a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a90:	e01e      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a92:	4b12      	ldr	r3, [pc, #72]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9e:	d106      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa6:	d102      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8007aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aac:	e010      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aae:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aba:	d106      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ac2:	d102      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ac4:	4b08      	ldr	r3, [pc, #32]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 8007ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac8:	e002      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007ace:	e003      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 8007ad0:	e002      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ad6:	bf00      	nop
          }
        }
        break;
 8007ad8:	f000 bf5b 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007adc:	44020c00 	.word	0x44020c00
 8007ae0:	03d09000 	.word	0x03d09000
 8007ae4:	003d0900 	.word	0x003d0900
 8007ae8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007aec:	4b9e      	ldr	r3, [pc, #632]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007aee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007af2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007af6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007afe:	d056      	beq.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b06:	f200 808b 	bhi.w	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b10:	d03e      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b18:	f200 8082 	bhi.w	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b22:	d027      	beq.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 8007b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b2a:	d879      	bhi.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b32:	d017      	beq.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 8007b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b3a:	d871      	bhi.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b48:	d004      	beq.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007b4a:	e069      	b.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007b4c:	f7fc f83e 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8007b50:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007b52:	e068      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b54:	f107 0314 	add.w	r3, r7, #20
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe f92b 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b62:	e060      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b64:	f107 0308 	add.w	r3, r7, #8
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fe fa8f 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b72:	e058      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b74:	4b7c      	ldr	r3, [pc, #496]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d103      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b86:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007b88:	e04d      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b8e:	e04a      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007b90:	4b75      	ldr	r3, [pc, #468]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b9e:	d103      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 8007ba0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ba4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007ba6:	e03e      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bac:	e03b      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bae:	4b6e      	ldr	r3, [pc, #440]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bb4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bba:	4b6b      	ldr	r3, [pc, #428]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d10c      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 8007bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bcc:	4b66      	ldr	r3, [pc, #408]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	08db      	lsrs	r3, r3, #3
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	4a65      	ldr	r2, [pc, #404]	@ (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bde:	e01e      	b.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007be0:	4b61      	ldr	r3, [pc, #388]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bec:	d106      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 8007bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf4:	d102      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007bf6:	4b5e      	ldr	r3, [pc, #376]	@ (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfa:	e010      	b.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c08:	d106      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c10:	d102      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007c12:	4b58      	ldr	r3, [pc, #352]	@ (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 8007c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c16:	e002      	b.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007c1c:	e003      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 8007c1e:	e002      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c24:	bf00      	nop
          }
        }
        break;
 8007c26:	f000 beb4 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007c2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c30:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c34:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c3c:	d056      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c44:	f200 808b 	bhi.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8007c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c4e:	d03e      	beq.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c56:	f200 8082 	bhi.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c60:	d027      	beq.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c68:	d879      	bhi.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c70:	d017      	beq.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c78:	d871      	bhi.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d004      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c86:	d004      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007c88:	e069      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007c8a:	f7fb ffcb 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 8007c8e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007c90:	e068      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c92:	f107 0314 	add.w	r3, r7, #20
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe f88c 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ca0:	e060      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca2:	f107 0308 	add.w	r3, r7, #8
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe f9f0 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cb0:	e058      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d103      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 8007cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007cc6:	e04d      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ccc:	e04a      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007cce:	4b26      	ldr	r3, [pc, #152]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cdc:	d103      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 8007cde:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007ce4:	e03e      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cea:	e03b      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cec:	4b1e      	ldr	r3, [pc, #120]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cf2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d10c      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 8007d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d0a:	4b17      	ldr	r3, [pc, #92]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	08db      	lsrs	r3, r3, #3
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	4a15      	ldr	r2, [pc, #84]	@ (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8007d16:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d1c:	e01e      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d1e:	4b12      	ldr	r3, [pc, #72]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d2a:	d106      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 8007d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	d102      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d34:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8007d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d38:	e010      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d46:	d106      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 8007d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d4e:	d102      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d50:	4b08      	ldr	r3, [pc, #32]	@ (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d54:	e002      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d5a:	e003      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 8007d5c:	e002      	b.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d62:	bf00      	nop
          }
        }
        break;
 8007d64:	f000 be15 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007d68:	44020c00 	.word	0x44020c00
 8007d6c:	03d09000 	.word	0x03d09000
 8007d70:	003d0900 	.word	0x003d0900
 8007d74:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007d78:	4b9e      	ldr	r3, [pc, #632]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007d7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d7e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8007d82:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007d8a:	d056      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007d92:	f200 808b 	bhi.w	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d9c:	d03e      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007da4:	f200 8082 	bhi.w	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007daa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dae:	d027      	beq.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007db6:	d879      	bhi.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dbe:	d017      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dc6:	d871      	bhi.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dd4:	d004      	beq.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007dd6:	e069      	b.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007dd8:	f7fb ff24 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 8007ddc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007dde:	e068      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fd ffe5 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dee:	e060      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df0:	f107 0308 	add.w	r3, r7, #8
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe f949 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dfe:	e058      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e00:	4b7c      	ldr	r3, [pc, #496]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d103      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 8007e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e14:	e04d      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e1a:	e04a      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007e1c:	4b75      	ldr	r3, [pc, #468]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e2a:	d103      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 8007e2c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e32:	e03e      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e38:	e03b      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e40:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007e44:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e46:	4b6b      	ldr	r3, [pc, #428]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d10c      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 8007e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e58:	4b66      	ldr	r3, [pc, #408]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	08db      	lsrs	r3, r3, #3
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	4a65      	ldr	r2, [pc, #404]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8007e64:	fa22 f303 	lsr.w	r3, r2, r3
 8007e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6a:	e01e      	b.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e6c:	4b61      	ldr	r3, [pc, #388]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e78:	d106      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 8007e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e80:	d102      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e82:	4b5e      	ldr	r3, [pc, #376]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e86:	e010      	b.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e88:	4b5a      	ldr	r3, [pc, #360]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e94:	d106      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e9c:	d102      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e9e:	4b58      	ldr	r3, [pc, #352]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea2:	e002      	b.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007ea8:	e003      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 8007eaa:	e002      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007eb0:	bf00      	nop
          }
        }
        break;
 8007eb2:	f000 bd6e 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007eb8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ebc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007ec0:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007ec8:	d056      	beq.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007ed0:	f200 808b 	bhi.w	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007eda:	d03e      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ee2:	f200 8082 	bhi.w	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007eec:	d027      	beq.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ef4:	d879      	bhi.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007efc:	d017      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f04:	d871      	bhi.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f12:	d004      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007f14:	e069      	b.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007f16:	f7fb fe85 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 8007f1a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007f1c:	e068      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f1e:	f107 0314 	add.w	r3, r7, #20
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd ff46 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f2c:	e060      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f2e:	f107 0308 	add.w	r3, r7, #8
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe f8aa 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f3c:	e058      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d103      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 8007f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f52:	e04d      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f58:	e04a      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007f5a:	4b26      	ldr	r3, [pc, #152]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f68:	d103      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 8007f6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f6e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f70:	e03e      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f76:	e03b      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f78:	4b1e      	ldr	r3, [pc, #120]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f7e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007f82:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f84:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d10c      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 8007f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f96:	4b17      	ldr	r3, [pc, #92]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	08db      	lsrs	r3, r3, #3
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	4a15      	ldr	r2, [pc, #84]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8007fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa8:	e01e      	b.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007faa:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb6:	d106      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 8007fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fbe:	d102      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8007fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc4:	e010      	b.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fd2:	d106      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 8007fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fda:	d102      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007fdc:	4b08      	ldr	r3, [pc, #32]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 8007fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007fe6:	e003      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 8007fe8:	e002      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fee:	bf00      	nop
          }
        }
        break;
 8007ff0:	f000 bccf 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007ff4:	44020c00 	.word	0x44020c00
 8007ff8:	03d09000 	.word	0x03d09000
 8007ffc:	003d0900 	.word	0x003d0900
 8008000:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008004:	4b9e      	ldr	r3, [pc, #632]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008006:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800800a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800800e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008016:	d056      	beq.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800801e:	f200 808b 	bhi.w	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8008022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008028:	d03e      	beq.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 800802a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008030:	f200 8082 	bhi.w	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800803a:	d027      	beq.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008042:	d879      	bhi.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800804a:	d017      	beq.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008052:	d871      	bhi.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008060:	d004      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8008062:	e069      	b.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008064:	f7fb fdde 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 8008068:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800806a:	e068      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800806c:	f107 0314 	add.w	r3, r7, #20
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd fe9f 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800807a:	e060      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800807c:	f107 0308 	add.w	r3, r7, #8
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe f803 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800808a:	e058      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800808c:	4b7c      	ldr	r3, [pc, #496]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800808e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b02      	cmp	r3, #2
 8008098:	d103      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 800809a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800809e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80080a0:	e04d      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080a6:	e04a      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80080a8:	4b75      	ldr	r3, [pc, #468]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80080aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080b6:	d103      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 80080b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80080be:	e03e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080c4:	e03b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80080c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080d2:	4b6b      	ldr	r3, [pc, #428]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d10c      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 80080de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d109      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080e4:	4b66      	ldr	r3, [pc, #408]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	08db      	lsrs	r3, r3, #3
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	4a65      	ldr	r2, [pc, #404]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
 80080f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f6:	e01e      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080f8:	4b61      	ldr	r3, [pc, #388]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008104:	d106      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800810c:	d102      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800810e:	4b5e      	ldr	r3, [pc, #376]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
 8008112:	e010      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008114:	4b5a      	ldr	r3, [pc, #360]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800811c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008120:	d106      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008128:	d102      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800812a:	4b58      	ldr	r3, [pc, #352]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800812c:	637b      	str	r3, [r7, #52]	@ 0x34
 800812e:	e002      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008134:	e003      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 8008136:	e002      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800813c:	bf00      	nop
          }
        }
        break;
 800813e:	f000 bc28 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008142:	4b4f      	ldr	r3, [pc, #316]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800814c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800814e:	4b4c      	ldr	r3, [pc, #304]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800815a:	d106      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	2b00      	cmp	r3, #0
 8008160:	d103      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 8008162:	4b4a      	ldr	r3, [pc, #296]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8008164:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008166:	f000 bc14 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008170:	d108      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008172:	f107 0320 	add.w	r3, r7, #32
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd fcb0 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008180:	f000 bc07 	b.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818a:	d107      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	4618      	mov	r0, r3
 8008192:	f7fd fe0f 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800819a:	e3fa      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a0:	e3f7      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80081a2:	4b37      	ldr	r3, [pc, #220]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80081a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d861      	bhi.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 80081b4:	a201      	add	r2, pc, #4	@ (adr r2, 80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	080081d1 	.word	0x080081d1
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	08008201 	.word	0x08008201
 80081cc:	08008207 	.word	0x08008207
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081d0:	f107 0320 	add.w	r3, r7, #32
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fd fc81 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081de:	e04e      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e0:	f107 0314 	add.w	r3, r7, #20
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fd fde5 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081ee:	e046      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f0:	f107 0308 	add.w	r3, r7, #8
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fd ff49 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081fe:	e03e      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008200:	4b23      	ldr	r3, [pc, #140]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008204:	e03b      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008206:	4b1e      	ldr	r3, [pc, #120]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800820c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008210:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008212:	4b1b      	ldr	r3, [pc, #108]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b02      	cmp	r3, #2
 800821c:	d10c      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008224:	4b16      	ldr	r3, [pc, #88]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	4a15      	ldr	r2, [pc, #84]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	637b      	str	r3, [r7, #52]	@ 0x34
 8008236:	e01e      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008238:	4b11      	ldr	r3, [pc, #68]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008244:	d106      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800824c:	d102      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800824e:	4b0e      	ldr	r3, [pc, #56]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 8008250:	637b      	str	r3, [r7, #52]	@ 0x34
 8008252:	e010      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008254:	4b0a      	ldr	r3, [pc, #40]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800825c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008260:	d106      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 8008262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008264:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008268:	d102      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800826a:	4b08      	ldr	r3, [pc, #32]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
 800826e:	e002      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008274:	e003      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 8008276:	e002      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800827c:	bf00      	nop
          }
        }
        break;
 800827e:	e388      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008280:	44020c00 	.word	0x44020c00
 8008284:	03d09000 	.word	0x03d09000
 8008288:	003d0900 	.word	0x003d0900
 800828c:	007a1200 	.word	0x007a1200
 8008290:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008294:	4ba9      	ldr	r3, [pc, #676]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800829a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800829e:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80082a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	f200 809a 	bhi.w	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 80082a8:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	08008335 	.word	0x08008335
 80082b4:	080083dd 	.word	0x080083dd
 80082b8:	080083dd 	.word	0x080083dd
 80082bc:	080083dd 	.word	0x080083dd
 80082c0:	080083dd 	.word	0x080083dd
 80082c4:	080083dd 	.word	0x080083dd
 80082c8:	080083dd 	.word	0x080083dd
 80082cc:	080083dd 	.word	0x080083dd
 80082d0:	08008345 	.word	0x08008345
 80082d4:	080083dd 	.word	0x080083dd
 80082d8:	080083dd 	.word	0x080083dd
 80082dc:	080083dd 	.word	0x080083dd
 80082e0:	080083dd 	.word	0x080083dd
 80082e4:	080083dd 	.word	0x080083dd
 80082e8:	080083dd 	.word	0x080083dd
 80082ec:	080083dd 	.word	0x080083dd
 80082f0:	08008355 	.word	0x08008355
 80082f4:	080083dd 	.word	0x080083dd
 80082f8:	080083dd 	.word	0x080083dd
 80082fc:	080083dd 	.word	0x080083dd
 8008300:	080083dd 	.word	0x080083dd
 8008304:	080083dd 	.word	0x080083dd
 8008308:	080083dd 	.word	0x080083dd
 800830c:	080083dd 	.word	0x080083dd
 8008310:	08008365 	.word	0x08008365
 8008314:	080083dd 	.word	0x080083dd
 8008318:	080083dd 	.word	0x080083dd
 800831c:	080083dd 	.word	0x080083dd
 8008320:	080083dd 	.word	0x080083dd
 8008324:	080083dd 	.word	0x080083dd
 8008328:	080083dd 	.word	0x080083dd
 800832c:	080083dd 	.word	0x080083dd
 8008330:	0800836b 	.word	0x0800836b
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008334:	f107 0320 	add.w	r3, r7, #32
 8008338:	4618      	mov	r0, r3
 800833a:	f7fd fbcf 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008342:	e04e      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008344:	f107 0314 	add.w	r3, r7, #20
 8008348:	4618      	mov	r0, r3
 800834a:	f7fd fd33 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008352:	e046      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008354:	f107 0308 	add.w	r3, r7, #8
 8008358:	4618      	mov	r0, r3
 800835a:	f7fd fe97 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008362:	e03e      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008364:	4b76      	ldr	r3, [pc, #472]	@ (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008368:	e03b      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800836a:	4b74      	ldr	r3, [pc, #464]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800836c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008370:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008374:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008376:	4b71      	ldr	r3, [pc, #452]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b02      	cmp	r3, #2
 8008380:	d10c      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008388:	4b6c      	ldr	r3, [pc, #432]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	08db      	lsrs	r3, r3, #3
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	4a6c      	ldr	r2, [pc, #432]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
 8008398:	637b      	str	r3, [r7, #52]	@ 0x34
 800839a:	e01e      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800839c:	4b67      	ldr	r3, [pc, #412]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083a8:	d106      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 80083aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b0:	d102      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80083b2:	4b65      	ldr	r3, [pc, #404]	@ (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b6:	e010      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b8:	4b60      	ldr	r3, [pc, #384]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083c4:	d106      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 80083c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083cc:	d102      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083ce:	4b5f      	ldr	r3, [pc, #380]	@ (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d2:	e002      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80083d8:	e003      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 80083da:	e002      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083e0:	bf00      	nop
          }
        }
        break;
 80083e2:	e2d6      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80083e4:	4b55      	ldr	r3, [pc, #340]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80083e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80083ee:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083f6:	d031      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083fe:	d866      	bhi.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	2bc0      	cmp	r3, #192	@ 0xc0
 8008404:	d027      	beq.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	2bc0      	cmp	r3, #192	@ 0xc0
 800840a:	d860      	bhi.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800840c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840e:	2b80      	cmp	r3, #128	@ 0x80
 8008410:	d019      	beq.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	2b80      	cmp	r3, #128	@ 0x80
 8008416:	d85a      	bhi.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	2b40      	cmp	r3, #64	@ 0x40
 8008422:	d008      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 8008424:	e053      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008426:	f107 0320 	add.w	r3, r7, #32
 800842a:	4618      	mov	r0, r3
 800842c:	f7fd fb56 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008434:	e04e      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008436:	f107 0314 	add.w	r3, r7, #20
 800843a:	4618      	mov	r0, r3
 800843c:	f7fd fcba 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008444:	e046      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008446:	f107 0308 	add.w	r3, r7, #8
 800844a:	4618      	mov	r0, r3
 800844c:	f7fd fe1e 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008454:	e03e      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008456:	4b3a      	ldr	r3, [pc, #232]	@ (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8008458:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800845a:	e03b      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800845c:	4b37      	ldr	r3, [pc, #220]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800845e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008462:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008466:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008468:	4b34      	ldr	r3, [pc, #208]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b02      	cmp	r3, #2
 8008472:	d10c      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d109      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800847a:	4b30      	ldr	r3, [pc, #192]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	08db      	lsrs	r3, r3, #3
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	4a2f      	ldr	r2, [pc, #188]	@ (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8008486:	fa22 f303 	lsr.w	r3, r2, r3
 800848a:	637b      	str	r3, [r7, #52]	@ 0x34
 800848c:	e01e      	b.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800848e:	4b2b      	ldr	r3, [pc, #172]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849a:	d106      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 800849c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a2:	d102      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80084a4:	4b28      	ldr	r3, [pc, #160]	@ (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 80084a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a8:	e010      	b.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084aa:	4b24      	ldr	r3, [pc, #144]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084b6:	d106      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 80084b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084be:	d102      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80084c0:	4b22      	ldr	r3, [pc, #136]	@ (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 80084c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c4:	e002      	b.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80084ca:	e003      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 80084cc:	e002      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084d2:	bf00      	nop
          }
        }
        break;
 80084d4:	e25d      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80084d6:	4b19      	ldr	r3, [pc, #100]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80084d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084dc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80084e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d103      	bne.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80084e8:	f7fb fb86 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 80084ec:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80084ee:	e250      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80084f0:	4b12      	ldr	r3, [pc, #72]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084fc:	d10b      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008504:	d107      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008506:	f107 0314 	add.w	r3, r7, #20
 800850a:	4618      	mov	r0, r3
 800850c:	f7fd fc52 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
 8008514:	e04f      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008516:	4b09      	ldr	r3, [pc, #36]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800851e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008522:	d115      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800852a:	d111      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852c:	f107 0308 	add.w	r3, r7, #8
 8008530:	4618      	mov	r0, r3
 8008532:	f7fd fdab 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	637b      	str	r3, [r7, #52]	@ 0x34
 800853a:	e03c      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 800853c:	44020c00 	.word	0x44020c00
 8008540:	00bb8000 	.word	0x00bb8000
 8008544:	03d09000 	.word	0x03d09000
 8008548:	003d0900 	.word	0x003d0900
 800854c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008550:	4b94      	ldr	r3, [pc, #592]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b02      	cmp	r3, #2
 800855a:	d10d      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008562:	d109      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008564:	4b8f      	ldr	r3, [pc, #572]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	08db      	lsrs	r3, r3, #3
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	4a8e      	ldr	r2, [pc, #568]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34
 8008576:	e01e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008578:	4b8a      	ldr	r3, [pc, #552]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008584:	d106      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800858c:	d102      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 800858e:	4b87      	ldr	r3, [pc, #540]	@ (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
 8008592:	e010      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008594:	4b83      	ldr	r3, [pc, #524]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800859c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085a0:	d106      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80085a8:	d102      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 80085aa:	4b81      	ldr	r3, [pc, #516]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ae:	e002      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085b4:	e1ed      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80085b6:	e1ec      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80085b8:	4b7a      	ldr	r3, [pc, #488]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80085ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085be:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80085c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80085c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d103      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80085ca:	f7fb fb2b 	bl	8003c24 <HAL_RCC_GetPCLK3Freq>
 80085ce:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80085d0:	e1df      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80085d2:	4b74      	ldr	r3, [pc, #464]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085de:	d10b      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e6:	d107      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e8:	f107 0314 	add.w	r3, r7, #20
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fd fbe1 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f6:	e045      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80085f8:	4b6a      	ldr	r3, [pc, #424]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008604:	d10b      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800860c:	d107      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800860e:	f107 0308 	add.w	r3, r7, #8
 8008612:	4618      	mov	r0, r3
 8008614:	f7fd fd3a 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	637b      	str	r3, [r7, #52]	@ 0x34
 800861c:	e032      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800861e:	4b61      	ldr	r3, [pc, #388]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b02      	cmp	r3, #2
 8008628:	d10d      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008630:	d109      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008632:	4b5c      	ldr	r3, [pc, #368]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	08db      	lsrs	r3, r3, #3
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	4a5a      	ldr	r2, [pc, #360]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800863e:	fa22 f303 	lsr.w	r3, r2, r3
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
 8008644:	e01e      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008646:	4b57      	ldr	r3, [pc, #348]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800864e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008652:	d106      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800865a:	d102      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 800865c:	4b53      	ldr	r3, [pc, #332]	@ (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008660:	e010      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008662:	4b50      	ldr	r3, [pc, #320]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800866e:	d106      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008676:	d102      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 8008678:	4b4d      	ldr	r3, [pc, #308]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34
 800867c:	e002      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008682:	e186      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008684:	e185      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008686:	4b47      	ldr	r3, [pc, #284]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800868c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008690:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008698:	f7fb faae 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 800869c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800869e:	e178      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80086a0:	4b40      	ldr	r3, [pc, #256]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086ac:	d10b      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086b4:	d107      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b6:	f107 0314 	add.w	r3, r7, #20
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fd fb7a 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c4:	e045      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80086c6:	4b37      	ldr	r3, [pc, #220]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086d2:	d10b      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 80086d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086da:	d107      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086dc:	f107 0308 	add.w	r3, r7, #8
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fd fcd3 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ea:	e032      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80086ec:	4b2d      	ldr	r3, [pc, #180]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d10d      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80086fe:	d109      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008700:	4b28      	ldr	r3, [pc, #160]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	08db      	lsrs	r3, r3, #3
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	4a27      	ldr	r2, [pc, #156]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800870c:	fa22 f303 	lsr.w	r3, r2, r3
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
 8008712:	e01e      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008714:	4b23      	ldr	r3, [pc, #140]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800871c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008720:	d106      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008728:	d102      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 800872a:	4b20      	ldr	r3, [pc, #128]	@ (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34
 800872e:	e010      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008730:	4b1c      	ldr	r3, [pc, #112]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800873c:	d106      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008744:	d102      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 8008746:	4b1a      	ldr	r3, [pc, #104]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8008748:	637b      	str	r3, [r7, #52]	@ 0x34
 800874a:	e002      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008750:	e11f      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008752:	e11e      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008754:	4b13      	ldr	r3, [pc, #76]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008756:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	2b03      	cmp	r3, #3
 8008764:	d85f      	bhi.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 8008766:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	0800877d 	.word	0x0800877d
 8008770:	08008785 	.word	0x08008785
 8008774:	08008795 	.word	0x08008795
 8008778:	080087b5 	.word	0x080087b5
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800877c:	f7fb fa0a 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8008780:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008782:	e053      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008784:	f107 0320 	add.w	r3, r7, #32
 8008788:	4618      	mov	r0, r3
 800878a:	f7fd f9a7 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008792:	e04b      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	4618      	mov	r0, r3
 800879a:	f7fd fb0b 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087a2:	e043      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 80087a4:	44020c00 	.word	0x44020c00
 80087a8:	03d09000 	.word	0x03d09000
 80087ac:	003d0900 	.word	0x003d0900
 80087b0:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087b4:	4b79      	ldr	r3, [pc, #484]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80087b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80087be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087c0:	4b76      	ldr	r3, [pc, #472]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d10c      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087d2:	4b72      	ldr	r3, [pc, #456]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	08db      	lsrs	r3, r3, #3
 80087d8:	f003 0303 	and.w	r3, r3, #3
 80087dc:	4a70      	ldr	r2, [pc, #448]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 80087de:	fa22 f303 	lsr.w	r3, r2, r3
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e4:	e01e      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087e6:	4b6d      	ldr	r3, [pc, #436]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087f2:	d106      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fa:	d102      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087fc:	4b69      	ldr	r3, [pc, #420]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 80087fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008800:	e010      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008802:	4b66      	ldr	r3, [pc, #408]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800880a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800880e:	d106      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 8008810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008816:	d102      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008818:	4b63      	ldr	r3, [pc, #396]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 800881a:	637b      	str	r3, [r7, #52]	@ 0x34
 800881c:	e002      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008822:	e003      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8008824:	e002      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800882a:	bf00      	nop
          }
        }
        break;
 800882c:	e0b1      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800882e:	4b5b      	ldr	r3, [pc, #364]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008834:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008838:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800883a:	4b58      	ldr	r3, [pc, #352]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800883c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b02      	cmp	r3, #2
 8008846:	d106      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	2b00      	cmp	r3, #0
 800884c:	d103      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 800884e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008852:	637b      	str	r3, [r7, #52]	@ 0x34
 8008854:	e01f      	b.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008856:	4b51      	ldr	r3, [pc, #324]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800885c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008864:	d106      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	2b40      	cmp	r3, #64	@ 0x40
 800886a:	d103      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 800886c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008870:	637b      	str	r3, [r7, #52]	@ 0x34
 8008872:	e010      	b.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008874:	4b49      	ldr	r3, [pc, #292]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800887c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008880:	d106      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	2b80      	cmp	r3, #128	@ 0x80
 8008886:	d103      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 8008888:	f248 0312 	movw	r3, #32786	@ 0x8012
 800888c:	637b      	str	r3, [r7, #52]	@ 0x34
 800888e:	e002      	b.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008894:	e07d      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008896:	e07c      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008898:	4b40      	ldr	r3, [pc, #256]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800889a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800889e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80088a4:	4b3d      	ldr	r3, [pc, #244]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088b0:	d105      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 80088b8:	4b3c      	ldr	r3, [pc, #240]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 80088ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80088bc:	e031      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80088be:	4b37      	ldr	r3, [pc, #220]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088ca:	d10a      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	2b10      	cmp	r3, #16
 80088d0:	d107      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088d2:	f107 0320 	add.w	r3, r7, #32
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fd f900 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088de:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e0:	e01f      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80088e2:	4b2e      	ldr	r3, [pc, #184]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80088e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d106      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 80088f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	d103      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 80088f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fc:	e011      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80088fe:	4b27      	ldr	r3, [pc, #156]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800890c:	d106      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	2b30      	cmp	r3, #48	@ 0x30
 8008912:	d103      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 8008914:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
 800891a:	e002      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008920:	e037      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008922:	e036      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008924:	4b1d      	ldr	r3, [pc, #116]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008926:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800892a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800892e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	2b10      	cmp	r3, #16
 8008934:	d107      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008936:	f107 0320 	add.w	r3, r7, #32
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd f8ce 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008944:	e025      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008946:	4b15      	ldr	r3, [pc, #84]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800894e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008952:	d10a      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	2b20      	cmp	r3, #32
 8008958:	d107      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	4618      	mov	r0, r3
 8008960:	f7fd fb94 	bl	800608c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	637b      	str	r3, [r7, #52]	@ 0x34
 8008968:	e00f      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800896a:	4b0c      	ldr	r3, [pc, #48]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008976:	d105      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	2b30      	cmp	r3, #48	@ 0x30
 800897c:	d102      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 800897e:	4b0b      	ldr	r3, [pc, #44]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8008980:	637b      	str	r3, [r7, #52]	@ 0x34
 8008982:	e002      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008988:	e003      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800898a:	e002      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008990:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8008992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008994:	4618      	mov	r0, r3
 8008996:	373c      	adds	r7, #60	@ 0x3c
 8008998:	46bd      	mov	sp, r7
 800899a:	bd90      	pop	{r4, r7, pc}
 800899c:	44020c00 	.word	0x44020c00
 80089a0:	03d09000 	.word	0x03d09000
 80089a4:	003d0900 	.word	0x003d0900
 80089a8:	007a1200 	.word	0x007a1200
 80089ac:	02dc6c00 	.word	0x02dc6c00

080089b0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80089b8:	4b48      	ldr	r3, [pc, #288]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a47      	ldr	r2, [pc, #284]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 80089be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089c4:	f7f9 fc2a 	bl	800221c <HAL_GetTick>
 80089c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089ca:	e008      	b.n	80089de <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089cc:	f7f9 fc26 	bl	800221c <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e07a      	b.n	8008ad4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089de:	4b3f      	ldr	r3, [pc, #252]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1f0      	bne.n	80089cc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80089ea:	4b3c      	ldr	r3, [pc, #240]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 80089ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80089f2:	f023 0303 	bic.w	r3, r3, #3
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6811      	ldr	r1, [r2, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6852      	ldr	r2, [r2, #4]
 80089fe:	0212      	lsls	r2, r2, #8
 8008a00:	430a      	orrs	r2, r1
 8008a02:	4936      	ldr	r1, [pc, #216]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	025b      	lsls	r3, r3, #9
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	041b      	lsls	r3, r3, #16
 8008a26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	061b      	lsls	r3, r3, #24
 8008a34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a38:	4928      	ldr	r1, [pc, #160]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008a3e:	4b27      	ldr	r3, [pc, #156]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	f023 020c 	bic.w	r2, r3, #12
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	4924      	ldr	r1, [pc, #144]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008a50:	4b22      	ldr	r3, [pc, #136]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	f023 0220 	bic.w	r2, r3, #32
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	491f      	ldr	r1, [pc, #124]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008a62:	4b1e      	ldr	r3, [pc, #120]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6a:	491c      	ldr	r1, [pc, #112]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008a70:	4b1a      	ldr	r3, [pc, #104]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a74:	4a19      	ldr	r2, [pc, #100]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a76:	f023 0310 	bic.w	r3, r3, #16
 8008a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008a7c:	4b17      	ldr	r3, [pc, #92]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a84:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6a12      	ldr	r2, [r2, #32]
 8008a8c:	00d2      	lsls	r2, r2, #3
 8008a8e:	4913      	ldr	r1, [pc, #76]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008a94:	4b11      	ldr	r3, [pc, #68]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	4a10      	ldr	r2, [pc, #64]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008a9a:	f043 0310 	orr.w	r3, r3, #16
 8008a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008aa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008aaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008aac:	f7f9 fbb6 	bl	800221c <HAL_GetTick>
 8008ab0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ab2:	e008      	b.n	8008ac6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ab4:	f7f9 fbb2 	bl	800221c <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e006      	b.n	8008ad4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ac6:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <RCCEx_PLL2_Config+0x12c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f0      	beq.n	8008ab4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0

}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	44020c00 	.word	0x44020c00

08008ae0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008ae8:	4b48      	ldr	r3, [pc, #288]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a47      	ldr	r2, [pc, #284]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008af2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008af4:	f7f9 fb92 	bl	800221c <HAL_GetTick>
 8008af8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008afa:	e008      	b.n	8008b0e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008afc:	f7f9 fb8e 	bl	800221c <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d901      	bls.n	8008b0e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e07a      	b.n	8008c04 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1f0      	bne.n	8008afc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008b22:	f023 0303 	bic.w	r3, r3, #3
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	6811      	ldr	r1, [r2, #0]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6852      	ldr	r2, [r2, #4]
 8008b2e:	0212      	lsls	r2, r2, #8
 8008b30:	430a      	orrs	r2, r1
 8008b32:	4936      	ldr	r1, [pc, #216]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	630b      	str	r3, [r1, #48]	@ 0x30
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	025b      	lsls	r3, r3, #9
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	061b      	lsls	r3, r3, #24
 8008b64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b68:	4928      	ldr	r1, [pc, #160]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b6e:	4b27      	ldr	r3, [pc, #156]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b72:	f023 020c 	bic.w	r2, r3, #12
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	4924      	ldr	r1, [pc, #144]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008b80:	4b22      	ldr	r3, [pc, #136]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b84:	f023 0220 	bic.w	r2, r3, #32
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	491f      	ldr	r1, [pc, #124]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008b92:	4b1e      	ldr	r3, [pc, #120]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9a:	491c      	ldr	r1, [pc, #112]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba4:	4a19      	ldr	r2, [pc, #100]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008ba6:	f023 0310 	bic.w	r3, r3, #16
 8008baa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008bac:	4b17      	ldr	r3, [pc, #92]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bb4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6a12      	ldr	r2, [r2, #32]
 8008bbc:	00d2      	lsls	r2, r2, #3
 8008bbe:	4913      	ldr	r1, [pc, #76]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008bc4:	4b11      	ldr	r3, [pc, #68]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc8:	4a10      	ldr	r2, [pc, #64]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008bca:	f043 0310 	orr.w	r3, r3, #16
 8008bce:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bdc:	f7f9 fb1e 	bl	800221c <HAL_GetTick>
 8008be0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008be2:	e008      	b.n	8008bf6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008be4:	f7f9 fb1a 	bl	800221c <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e006      	b.n	8008c04 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bf6:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <RCCEx_PLL3_Config+0x12c>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f0      	beq.n	8008be4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	44020c00 	.word	0x44020c00

08008c10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	@ 0x28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e075      	b.n	8008d0e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d105      	bne.n	8008c3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7f8 ff11 	bl	8001a5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2204      	movs	r2, #4
 8008c3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f868 	bl	8008d18 <HAL_SD_InitCard>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e05d      	b.n	8008d0e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008c52:	f107 0308 	add.w	r3, r7, #8
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 faa5 	bl	80091a8 <HAL_SD_GetCardStatus>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e052      	b.n	8008d0e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008c68:	7e3b      	ldrb	r3, [r7, #24]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008c6e:	7e7b      	ldrb	r3, [r7, #25]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d10a      	bne.n	8008c92 <HAL_SD_Init+0x82>
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <HAL_SD_Init+0x78>
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008c90:	e00b      	b.n	8008caa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d104      	bne.n	8008ca4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ca0:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ca2:	e002      	b.n	8008caa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fb37 	bl	8009324 <HAL_SD_ConfigWideBusOperation>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e026      	b.n	8008d0e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008cc0:	f7f9 faac 	bl	800221c <HAL_GetTick>
 8008cc4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008cc6:	e011      	b.n	8008cec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008cc8:	f7f9 faa8 	bl	800221c <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd6:	d109      	bne.n	8008cec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cde:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e010      	b.n	8008d0e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc35 	bl	800955c <HAL_SD_GetCardState>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d1e7      	bne.n	8008cc8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3728      	adds	r7, #40	@ 0x28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d18:	b590      	push	{r4, r7, lr}
 8008d1a:	b08d      	sub	sp, #52	@ 0x34
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  if (hsd->Instance == SDMMC1)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a45      	ldr	r2, [pc, #276]	@ (8008e50 <HAL_SD_InitCard+0x138>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d106      	bne.n	8008d4c <HAL_SD_InitCard+0x34>
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008d3e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8008d42:	f04f 0100 	mov.w	r1, #0
 8008d46:	f7fd fb0d 	bl	8006364 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d4a:	6278      	str	r0, [r7, #36]	@ 0x24
  if (hsd->Instance == SDMMC2)
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
  }
#endif /* SDMMC2 */
  if (sdmmc_clk == 0U)
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <HAL_SD_InitCard+0x4e>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008d60:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e070      	b.n	8008e48 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	0a1b      	lsrs	r3, r3, #8
 8008d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8008e54 <HAL_SD_InitCard+0x13c>)
 8008d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d70:	091b      	lsrs	r3, r3, #4
 8008d72:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681c      	ldr	r4, [r3, #0]
 8008d78:	466a      	mov	r2, sp
 8008d7a:	f107 0318 	add.w	r3, r7, #24
 8008d7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d82:	e882 0003 	stmia.w	r2, {r0, r1}
 8008d86:	f107 030c 	add.w	r3, r7, #12
 8008d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f002 f915 	bl	800afbc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f002 f947 	bl	800b02a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <HAL_SD_InitCard+0x96>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008db4:	4a28      	ldr	r2, [pc, #160]	@ (8008e58 <HAL_SD_InitCard+0x140>)
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7f9 fa38 	bl	8002234 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fcb7 	bl	8009738 <SD_PowerON>
 8008dca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e02e      	b.n	8008e48 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fbd6 	bl	800959c <SD_InitCard>
 8008df0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e01b      	b.n	8008e48 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f002 f99b 	bl	800b154 <SDMMC_CmdBlockLength>
 8008e1e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00f      	beq.n	8008e46 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e5c <HAL_SD_InitCard+0x144>)
 8008e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	372c      	adds	r7, #44	@ 0x2c
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd90      	pop	{r4, r7, pc}
 8008e50:	46008000 	.word	0x46008000
 8008e54:	014f8b59 	.word	0x014f8b59
 8008e58:	00012110 	.word	0x00012110
 8008e5c:	1fe00fff 	.word	0x1fe00fff

08008e60 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e6e:	0f9b      	lsrs	r3, r3, #30
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e7a:	0e9b      	lsrs	r3, r3, #26
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e8c:	0e1b      	lsrs	r3, r3, #24
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e9e:	0c1b      	lsrs	r3, r3, #16
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ec0:	0d1b      	lsrs	r3, r3, #20
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ecc:	0c1b      	lsrs	r3, r3, #16
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 030f 	and.w	r3, r3, #15
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ede:	0bdb      	lsrs	r3, r3, #15
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef0:	0b9b      	lsrs	r3, r3, #14
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f02:	0b5b      	lsrs	r3, r3, #13
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f14:	0b1b      	lsrs	r3, r3, #12
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2200      	movs	r2, #0
 8008f26:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d163      	bne.n	8008ff8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f34:	009a      	lsls	r2, r3, #2
 8008f36:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008f40:	0f92      	lsrs	r2, r2, #30
 8008f42:	431a      	orrs	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f4c:	0edb      	lsrs	r3, r3, #27
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f5e:	0e1b      	lsrs	r3, r3, #24
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f70:	0d5b      	lsrs	r3, r3, #21
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f82:	0c9b      	lsrs	r3, r3, #18
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f94:	0bdb      	lsrs	r3, r3, #15
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	7e1b      	ldrb	r3, [r3, #24]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	3302      	adds	r3, #2
 8008fb8:	2201      	movs	r2, #1
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008fc2:	fb03 f202 	mul.w	r2, r3, r2
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	7a1b      	ldrb	r3, [r3, #8]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	409a      	lsls	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008fe4:	0a52      	lsrs	r2, r2, #9
 8008fe6:	fb03 f202 	mul.w	r2, r3, r2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ff4:	655a      	str	r2, [r3, #84]	@ 0x54
 8008ff6:	e031      	b.n	800905c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d11d      	bne.n	800903c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009004:	041b      	lsls	r3, r3, #16
 8009006:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800900e:	0c1b      	lsrs	r3, r3, #16
 8009010:	431a      	orrs	r2, r3
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	3301      	adds	r3, #1
 800901c:	029a      	lsls	r2, r3, #10
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009030:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	655a      	str	r2, [r3, #84]	@ 0x54
 800903a:	e00f      	b.n	800905c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a58      	ldr	r2, [pc, #352]	@ (80091a4 <HAL_SD_GetCardCSD+0x344>)
 8009042:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009048:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e09d      	b.n	8009198 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009060:	0b9b      	lsrs	r3, r3, #14
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	b2da      	uxtb	r2, r3
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009072:	09db      	lsrs	r3, r3, #7
 8009074:	b2db      	uxtb	r3, r3
 8009076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800907a:	b2da      	uxtb	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009084:	b2db      	uxtb	r3, r3
 8009086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800908a:	b2da      	uxtb	r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009094:	0fdb      	lsrs	r3, r3, #31
 8009096:	b2da      	uxtb	r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090a0:	0f5b      	lsrs	r3, r3, #29
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090b2:	0e9b      	lsrs	r3, r3, #26
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090c4:	0d9b      	lsrs	r3, r3, #22
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090d6:	0d5b      	lsrs	r3, r3, #21
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090f2:	0c1b      	lsrs	r3, r3, #16
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009106:	0bdb      	lsrs	r3, r3, #15
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800911a:	0b9b      	lsrs	r3, r3, #14
 800911c:	b2db      	uxtb	r3, r3
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	b2da      	uxtb	r2, r3
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800912e:	0b5b      	lsrs	r3, r3, #13
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	b2da      	uxtb	r2, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009142:	0b1b      	lsrs	r3, r3, #12
 8009144:	b2db      	uxtb	r3, r3
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	b2da      	uxtb	r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009156:	0a9b      	lsrs	r3, r3, #10
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	b2da      	uxtb	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800916a:	0a1b      	lsrs	r3, r3, #8
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	b2db      	uxtb	r3, r3
 8009182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009186:	b2da      	uxtb	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	1fe00fff 	.word	0x1fe00fff

080091a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b094      	sub	sp, #80	@ 0x50
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d101      	bne.n	80091c8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e0a7      	b.n	8009318 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80091c8:	f107 0308 	add.w	r3, r7, #8
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fb40 	bl	8009854 <SD_SendSDStatus>
 80091d4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80091d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d011      	beq.n	8009200 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a4f      	ldr	r2, [pc, #316]	@ (8009320 <HAL_SD_GetCardStatus+0x178>)
 80091e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ea:	431a      	orrs	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80091fe:	e070      	b.n	80092e2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	099b      	lsrs	r3, r3, #6
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	b2da      	uxtb	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	b2da      	uxtb	r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	b29b      	uxth	r3, r3
 8009226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800922a:	b29a      	uxth	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	0e1b      	lsrs	r3, r3, #24
 8009230:	b29b      	uxth	r3, r3
 8009232:	4313      	orrs	r3, r2
 8009234:	b29a      	uxth	r2, r3
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	061a      	lsls	r2, r3, #24
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009246:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	0a1b      	lsrs	r3, r3, #8
 800924c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009250:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	0e1b      	lsrs	r3, r3, #24
 8009256:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	b2da      	uxtb	r2, r3
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	0a1b      	lsrs	r3, r3, #8
 8009268:	b2da      	uxtb	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	0d1b      	lsrs	r3, r3, #20
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 030f 	and.w	r3, r3, #15
 8009278:	b2da      	uxtb	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	0c1b      	lsrs	r3, r3, #16
 8009282:	b29b      	uxth	r3, r3
 8009284:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009288:	b29a      	uxth	r2, r3
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	b29b      	uxth	r3, r3
 800928e:	b2db      	uxtb	r3, r3
 8009290:	b29b      	uxth	r3, r3
 8009292:	4313      	orrs	r3, r2
 8009294:	b29a      	uxth	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	0a9b      	lsrs	r3, r3, #10
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	0a1b      	lsrs	r3, r3, #8
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f003 0303 	and.w	r3, r3, #3
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	091b      	lsrs	r3, r3, #4
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	0e1b      	lsrs	r3, r3, #24
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092ea:	4618      	mov	r0, r3
 80092ec:	f001 ff32 	bl	800b154 <SDMMC_CmdBlockLength>
 80092f0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80092f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00d      	beq.n	8009314 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a08      	ldr	r2, [pc, #32]	@ (8009320 <HAL_SD_GetCardStatus+0x178>)
 80092fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009304:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8009314:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009318:	4618      	mov	r0, r3
 800931a:	3750      	adds	r7, #80	@ 0x50
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	1fe00fff 	.word	0x1fe00fff

08009324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b08d      	sub	sp, #52	@ 0x34
 8009328:	af02      	add	r7, sp, #8
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2203      	movs	r2, #3
 8009338:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009340:	2b03      	cmp	r3, #3
 8009342:	d02e      	beq.n	80093a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800934a:	d106      	bne.n	800935a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009350:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	635a      	str	r2, [r3, #52]	@ 0x34
 8009358:	e029      	b.n	80093ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009360:	d10a      	bne.n	8009378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb6e 	bl	8009a44 <SD_WideBus_Enable>
 8009368:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	635a      	str	r2, [r3, #52]	@ 0x34
 8009376:	e01a      	b.n	80093ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fbab 	bl	8009ada <SD_WideBus_Disable>
 8009384:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	431a      	orrs	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	635a      	str	r2, [r3, #52]	@ 0x34
 8009392:	e00c      	b.n	80093ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009398:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	635a      	str	r2, [r3, #52]	@ 0x34
 80093a0:	e005      	b.n	80093ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d007      	beq.n	80093c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a63      	ldr	r2, [pc, #396]	@ (8009548 <HAL_SD_ConfigWideBusOperation+0x224>)
 80093bc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093c4:	e09e      	b.n	8009504 <HAL_SD_ConfigWideBusOperation+0x1e0>
  }
  else
  {
    if (hsd->Instance == SDMMC1)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a60      	ldr	r2, [pc, #384]	@ (800954c <HAL_SD_ConfigWideBusOperation+0x228>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d107      	bne.n	80093e0 <HAL_SD_ConfigWideBusOperation+0xbc>
    {
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80093d0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80093d4:	f04f 0100 	mov.w	r1, #0
 80093d8:	f7fc ffc4 	bl	8006364 <HAL_RCCEx_GetPeriphCLKFreq>
 80093dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80093de:	e001      	b.n	80093e4 <HAL_SD_ConfigWideBusOperation+0xc0>
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
    }
#endif /* SDMMC2 */
    else
    {
      sdmmc_clk = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (sdmmc_clk != 0U)
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 8083 	beq.w	80094f2 <HAL_SD_ConfigWideBusOperation+0x1ce>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	695a      	ldr	r2, [r3, #20]
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	4951      	ldr	r1, [pc, #324]	@ (8009550 <HAL_SD_ConfigWideBusOperation+0x22c>)
 800940a:	fba1 1303 	umull	r1, r3, r1, r3
 800940e:	0e1b      	lsrs	r3, r3, #24
 8009410:	429a      	cmp	r2, r3
 8009412:	d303      	bcc.n	800941c <HAL_SD_ConfigWideBusOperation+0xf8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	61bb      	str	r3, [r7, #24]
 800941a:	e05a      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009424:	d103      	bne.n	800942e <HAL_SD_ConfigWideBusOperation+0x10a>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	61bb      	str	r3, [r7, #24]
 800942c:	e051      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009436:	d126      	bne.n	8009486 <HAL_SD_ConfigWideBusOperation+0x162>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10e      	bne.n	800945e <HAL_SD_ConfigWideBusOperation+0x13a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	4a44      	ldr	r2, [pc, #272]	@ (8009554 <HAL_SD_ConfigWideBusOperation+0x230>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d906      	bls.n	8009456 <HAL_SD_ConfigWideBusOperation+0x132>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944a:	4a41      	ldr	r2, [pc, #260]	@ (8009550 <HAL_SD_ConfigWideBusOperation+0x22c>)
 800944c:	fba2 2303 	umull	r2, r3, r2, r3
 8009450:	0e5b      	lsrs	r3, r3, #25
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	e03d      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	61bb      	str	r3, [r7, #24]
 800945c:	e039      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009466:	fbb2 f3f3 	udiv	r3, r2, r3
 800946a:	4a3a      	ldr	r2, [pc, #232]	@ (8009554 <HAL_SD_ConfigWideBusOperation+0x230>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d906      	bls.n	800947e <HAL_SD_ConfigWideBusOperation+0x15a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	4a37      	ldr	r2, [pc, #220]	@ (8009550 <HAL_SD_ConfigWideBusOperation+0x22c>)
 8009474:	fba2 2303 	umull	r2, r3, r2, r3
 8009478:	0e5b      	lsrs	r3, r3, #25
 800947a:	61bb      	str	r3, [r7, #24]
 800947c:	e029      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	61bb      	str	r3, [r7, #24]
 8009484:	e025      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10e      	bne.n	80094ac <HAL_SD_ConfigWideBusOperation+0x188>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	4a31      	ldr	r2, [pc, #196]	@ (8009558 <HAL_SD_ConfigWideBusOperation+0x234>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d906      	bls.n	80094a4 <HAL_SD_ConfigWideBusOperation+0x180>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009498:	4a2d      	ldr	r2, [pc, #180]	@ (8009550 <HAL_SD_ConfigWideBusOperation+0x22c>)
 800949a:	fba2 2303 	umull	r2, r3, r2, r3
 800949e:	0e1b      	lsrs	r3, r3, #24
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	e016      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	61bb      	str	r3, [r7, #24]
 80094aa:	e012      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b8:	4a27      	ldr	r2, [pc, #156]	@ (8009558 <HAL_SD_ConfigWideBusOperation+0x234>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d906      	bls.n	80094cc <HAL_SD_ConfigWideBusOperation+0x1a8>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	4a23      	ldr	r2, [pc, #140]	@ (8009550 <HAL_SD_ConfigWideBusOperation+0x22c>)
 80094c2:	fba2 2303 	umull	r2, r3, r2, r3
 80094c6:	0e1b      	lsrs	r3, r3, #24
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	e002      	b.n	80094d2 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681c      	ldr	r4, [r3, #0]
 80094d6:	466a      	mov	r2, sp
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094ea:	4620      	mov	r0, r4
 80094ec:	f001 fd66 	bl	800afbc <SDMMC_Init>
 80094f0:	e008      	b.n	8009504 <HAL_SD_ConfigWideBusOperation+0x1e0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800950c:	4618      	mov	r0, r3
 800950e:	f001 fe21 	bl	800b154 <SDMMC_CmdBlockLength>
 8009512:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00c      	beq.n	8009534 <HAL_SD_ConfigWideBusOperation+0x210>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a0a      	ldr	r2, [pc, #40]	@ (8009548 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009520:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	431a      	orrs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800953c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009540:	4618      	mov	r0, r3
 8009542:	372c      	adds	r7, #44	@ 0x2c
 8009544:	46bd      	mov	sp, r7
 8009546:	bd90      	pop	{r4, r7, pc}
 8009548:	1fe00fff 	.word	0x1fe00fff
 800954c:	46008000 	.word	0x46008000
 8009550:	55e63b89 	.word	0x55e63b89
 8009554:	02faf080 	.word	0x02faf080
 8009558:	017d7840 	.word	0x017d7840

0800955c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009568:	f107 030c 	add.w	r3, r7, #12
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa40 	bl	80099f4 <SD_SendStatus>
 8009574:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	0a5b      	lsrs	r3, r3, #9
 800958c:	f003 030f 	and.w	r3, r3, #15
 8009590:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009592:	693b      	ldr	r3, [r7, #16]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3718      	adds	r7, #24
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b090      	sub	sp, #64	@ 0x40
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80095a8:	f7f8 fe38 	bl	800221c <HAL_GetTick>
 80095ac:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 fd4a 	bl	800b04c <SDMMC_GetPowerState>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80095c2:	e0b5      	b.n	8009730 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d02e      	beq.n	800962a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f001 fecb 	bl	800b36c <SDMMC_CmdSendCID>
 80095d6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <SD_InitCard+0x46>
    {
      return errorstate;
 80095de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e0:	e0a6      	b.n	8009730 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 fd74 	bl	800b0d6 <SDMMC_GetResponse>
 80095ee:	4602      	mov	r2, r0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2104      	movs	r1, #4
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fd6b 	bl	800b0d6 <SDMMC_GetResponse>
 8009600:	4602      	mov	r2, r0
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2108      	movs	r1, #8
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fd62 	bl	800b0d6 <SDMMC_GetResponse>
 8009612:	4602      	mov	r2, r0
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	210c      	movs	r1, #12
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fd59 	bl	800b0d6 <SDMMC_GetResponse>
 8009624:	4602      	mov	r2, r0
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962e:	2b03      	cmp	r3, #3
 8009630:	d01d      	beq.n	800966e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009632:	e019      	b.n	8009668 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f107 020a 	add.w	r2, r7, #10
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fed3 	bl	800b3ea <SDMMC_CmdSetRelAdd>
 8009644:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <SD_InitCard+0xb4>
      {
        return errorstate;
 800964c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964e:	e06f      	b.n	8009730 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009650:	f7f8 fde4 	bl	800221c <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800965e:	4293      	cmp	r3, r2
 8009660:	d902      	bls.n	8009668 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009662:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009666:	e063      	b.n	8009730 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009668:	897b      	ldrh	r3, [r7, #10]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0e2      	beq.n	8009634 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009672:	2b03      	cmp	r3, #3
 8009674:	d036      	beq.n	80096e4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009676:	897b      	ldrh	r3, [r7, #10]
 8009678:	461a      	mov	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009686:	041b      	lsls	r3, r3, #16
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f001 fe8d 	bl	800b3aa <SDMMC_CmdSendCSD>
 8009690:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <SD_InitCard+0x100>
    {
      return errorstate;
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	e049      	b.n	8009730 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2100      	movs	r1, #0
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fd17 	bl	800b0d6 <SDMMC_GetResponse>
 80096a8:	4602      	mov	r2, r0
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2104      	movs	r1, #4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 fd0e 	bl	800b0d6 <SDMMC_GetResponse>
 80096ba:	4602      	mov	r2, r0
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2108      	movs	r1, #8
 80096c6:	4618      	mov	r0, r3
 80096c8:	f001 fd05 	bl	800b0d6 <SDMMC_GetResponse>
 80096cc:	4602      	mov	r2, r0
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	210c      	movs	r1, #12
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fcfc 	bl	800b0d6 <SDMMC_GetResponse>
 80096de:	4602      	mov	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2104      	movs	r1, #4
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fcf3 	bl	800b0d6 <SDMMC_GetResponse>
 80096f0:	4603      	mov	r3, r0
 80096f2:	0d1a      	lsrs	r2, r3, #20
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80096f8:	f107 030c 	add.w	r3, r7, #12
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff fbae 	bl	8008e60 <HAL_SD_GetCardCSD>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800970a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800970e:	e00f      	b.n	8009730 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f001 fd3c 	bl	800b19a <SDMMC_CmdSelDesel>
 8009722:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <SD_InitCard+0x192>
  {
    return errorstate;
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	e000      	b.n	8009730 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3740      	adds	r7, #64	@ 0x40
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f001 fd45 	bl	800b1e0 <SDMMC_CmdGoIdleState>
 8009756:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <SD_PowerON+0x2a>
  {
    return errorstate;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	e072      	b.n	8009848 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f001 fd58 	bl	800b21c <SDMMC_CmdOperCond>
 800976c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009774:	d10d      	bne.n	8009792 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f001 fd2d 	bl	800b1e0 <SDMMC_CmdGoIdleState>
 8009786:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <SD_PowerON+0x60>
    {
      return errorstate;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	e05a      	b.n	8009848 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979c:	2b01      	cmp	r3, #1
 800979e:	d137      	bne.n	8009810 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2100      	movs	r1, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 fd58 	bl	800b25c <SDMMC_CmdAppCommand>
 80097ac:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d02d      	beq.n	8009810 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097b4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80097b8:	e046      	b.n	8009848 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 fd4b 	bl	800b25c <SDMMC_CmdAppCommand>
 80097c6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <SD_PowerON+0x9a>
    {
      return errorstate;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	e03a      	b.n	8009848 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	491e      	ldr	r1, [pc, #120]	@ (8009850 <SD_PowerON+0x118>)
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fd62 	bl	800b2a2 <SDMMC_CmdAppOperCommand>
 80097de:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80097ea:	e02d      	b.n	8009848 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2100      	movs	r1, #0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 fc6f 	bl	800b0d6 <SDMMC_GetResponse>
 80097f8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	0fdb      	lsrs	r3, r3, #31
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <SD_PowerON+0xce>
 8009802:	2301      	movs	r3, #1
 8009804:	e000      	b.n	8009808 <SD_PowerON+0xd0>
 8009806:	2300      	movs	r3, #0
 8009808:	613b      	str	r3, [r7, #16]

    count++;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	3301      	adds	r3, #1
 800980e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009816:	4293      	cmp	r3, r2
 8009818:	d802      	bhi.n	8009820 <SD_PowerON+0xe8>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0cc      	beq.n	80097ba <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009826:	4293      	cmp	r3, r2
 8009828:	d902      	bls.n	8009830 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800982a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800982e:	e00b      	b.n	8009848 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	c1100000 	.word	0xc1100000

08009854 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08c      	sub	sp, #48	@ 0x30
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800985e:	f7f8 fcdd 	bl	800221c <HAL_GetTick>
 8009862:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fc31 	bl	800b0d6 <SDMMC_GetResponse>
 8009874:	4603      	mov	r3, r0
 8009876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800987a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800987e:	d102      	bne.n	8009886 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009880:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009884:	e0b0      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2140      	movs	r1, #64	@ 0x40
 800988c:	4618      	mov	r0, r3
 800988e:	f001 fc61 	bl	800b154 <SDMMC_CmdBlockLength>
 8009892:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	e0a0      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ae:	041b      	lsls	r3, r3, #16
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f001 fcd2 	bl	800b25c <SDMMC_CmdAppCommand>
 80098b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	e08d      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098cc:	f04f 33ff 	mov.w	r3, #4294967295
 80098d0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80098d2:	2340      	movs	r3, #64	@ 0x40
 80098d4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80098d6:	2360      	movs	r3, #96	@ 0x60
 80098d8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098da:	2302      	movs	r3, #2
 80098dc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80098e2:	2301      	movs	r3, #1
 80098e4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f107 0208 	add.w	r2, r7, #8
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fc03 	bl	800b0fc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 fdba 	bl	800b474 <SDMMC_CmdStatusRegister>
 8009900:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d02b      	beq.n	8009960 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	e069      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d013      	beq.n	800994a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009922:	2300      	movs	r3, #0
 8009924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009926:	e00d      	b.n	8009944 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4618      	mov	r0, r3
 800992e:	f001 fb6f 	bl	800b010 <SDMMC_ReadFIFO>
 8009932:	4602      	mov	r2, r0
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	601a      	str	r2, [r3, #0]
        pData++;
 8009938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993a:	3304      	adds	r3, #4
 800993c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800993e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009940:	3301      	adds	r3, #1
 8009942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009946:	2b07      	cmp	r3, #7
 8009948:	d9ee      	bls.n	8009928 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800994a:	f7f8 fc67 	bl	800221c <HAL_GetTick>
 800994e:	4602      	mov	r2, r0
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009958:	d102      	bne.n	8009960 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800995a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800995e:	e043      	b.n	80099e8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009966:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0d2      	beq.n	8009914 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009974:	f003 0308 	and.w	r3, r3, #8
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800997c:	2308      	movs	r3, #8
 800997e:	e033      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800998e:	2302      	movs	r3, #2
 8009990:	e02a      	b.n	80099e8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d017      	beq.n	80099d0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80099a0:	2320      	movs	r3, #32
 80099a2:	e021      	b.n	80099e8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fb31 	bl	800b010 <SDMMC_ReadFIFO>
 80099ae:	4602      	mov	r2, r0
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	601a      	str	r2, [r3, #0]
    pData++;
 80099b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b6:	3304      	adds	r3, #4
 80099b8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80099ba:	f7f8 fc2f 	bl	800221c <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c8:	d102      	bne.n	80099d0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80099ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80099ce:	e00b      	b.n	80099e8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e2      	bne.n	80099a4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a03      	ldr	r2, [pc, #12]	@ (80099f0 <SD_SendSDStatus+0x19c>)
 80099e4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3730      	adds	r7, #48	@ 0x30
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	18000f3a 	.word	0x18000f3a

080099f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a08:	e018      	b.n	8009a3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a12:	041b      	lsls	r3, r3, #16
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f001 fd09 	bl	800b42e <SDMMC_CmdSendStatus>
 8009a1c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	e009      	b.n	8009a3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f001 fb51 	bl	800b0d6 <SDMMC_GetResponse>
 8009a34:	4602      	mov	r2, r0
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	2300      	movs	r3, #0
 8009a52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2100      	movs	r1, #0
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fb3b 	bl	800b0d6 <SDMMC_GetResponse>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a6a:	d102      	bne.n	8009a72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009a6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a70:	e02f      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009a72:	f107 030c 	add.w	r3, r7, #12
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f879 	bl	8009b70 <SD_FindSCR>
 8009a7e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	e023      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01c      	beq.n	8009ace <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	f001 fbdb 	bl	800b25c <SDMMC_CmdAppCommand>
 8009aa6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	e00f      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2102      	movs	r1, #2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 fc12 	bl	800b2e2 <SDMMC_CmdBusWidth>
 8009abe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	e003      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	e001      	b.n	8009ad2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ace:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2100      	movs	r1, #0
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 faf0 	bl	800b0d6 <SDMMC_GetResponse>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b00:	d102      	bne.n	8009b08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b06:	e02f      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b08:	f107 030c 	add.w	r3, r7, #12
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f82e 	bl	8009b70 <SD_FindSCR>
 8009b14:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	e023      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d01c      	beq.n	8009b64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f001 fb90 	bl	800b25c <SDMMC_CmdAppCommand>
 8009b3c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	e00f      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 fbc7 	bl	800b2e2 <SDMMC_CmdBusWidth>
 8009b54:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	e003      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e001      	b.n	8009b68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b64:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08e      	sub	sp, #56	@ 0x38
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b7a:	f7f8 fb4f 	bl	800221c <HAL_GetTick>
 8009b7e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009b84:	2300      	movs	r3, #0
 8009b86:	60bb      	str	r3, [r7, #8]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2108      	movs	r1, #8
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 fadc 	bl	800b154 <SDMMC_CmdBlockLength>
 8009b9c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	e0ad      	b.n	8009d04 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bb0:	041b      	lsls	r3, r3, #16
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f001 fb51 	bl	800b25c <SDMMC_CmdAppCommand>
 8009bba:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc4:	e09e      	b.n	8009d04 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009bcc:	2308      	movs	r3, #8
 8009bce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009bd0:	2330      	movs	r3, #48	@ 0x30
 8009bd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f107 0210 	add.w	r2, r7, #16
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 fa86 	bl	800b0fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 fb97 	bl	800b328 <SDMMC_CmdSendSCR>
 8009bfa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d027      	beq.n	8009c52 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	e07e      	b.n	8009d04 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d113      	bne.n	8009c3c <SD_FindSCR+0xcc>
 8009c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d110      	bne.n	8009c3c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 f9f6 	bl	800b010 <SDMMC_ReadFIFO>
 8009c24:	4603      	mov	r3, r0
 8009c26:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f001 f9ef 	bl	800b010 <SDMMC_ReadFIFO>
 8009c32:	4603      	mov	r3, r0
 8009c34:	60fb      	str	r3, [r7, #12]
      index++;
 8009c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c38:	3301      	adds	r3, #1
 8009c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009c3c:	f7f8 faee 	bl	800221c <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4a:	d102      	bne.n	8009c52 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c50:	e058      	b.n	8009d04 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c58:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0d1      	beq.n	8009c06 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c68:	f003 0308 	and.w	r3, r3, #8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2208      	movs	r2, #8
 8009c76:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c78:	2308      	movs	r3, #8
 8009c7a:	e043      	b.n	8009d04 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c92:	2302      	movs	r3, #2
 8009c94:	e036      	b.n	8009d04 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009cac:	2320      	movs	r3, #32
 8009cae:	e029      	b.n	8009d04 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a15      	ldr	r2, [pc, #84]	@ (8009d0c <SD_FindSCR+0x19c>)
 8009cb6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	061a      	lsls	r2, r3, #24
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009cc4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	0a1b      	lsrs	r3, r3, #8
 8009cca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009cce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	0e1b      	lsrs	r3, r3, #24
 8009cd4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd8:	601a      	str	r2, [r3, #0]
    scr++;
 8009cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cdc:	3304      	adds	r3, #4
 8009cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	061a      	lsls	r2, r3, #24
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009cec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009cf6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	0e1b      	lsrs	r3, r3, #24
 8009cfc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d00:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3738      	adds	r7, #56	@ 0x38
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	18000f3a 	.word	0x18000f3a

08009d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e049      	b.n	8009db6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d106      	bne.n	8009d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7f7 ff4e 	bl	8001bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	f000 fac8 	bl	800a2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e049      	b.n	8009e64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d106      	bne.n	8009dea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f841 	bl	8009e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2202      	movs	r2, #2
 8009dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f000 fa71 	bl	800a2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d101      	bne.n	8009e9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	e0ff      	b.n	800a09e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b14      	cmp	r3, #20
 8009eaa:	f200 80f0 	bhi.w	800a08e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009eae:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb4:	08009f09 	.word	0x08009f09
 8009eb8:	0800a08f 	.word	0x0800a08f
 8009ebc:	0800a08f 	.word	0x0800a08f
 8009ec0:	0800a08f 	.word	0x0800a08f
 8009ec4:	08009f49 	.word	0x08009f49
 8009ec8:	0800a08f 	.word	0x0800a08f
 8009ecc:	0800a08f 	.word	0x0800a08f
 8009ed0:	0800a08f 	.word	0x0800a08f
 8009ed4:	08009f8b 	.word	0x08009f8b
 8009ed8:	0800a08f 	.word	0x0800a08f
 8009edc:	0800a08f 	.word	0x0800a08f
 8009ee0:	0800a08f 	.word	0x0800a08f
 8009ee4:	08009fcb 	.word	0x08009fcb
 8009ee8:	0800a08f 	.word	0x0800a08f
 8009eec:	0800a08f 	.word	0x0800a08f
 8009ef0:	0800a08f 	.word	0x0800a08f
 8009ef4:	0800a00d 	.word	0x0800a00d
 8009ef8:	0800a08f 	.word	0x0800a08f
 8009efc:	0800a08f 	.word	0x0800a08f
 8009f00:	0800a08f 	.word	0x0800a08f
 8009f04:	0800a04d 	.word	0x0800a04d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68b9      	ldr	r1, [r7, #8]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 fb12 	bl	800a538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699a      	ldr	r2, [r3, #24]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 0208 	orr.w	r2, r2, #8
 8009f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	699a      	ldr	r2, [r3, #24]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0204 	bic.w	r2, r2, #4
 8009f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6999      	ldr	r1, [r3, #24]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	691a      	ldr	r2, [r3, #16]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	619a      	str	r2, [r3, #24]
      break;
 8009f46:	e0a5      	b.n	800a094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 fbb4 	bl	800a6bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	699a      	ldr	r2, [r3, #24]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	699a      	ldr	r2, [r3, #24]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6999      	ldr	r1, [r3, #24]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	021a      	lsls	r2, r3, #8
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	619a      	str	r2, [r3, #24]
      break;
 8009f88:	e084      	b.n	800a094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68b9      	ldr	r1, [r7, #8]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 fc43 	bl	800a81c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f042 0208 	orr.w	r2, r2, #8
 8009fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69da      	ldr	r2, [r3, #28]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 0204 	bic.w	r2, r2, #4
 8009fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69d9      	ldr	r1, [r3, #28]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	61da      	str	r2, [r3, #28]
      break;
 8009fc8:	e064      	b.n	800a094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fcd1 	bl	800a978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	69da      	ldr	r2, [r3, #28]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69d9      	ldr	r1, [r3, #28]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	021a      	lsls	r2, r3, #8
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	61da      	str	r2, [r3, #28]
      break;
 800a00a:	e043      	b.n	800a094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68b9      	ldr	r1, [r7, #8]
 800a012:	4618      	mov	r0, r3
 800a014:	f000 fd60 	bl	800aad8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f042 0208 	orr.w	r2, r2, #8
 800a026:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0204 	bic.w	r2, r2, #4
 800a036:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a04a:	e023      	b.n	800a094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68b9      	ldr	r1, [r7, #8]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 fdc2 	bl	800abdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a066:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a076:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	021a      	lsls	r2, r3, #8
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	430a      	orrs	r2, r1
 800a08a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a08c:	e002      	b.n	800a094 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	75fb      	strb	r3, [r7, #23]
      break;
 800a092:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop

0800a0a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d101      	bne.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1c>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e0fe      	b.n	800a2c2 <HAL_TIM_ConfigClockSource+0x21a>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a0e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a0e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a100:	f000 80c9 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a108:	f200 80ce 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a10c:	4a6f      	ldr	r2, [pc, #444]	@ (800a2cc <HAL_TIM_ConfigClockSource+0x224>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	f000 80c1 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a114:	4a6d      	ldr	r2, [pc, #436]	@ (800a2cc <HAL_TIM_ConfigClockSource+0x224>)
 800a116:	4293      	cmp	r3, r2
 800a118:	f200 80c6 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a11c:	4a6c      	ldr	r2, [pc, #432]	@ (800a2d0 <HAL_TIM_ConfigClockSource+0x228>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	f000 80b9 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a124:	4a6a      	ldr	r2, [pc, #424]	@ (800a2d0 <HAL_TIM_ConfigClockSource+0x228>)
 800a126:	4293      	cmp	r3, r2
 800a128:	f200 80be 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a12c:	4a69      	ldr	r2, [pc, #420]	@ (800a2d4 <HAL_TIM_ConfigClockSource+0x22c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	f000 80b1 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a134:	4a67      	ldr	r2, [pc, #412]	@ (800a2d4 <HAL_TIM_ConfigClockSource+0x22c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	f200 80b6 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a13c:	4a66      	ldr	r2, [pc, #408]	@ (800a2d8 <HAL_TIM_ConfigClockSource+0x230>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	f000 80a9 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a144:	4a64      	ldr	r2, [pc, #400]	@ (800a2d8 <HAL_TIM_ConfigClockSource+0x230>)
 800a146:	4293      	cmp	r3, r2
 800a148:	f200 80ae 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a14c:	4a63      	ldr	r2, [pc, #396]	@ (800a2dc <HAL_TIM_ConfigClockSource+0x234>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	f000 80a1 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a154:	4a61      	ldr	r2, [pc, #388]	@ (800a2dc <HAL_TIM_ConfigClockSource+0x234>)
 800a156:	4293      	cmp	r3, r2
 800a158:	f200 80a6 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a15c:	4a60      	ldr	r2, [pc, #384]	@ (800a2e0 <HAL_TIM_ConfigClockSource+0x238>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	f000 8099 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a164:	4a5e      	ldr	r2, [pc, #376]	@ (800a2e0 <HAL_TIM_ConfigClockSource+0x238>)
 800a166:	4293      	cmp	r3, r2
 800a168:	f200 809e 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a16c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a170:	f000 8091 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a174:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a178:	f200 8096 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a17c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a180:	f000 8089 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a188:	f200 808e 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a18c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a190:	d03e      	beq.n	800a210 <HAL_TIM_ConfigClockSource+0x168>
 800a192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a196:	f200 8087 	bhi.w	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a19a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a19e:	f000 8086 	beq.w	800a2ae <HAL_TIM_ConfigClockSource+0x206>
 800a1a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a6:	d87f      	bhi.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a1a8:	2b70      	cmp	r3, #112	@ 0x70
 800a1aa:	d01a      	beq.n	800a1e2 <HAL_TIM_ConfigClockSource+0x13a>
 800a1ac:	2b70      	cmp	r3, #112	@ 0x70
 800a1ae:	d87b      	bhi.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a1b0:	2b60      	cmp	r3, #96	@ 0x60
 800a1b2:	d050      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x1ae>
 800a1b4:	2b60      	cmp	r3, #96	@ 0x60
 800a1b6:	d877      	bhi.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a1b8:	2b50      	cmp	r3, #80	@ 0x50
 800a1ba:	d03c      	beq.n	800a236 <HAL_TIM_ConfigClockSource+0x18e>
 800a1bc:	2b50      	cmp	r3, #80	@ 0x50
 800a1be:	d873      	bhi.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a1c0:	2b40      	cmp	r3, #64	@ 0x40
 800a1c2:	d058      	beq.n	800a276 <HAL_TIM_ConfigClockSource+0x1ce>
 800a1c4:	2b40      	cmp	r3, #64	@ 0x40
 800a1c6:	d86f      	bhi.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a1c8:	2b30      	cmp	r3, #48	@ 0x30
 800a1ca:	d064      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a1cc:	2b30      	cmp	r3, #48	@ 0x30
 800a1ce:	d86b      	bhi.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a1d0:	2b20      	cmp	r3, #32
 800a1d2:	d060      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a1d4:	2b20      	cmp	r3, #32
 800a1d6:	d867      	bhi.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d05c      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a1dc:	2b10      	cmp	r3, #16
 800a1de:	d05a      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x1ee>
 800a1e0:	e062      	b.n	800a2a8 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1f2:	f000 fdf3 	bl	800addc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	609a      	str	r2, [r3, #8]
      break;
 800a20e:	e04f      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a220:	f000 fddc 	bl	800addc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a232:	609a      	str	r2, [r3, #8]
      break;
 800a234:	e03c      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a242:	461a      	mov	r2, r3
 800a244:	f000 fd4e 	bl	800ace4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2150      	movs	r1, #80	@ 0x50
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fda7 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800a254:	e02c      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a262:	461a      	mov	r2, r3
 800a264:	f000 fd6d 	bl	800ad42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2160      	movs	r1, #96	@ 0x60
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fd97 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800a274:	e01c      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a282:	461a      	mov	r2, r3
 800a284:	f000 fd2e 	bl	800ace4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2140      	movs	r1, #64	@ 0x40
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fd87 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800a294:	e00c      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	f000 fd7e 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800a2a6:	e003      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ac:	e000      	b.n	800a2b0 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800a2ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	00100070 	.word	0x00100070
 800a2d0:	00100060 	.word	0x00100060
 800a2d4:	00100050 	.word	0x00100050
 800a2d8:	00100040 	.word	0x00100040
 800a2dc:	00100030 	.word	0x00100030
 800a2e0:	00100020 	.word	0x00100020

0800a2e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a7a      	ldr	r2, [pc, #488]	@ (800a4e0 <TIM_Base_SetConfig+0x1fc>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d02b      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a79      	ldr	r2, [pc, #484]	@ (800a4e4 <TIM_Base_SetConfig+0x200>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d027      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a30a:	d023      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a312:	d01f      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a74      	ldr	r2, [pc, #464]	@ (800a4e8 <TIM_Base_SetConfig+0x204>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d01b      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a73      	ldr	r2, [pc, #460]	@ (800a4ec <TIM_Base_SetConfig+0x208>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d017      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a72      	ldr	r2, [pc, #456]	@ (800a4f0 <TIM_Base_SetConfig+0x20c>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d013      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a71      	ldr	r2, [pc, #452]	@ (800a4f4 <TIM_Base_SetConfig+0x210>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d00f      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a70      	ldr	r2, [pc, #448]	@ (800a4f8 <TIM_Base_SetConfig+0x214>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00b      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a6f      	ldr	r2, [pc, #444]	@ (800a4fc <TIM_Base_SetConfig+0x218>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d007      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a6e      	ldr	r2, [pc, #440]	@ (800a500 <TIM_Base_SetConfig+0x21c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_Base_SetConfig+0x70>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a6d      	ldr	r2, [pc, #436]	@ (800a504 <TIM_Base_SetConfig+0x220>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d108      	bne.n	800a366 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a35a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a5d      	ldr	r2, [pc, #372]	@ (800a4e0 <TIM_Base_SetConfig+0x1fc>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d05b      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a5c      	ldr	r2, [pc, #368]	@ (800a4e4 <TIM_Base_SetConfig+0x200>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d057      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37c:	d053      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a384:	d04f      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a57      	ldr	r2, [pc, #348]	@ (800a4e8 <TIM_Base_SetConfig+0x204>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d04b      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a56      	ldr	r2, [pc, #344]	@ (800a4ec <TIM_Base_SetConfig+0x208>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d047      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a55      	ldr	r2, [pc, #340]	@ (800a4f0 <TIM_Base_SetConfig+0x20c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d043      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a54      	ldr	r2, [pc, #336]	@ (800a4f4 <TIM_Base_SetConfig+0x210>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d03f      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a53      	ldr	r2, [pc, #332]	@ (800a4f8 <TIM_Base_SetConfig+0x214>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d03b      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a52      	ldr	r2, [pc, #328]	@ (800a4fc <TIM_Base_SetConfig+0x218>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d037      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a51      	ldr	r2, [pc, #324]	@ (800a500 <TIM_Base_SetConfig+0x21c>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d033      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a50      	ldr	r2, [pc, #320]	@ (800a504 <TIM_Base_SetConfig+0x220>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d02f      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a4f      	ldr	r2, [pc, #316]	@ (800a508 <TIM_Base_SetConfig+0x224>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d02b      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a4e      	ldr	r2, [pc, #312]	@ (800a50c <TIM_Base_SetConfig+0x228>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d027      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a4d      	ldr	r2, [pc, #308]	@ (800a510 <TIM_Base_SetConfig+0x22c>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d023      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a4c      	ldr	r2, [pc, #304]	@ (800a514 <TIM_Base_SetConfig+0x230>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d01f      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a4b      	ldr	r2, [pc, #300]	@ (800a518 <TIM_Base_SetConfig+0x234>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d01b      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a4a      	ldr	r2, [pc, #296]	@ (800a51c <TIM_Base_SetConfig+0x238>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d017      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a49      	ldr	r2, [pc, #292]	@ (800a520 <TIM_Base_SetConfig+0x23c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d013      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a48      	ldr	r2, [pc, #288]	@ (800a524 <TIM_Base_SetConfig+0x240>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d00f      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a47      	ldr	r2, [pc, #284]	@ (800a528 <TIM_Base_SetConfig+0x244>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d00b      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a46      	ldr	r2, [pc, #280]	@ (800a52c <TIM_Base_SetConfig+0x248>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d007      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a45      	ldr	r2, [pc, #276]	@ (800a530 <TIM_Base_SetConfig+0x24c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d003      	beq.n	800a426 <TIM_Base_SetConfig+0x142>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a44      	ldr	r2, [pc, #272]	@ (800a534 <TIM_Base_SetConfig+0x250>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d108      	bne.n	800a438 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a42c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	4313      	orrs	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a20      	ldr	r2, [pc, #128]	@ (800a4e0 <TIM_Base_SetConfig+0x1fc>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d023      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a1f      	ldr	r2, [pc, #124]	@ (800a4e4 <TIM_Base_SetConfig+0x200>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d01f      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a24      	ldr	r2, [pc, #144]	@ (800a500 <TIM_Base_SetConfig+0x21c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d01b      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a23      	ldr	r2, [pc, #140]	@ (800a504 <TIM_Base_SetConfig+0x220>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d017      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a28      	ldr	r2, [pc, #160]	@ (800a520 <TIM_Base_SetConfig+0x23c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d013      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a27      	ldr	r2, [pc, #156]	@ (800a524 <TIM_Base_SetConfig+0x240>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d00f      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a26      	ldr	r2, [pc, #152]	@ (800a528 <TIM_Base_SetConfig+0x244>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d00b      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a25      	ldr	r2, [pc, #148]	@ (800a52c <TIM_Base_SetConfig+0x248>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d007      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a24      	ldr	r2, [pc, #144]	@ (800a530 <TIM_Base_SetConfig+0x24c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d003      	beq.n	800a4ac <TIM_Base_SetConfig+0x1c8>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a23      	ldr	r2, [pc, #140]	@ (800a534 <TIM_Base_SetConfig+0x250>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d103      	bne.n	800a4b4 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	691a      	ldr	r2, [r3, #16]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d105      	bne.n	800a4d2 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	f023 0201 	bic.w	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	611a      	str	r2, [r3, #16]
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	40012c00 	.word	0x40012c00
 800a4e4:	50012c00 	.word	0x50012c00
 800a4e8:	40000400 	.word	0x40000400
 800a4ec:	50000400 	.word	0x50000400
 800a4f0:	40000800 	.word	0x40000800
 800a4f4:	50000800 	.word	0x50000800
 800a4f8:	40000c00 	.word	0x40000c00
 800a4fc:	50000c00 	.word	0x50000c00
 800a500:	40013400 	.word	0x40013400
 800a504:	50013400 	.word	0x50013400
 800a508:	40001800 	.word	0x40001800
 800a50c:	50001800 	.word	0x50001800
 800a510:	40001c00 	.word	0x40001c00
 800a514:	50001c00 	.word	0x50001c00
 800a518:	40002000 	.word	0x40002000
 800a51c:	50002000 	.word	0x50002000
 800a520:	40014000 	.word	0x40014000
 800a524:	50014000 	.word	0x50014000
 800a528:	40014400 	.word	0x40014400
 800a52c:	50014400 	.word	0x50014400
 800a530:	40014800 	.word	0x40014800
 800a534:	50014800 	.word	0x50014800

0800a538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	f023 0201 	bic.w	r2, r3, #1
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f023 0303 	bic.w	r3, r3, #3
 800a572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f023 0302 	bic.w	r3, r3, #2
 800a584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a40      	ldr	r2, [pc, #256]	@ (800a694 <TIM_OC1_SetConfig+0x15c>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d023      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a3f      	ldr	r2, [pc, #252]	@ (800a698 <TIM_OC1_SetConfig+0x160>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d01f      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a3e      	ldr	r2, [pc, #248]	@ (800a69c <TIM_OC1_SetConfig+0x164>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d01b      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a3d      	ldr	r2, [pc, #244]	@ (800a6a0 <TIM_OC1_SetConfig+0x168>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d017      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a3c      	ldr	r2, [pc, #240]	@ (800a6a4 <TIM_OC1_SetConfig+0x16c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d013      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a3b      	ldr	r2, [pc, #236]	@ (800a6a8 <TIM_OC1_SetConfig+0x170>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00f      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a3a      	ldr	r2, [pc, #232]	@ (800a6ac <TIM_OC1_SetConfig+0x174>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00b      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a39      	ldr	r2, [pc, #228]	@ (800a6b0 <TIM_OC1_SetConfig+0x178>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d007      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a38      	ldr	r2, [pc, #224]	@ (800a6b4 <TIM_OC1_SetConfig+0x17c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d003      	beq.n	800a5e0 <TIM_OC1_SetConfig+0xa8>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a37      	ldr	r2, [pc, #220]	@ (800a6b8 <TIM_OC1_SetConfig+0x180>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d10c      	bne.n	800a5fa <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f023 0308 	bic.w	r3, r3, #8
 800a5e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f023 0304 	bic.w	r3, r3, #4
 800a5f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a25      	ldr	r2, [pc, #148]	@ (800a694 <TIM_OC1_SetConfig+0x15c>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d023      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a24      	ldr	r2, [pc, #144]	@ (800a698 <TIM_OC1_SetConfig+0x160>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d01f      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a23      	ldr	r2, [pc, #140]	@ (800a69c <TIM_OC1_SetConfig+0x164>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d01b      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a22      	ldr	r2, [pc, #136]	@ (800a6a0 <TIM_OC1_SetConfig+0x168>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d017      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a21      	ldr	r2, [pc, #132]	@ (800a6a4 <TIM_OC1_SetConfig+0x16c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d013      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a20      	ldr	r2, [pc, #128]	@ (800a6a8 <TIM_OC1_SetConfig+0x170>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00f      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a1f      	ldr	r2, [pc, #124]	@ (800a6ac <TIM_OC1_SetConfig+0x174>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00b      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a1e      	ldr	r2, [pc, #120]	@ (800a6b0 <TIM_OC1_SetConfig+0x178>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d007      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a1d      	ldr	r2, [pc, #116]	@ (800a6b4 <TIM_OC1_SetConfig+0x17c>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d003      	beq.n	800a64a <TIM_OC1_SetConfig+0x112>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a1c      	ldr	r2, [pc, #112]	@ (800a6b8 <TIM_OC1_SetConfig+0x180>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d111      	bne.n	800a66e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	621a      	str	r2, [r3, #32]
}
 800a688:	bf00      	nop
 800a68a:	371c      	adds	r7, #28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	40012c00 	.word	0x40012c00
 800a698:	50012c00 	.word	0x50012c00
 800a69c:	40013400 	.word	0x40013400
 800a6a0:	50013400 	.word	0x50013400
 800a6a4:	40014000 	.word	0x40014000
 800a6a8:	50014000 	.word	0x50014000
 800a6ac:	40014400 	.word	0x40014400
 800a6b0:	50014400 	.word	0x50014400
 800a6b4:	40014800 	.word	0x40014800
 800a6b8:	50014800 	.word	0x50014800

0800a6bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	f023 0210 	bic.w	r2, r3, #16
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f023 0320 	bic.w	r3, r3, #32
 800a70a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	011b      	lsls	r3, r3, #4
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	4313      	orrs	r3, r2
 800a716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a36      	ldr	r2, [pc, #216]	@ (800a7f4 <TIM_OC2_SetConfig+0x138>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00b      	beq.n	800a738 <TIM_OC2_SetConfig+0x7c>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a35      	ldr	r2, [pc, #212]	@ (800a7f8 <TIM_OC2_SetConfig+0x13c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d007      	beq.n	800a738 <TIM_OC2_SetConfig+0x7c>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a34      	ldr	r2, [pc, #208]	@ (800a7fc <TIM_OC2_SetConfig+0x140>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d003      	beq.n	800a738 <TIM_OC2_SetConfig+0x7c>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a33      	ldr	r2, [pc, #204]	@ (800a800 <TIM_OC2_SetConfig+0x144>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d10d      	bne.n	800a754 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a73e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	011b      	lsls	r3, r3, #4
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	4313      	orrs	r3, r2
 800a74a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a752:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a27      	ldr	r2, [pc, #156]	@ (800a7f4 <TIM_OC2_SetConfig+0x138>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d023      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a26      	ldr	r2, [pc, #152]	@ (800a7f8 <TIM_OC2_SetConfig+0x13c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d01f      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a25      	ldr	r2, [pc, #148]	@ (800a7fc <TIM_OC2_SetConfig+0x140>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d01b      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a24      	ldr	r2, [pc, #144]	@ (800a800 <TIM_OC2_SetConfig+0x144>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d017      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a23      	ldr	r2, [pc, #140]	@ (800a804 <TIM_OC2_SetConfig+0x148>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d013      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a22      	ldr	r2, [pc, #136]	@ (800a808 <TIM_OC2_SetConfig+0x14c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d00f      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a21      	ldr	r2, [pc, #132]	@ (800a80c <TIM_OC2_SetConfig+0x150>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d00b      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a20      	ldr	r2, [pc, #128]	@ (800a810 <TIM_OC2_SetConfig+0x154>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d007      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a1f      	ldr	r2, [pc, #124]	@ (800a814 <TIM_OC2_SetConfig+0x158>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d003      	beq.n	800a7a4 <TIM_OC2_SetConfig+0xe8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a1e      	ldr	r2, [pc, #120]	@ (800a818 <TIM_OC2_SetConfig+0x15c>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d113      	bne.n	800a7cc <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	621a      	str	r2, [r3, #32]
}
 800a7e6:	bf00      	nop
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	40012c00 	.word	0x40012c00
 800a7f8:	50012c00 	.word	0x50012c00
 800a7fc:	40013400 	.word	0x40013400
 800a800:	50013400 	.word	0x50013400
 800a804:	40014000 	.word	0x40014000
 800a808:	50014000 	.word	0x50014000
 800a80c:	40014400 	.word	0x40014400
 800a810:	50014400 	.word	0x50014400
 800a814:	40014800 	.word	0x40014800
 800a818:	50014800 	.word	0x50014800

0800a81c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a84a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f023 0303 	bic.w	r3, r3, #3
 800a856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	4313      	orrs	r3, r2
 800a874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a35      	ldr	r2, [pc, #212]	@ (800a950 <TIM_OC3_SetConfig+0x134>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00b      	beq.n	800a896 <TIM_OC3_SetConfig+0x7a>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a34      	ldr	r2, [pc, #208]	@ (800a954 <TIM_OC3_SetConfig+0x138>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d007      	beq.n	800a896 <TIM_OC3_SetConfig+0x7a>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a33      	ldr	r2, [pc, #204]	@ (800a958 <TIM_OC3_SetConfig+0x13c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d003      	beq.n	800a896 <TIM_OC3_SetConfig+0x7a>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a32      	ldr	r2, [pc, #200]	@ (800a95c <TIM_OC3_SetConfig+0x140>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d10d      	bne.n	800a8b2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a89c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a26      	ldr	r2, [pc, #152]	@ (800a950 <TIM_OC3_SetConfig+0x134>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d023      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a25      	ldr	r2, [pc, #148]	@ (800a954 <TIM_OC3_SetConfig+0x138>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d01f      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a24      	ldr	r2, [pc, #144]	@ (800a958 <TIM_OC3_SetConfig+0x13c>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d01b      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a23      	ldr	r2, [pc, #140]	@ (800a95c <TIM_OC3_SetConfig+0x140>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d017      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a22      	ldr	r2, [pc, #136]	@ (800a960 <TIM_OC3_SetConfig+0x144>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d013      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a21      	ldr	r2, [pc, #132]	@ (800a964 <TIM_OC3_SetConfig+0x148>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d00f      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a20      	ldr	r2, [pc, #128]	@ (800a968 <TIM_OC3_SetConfig+0x14c>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d00b      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a1f      	ldr	r2, [pc, #124]	@ (800a96c <TIM_OC3_SetConfig+0x150>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d007      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a1e      	ldr	r2, [pc, #120]	@ (800a970 <TIM_OC3_SetConfig+0x154>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d003      	beq.n	800a902 <TIM_OC3_SetConfig+0xe6>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a974 <TIM_OC3_SetConfig+0x158>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d113      	bne.n	800a92a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	4313      	orrs	r3, r2
 800a928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	621a      	str	r2, [r3, #32]
}
 800a944:	bf00      	nop
 800a946:	371c      	adds	r7, #28
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	40012c00 	.word	0x40012c00
 800a954:	50012c00 	.word	0x50012c00
 800a958:	40013400 	.word	0x40013400
 800a95c:	50013400 	.word	0x50013400
 800a960:	40014000 	.word	0x40014000
 800a964:	50014000 	.word	0x50014000
 800a968:	40014400 	.word	0x40014400
 800a96c:	50014400 	.word	0x50014400
 800a970:	40014800 	.word	0x40014800
 800a974:	50014800 	.word	0x50014800

0800a978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a1b      	ldr	r3, [r3, #32]
 800a98c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	021b      	lsls	r3, r3, #8
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	031b      	lsls	r3, r3, #12
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a36      	ldr	r2, [pc, #216]	@ (800aab0 <TIM_OC4_SetConfig+0x138>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d00b      	beq.n	800a9f4 <TIM_OC4_SetConfig+0x7c>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a35      	ldr	r2, [pc, #212]	@ (800aab4 <TIM_OC4_SetConfig+0x13c>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d007      	beq.n	800a9f4 <TIM_OC4_SetConfig+0x7c>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a34      	ldr	r2, [pc, #208]	@ (800aab8 <TIM_OC4_SetConfig+0x140>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d003      	beq.n	800a9f4 <TIM_OC4_SetConfig+0x7c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a33      	ldr	r2, [pc, #204]	@ (800aabc <TIM_OC4_SetConfig+0x144>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d10d      	bne.n	800aa10 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	031b      	lsls	r3, r3, #12
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a27      	ldr	r2, [pc, #156]	@ (800aab0 <TIM_OC4_SetConfig+0x138>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d023      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a26      	ldr	r2, [pc, #152]	@ (800aab4 <TIM_OC4_SetConfig+0x13c>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d01f      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a25      	ldr	r2, [pc, #148]	@ (800aab8 <TIM_OC4_SetConfig+0x140>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d01b      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a24      	ldr	r2, [pc, #144]	@ (800aabc <TIM_OC4_SetConfig+0x144>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d017      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a23      	ldr	r2, [pc, #140]	@ (800aac0 <TIM_OC4_SetConfig+0x148>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d013      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a22      	ldr	r2, [pc, #136]	@ (800aac4 <TIM_OC4_SetConfig+0x14c>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00f      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a21      	ldr	r2, [pc, #132]	@ (800aac8 <TIM_OC4_SetConfig+0x150>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d00b      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a20      	ldr	r2, [pc, #128]	@ (800aacc <TIM_OC4_SetConfig+0x154>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d007      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a1f      	ldr	r2, [pc, #124]	@ (800aad0 <TIM_OC4_SetConfig+0x158>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <TIM_OC4_SetConfig+0xe8>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a1e      	ldr	r2, [pc, #120]	@ (800aad4 <TIM_OC4_SetConfig+0x15c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d113      	bne.n	800aa88 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	019b      	lsls	r3, r3, #6
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	019b      	lsls	r3, r3, #6
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	621a      	str	r2, [r3, #32]
}
 800aaa2:	bf00      	nop
 800aaa4:	371c      	adds	r7, #28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	40012c00 	.word	0x40012c00
 800aab4:	50012c00 	.word	0x50012c00
 800aab8:	40013400 	.word	0x40013400
 800aabc:	50013400 	.word	0x50013400
 800aac0:	40014000 	.word	0x40014000
 800aac4:	50014000 	.word	0x50014000
 800aac8:	40014400 	.word	0x40014400
 800aacc:	50014400 	.word	0x50014400
 800aad0:	40014800 	.word	0x40014800
 800aad4:	50014800 	.word	0x50014800

0800aad8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ab1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a21      	ldr	r2, [pc, #132]	@ (800abb4 <TIM_OC5_SetConfig+0xdc>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d023      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a20      	ldr	r2, [pc, #128]	@ (800abb8 <TIM_OC5_SetConfig+0xe0>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d01f      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a1f      	ldr	r2, [pc, #124]	@ (800abbc <TIM_OC5_SetConfig+0xe4>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d01b      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a1e      	ldr	r2, [pc, #120]	@ (800abc0 <TIM_OC5_SetConfig+0xe8>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d017      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a1d      	ldr	r2, [pc, #116]	@ (800abc4 <TIM_OC5_SetConfig+0xec>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d013      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a1c      	ldr	r2, [pc, #112]	@ (800abc8 <TIM_OC5_SetConfig+0xf0>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d00f      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a1b      	ldr	r2, [pc, #108]	@ (800abcc <TIM_OC5_SetConfig+0xf4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d00b      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a1a      	ldr	r2, [pc, #104]	@ (800abd0 <TIM_OC5_SetConfig+0xf8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d007      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a19      	ldr	r2, [pc, #100]	@ (800abd4 <TIM_OC5_SetConfig+0xfc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d003      	beq.n	800ab7a <TIM_OC5_SetConfig+0xa2>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a18      	ldr	r2, [pc, #96]	@ (800abd8 <TIM_OC5_SetConfig+0x100>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d109      	bne.n	800ab8e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	021b      	lsls	r3, r3, #8
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	621a      	str	r2, [r3, #32]
}
 800aba8:	bf00      	nop
 800abaa:	371c      	adds	r7, #28
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	40012c00 	.word	0x40012c00
 800abb8:	50012c00 	.word	0x50012c00
 800abbc:	40013400 	.word	0x40013400
 800abc0:	50013400 	.word	0x50013400
 800abc4:	40014000 	.word	0x40014000
 800abc8:	50014000 	.word	0x50014000
 800abcc:	40014400 	.word	0x40014400
 800abd0:	50014400 	.word	0x50014400
 800abd4:	40014800 	.word	0x40014800
 800abd8:	50014800 	.word	0x50014800

0800abdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	051b      	lsls	r3, r3, #20
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a22      	ldr	r2, [pc, #136]	@ (800acbc <TIM_OC6_SetConfig+0xe0>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d023      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a21      	ldr	r2, [pc, #132]	@ (800acc0 <TIM_OC6_SetConfig+0xe4>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d01f      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a20      	ldr	r2, [pc, #128]	@ (800acc4 <TIM_OC6_SetConfig+0xe8>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d01b      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a1f      	ldr	r2, [pc, #124]	@ (800acc8 <TIM_OC6_SetConfig+0xec>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d017      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a1e      	ldr	r2, [pc, #120]	@ (800accc <TIM_OC6_SetConfig+0xf0>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d013      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a1d      	ldr	r2, [pc, #116]	@ (800acd0 <TIM_OC6_SetConfig+0xf4>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d00f      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a1c      	ldr	r2, [pc, #112]	@ (800acd4 <TIM_OC6_SetConfig+0xf8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d00b      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a1b      	ldr	r2, [pc, #108]	@ (800acd8 <TIM_OC6_SetConfig+0xfc>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d007      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a1a      	ldr	r2, [pc, #104]	@ (800acdc <TIM_OC6_SetConfig+0x100>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d003      	beq.n	800ac80 <TIM_OC6_SetConfig+0xa4>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a19      	ldr	r2, [pc, #100]	@ (800ace0 <TIM_OC6_SetConfig+0x104>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d109      	bne.n	800ac94 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	029b      	lsls	r3, r3, #10
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	621a      	str	r2, [r3, #32]
}
 800acae:	bf00      	nop
 800acb0:	371c      	adds	r7, #28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	40012c00 	.word	0x40012c00
 800acc0:	50012c00 	.word	0x50012c00
 800acc4:	40013400 	.word	0x40013400
 800acc8:	50013400 	.word	0x50013400
 800accc:	40014000 	.word	0x40014000
 800acd0:	50014000 	.word	0x50014000
 800acd4:	40014400 	.word	0x40014400
 800acd8:	50014400 	.word	0x50014400
 800acdc:	40014800 	.word	0x40014800
 800ace0:	50014800 	.word	0x50014800

0800ace4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	f023 0201 	bic.w	r2, r3, #1
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f023 030a 	bic.w	r3, r3, #10
 800ad20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b087      	sub	sp, #28
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	f023 0210 	bic.w	r2, r3, #16
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	031b      	lsls	r3, r3, #12
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	621a      	str	r2, [r3, #32]
}
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800adb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	f043 0307 	orr.w	r3, r3, #7
 800adc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	609a      	str	r2, [r3, #8]
}
 800add0:	bf00      	nop
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800addc:	b480      	push	{r7}
 800adde:	b087      	sub	sp, #28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	021a      	lsls	r2, r3, #8
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	431a      	orrs	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	609a      	str	r2, [r3, #8]
}
 800ae10:	bf00      	nop
 800ae12:	371c      	adds	r7, #28
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e0a1      	b.n	800af78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a4a      	ldr	r2, [pc, #296]	@ (800af84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00e      	beq.n	800ae7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a49      	ldr	r2, [pc, #292]	@ (800af88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d009      	beq.n	800ae7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a47      	ldr	r2, [pc, #284]	@ (800af8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d004      	beq.n	800ae7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a46      	ldr	r2, [pc, #280]	@ (800af90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d108      	bne.n	800ae8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ae94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a34      	ldr	r2, [pc, #208]	@ (800af84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d04a      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a33      	ldr	r2, [pc, #204]	@ (800af88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d045      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aec8:	d040      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aed2:	d03b      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a2e      	ldr	r2, [pc, #184]	@ (800af94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d036      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a2d      	ldr	r2, [pc, #180]	@ (800af98 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d031      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a2b      	ldr	r2, [pc, #172]	@ (800af9c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d02c      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a2a      	ldr	r2, [pc, #168]	@ (800afa0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d027      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a28      	ldr	r2, [pc, #160]	@ (800afa4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d022      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a27      	ldr	r2, [pc, #156]	@ (800afa8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d01d      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a1d      	ldr	r2, [pc, #116]	@ (800af8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d018      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a1c      	ldr	r2, [pc, #112]	@ (800af90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d013      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a20      	ldr	r2, [pc, #128]	@ (800afac <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00e      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a1f      	ldr	r2, [pc, #124]	@ (800afb0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d009      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a1d      	ldr	r2, [pc, #116]	@ (800afb4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d004      	beq.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1c      	ldr	r2, [pc, #112]	@ (800afb8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d10c      	bne.n	800af66 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	40012c00 	.word	0x40012c00
 800af88:	50012c00 	.word	0x50012c00
 800af8c:	40013400 	.word	0x40013400
 800af90:	50013400 	.word	0x50013400
 800af94:	40000400 	.word	0x40000400
 800af98:	50000400 	.word	0x50000400
 800af9c:	40000800 	.word	0x40000800
 800afa0:	50000800 	.word	0x50000800
 800afa4:	40000c00 	.word	0x40000c00
 800afa8:	50000c00 	.word	0x50000c00
 800afac:	40001800 	.word	0x40001800
 800afb0:	50001800 	.word	0x50001800
 800afb4:	40014000 	.word	0x40014000
 800afb8:	50014000 	.word	0x50014000

0800afbc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800afbc:	b084      	sub	sp, #16
 800afbe:	b480      	push	{r7}
 800afc0:	b085      	sub	sp, #20
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	f107 001c 	add.w	r0, r7, #28
 800afca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800afd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800afd4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800afd6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800afda:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800afdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800afde:	431a      	orrs	r2, r3
             Init.ClockDiv
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800afe2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	4b07      	ldr	r3, [pc, #28]	@ (800b00c <SDMMC_Init+0x50>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	431a      	orrs	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	b004      	add	sp, #16
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	ffc02c00 	.word	0xffc02c00

0800b010 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b02a:	b480      	push	{r7}
 800b02c:	b083      	sub	sp, #12
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f043 0203 	orr.w	r2, r3, #3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0303 	and.w	r3, r3, #3
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b086:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b08c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b092:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68da      	ldr	r2, [r3, #12]
 800b09e:	4b06      	ldr	r3, [pc, #24]	@ (800b0b8 <SDMMC_SendCommand+0x50>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	fffee0c0 	.word	0xfffee0c0

0800b0bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	b2db      	uxtb	r3, r3
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b085      	sub	sp, #20
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3314      	adds	r3, #20
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b122:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b128:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b12e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	4313      	orrs	r3, r2
 800b134:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	431a      	orrs	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b146:	2300      	movs	r3, #0

}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b162:	2310      	movs	r3, #16
 800b164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b176:	f107 0308 	add.w	r3, r7, #8
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff ff73 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b182:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b186:	2110      	movs	r1, #16
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f995 	bl	800b4b8 <SDMMC_GetCmdResp1>
 800b18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b190:	69fb      	ldr	r3, [r7, #28]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b088      	sub	sp, #32
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b1a8:	2307      	movs	r3, #7
 800b1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b1ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff ff50 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b1c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1cc:	2107      	movs	r1, #7
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f972 	bl	800b4b8 <SDMMC_GetCmdResp1>
 800b1d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3720      	adds	r7, #32
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b1fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1fe:	f107 0308 	add.w	r3, r7, #8
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff ff2f 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fb96 	bl	800b93c <SDMMC_GetCmdError>
 800b210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b212:	69fb      	ldr	r3, [r7, #28]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3720      	adds	r7, #32
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b088      	sub	sp, #32
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b224:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b22a:	2308      	movs	r3, #8
 800b22c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b22e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b234:	2300      	movs	r3, #0
 800b236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b23c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b23e:	f107 0308 	add.w	r3, r7, #8
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff ff0f 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fb28 	bl	800b8a0 <SDMMC_GetCmdResp7>
 800b250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b252:	69fb      	ldr	r3, [r7, #28]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3720      	adds	r7, #32
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b26a:	2337      	movs	r3, #55	@ 0x37
 800b26c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b26e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b27c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b27e:	f107 0308 	add.w	r3, r7, #8
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7ff feef 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b28a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b28e:	2137      	movs	r1, #55	@ 0x37
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f911 	bl	800b4b8 <SDMMC_GetCmdResp1>
 800b296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b298:	69fb      	ldr	r3, [r7, #28]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b088      	sub	sp, #32
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b2b0:	2329      	movs	r3, #41	@ 0x29
 800b2b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2c4:	f107 0308 	add.w	r3, r7, #8
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff fecc 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fa2d 	bl	800b730 <SDMMC_GetCmdResp3>
 800b2d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2d8:	69fb      	ldr	r3, [r7, #28]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3720      	adds	r7, #32
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b088      	sub	sp, #32
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b2f0:	2306      	movs	r3, #6
 800b2f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b302:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b304:	f107 0308 	add.w	r3, r7, #8
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff feac 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b310:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b314:	2106      	movs	r1, #6
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f8ce 	bl	800b4b8 <SDMMC_GetCmdResp1>
 800b31c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b31e:	69fb      	ldr	r3, [r7, #28]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3720      	adds	r7, #32
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b088      	sub	sp, #32
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b330:	2300      	movs	r3, #0
 800b332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b334:	2333      	movs	r3, #51	@ 0x33
 800b336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b33c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b348:	f107 0308 	add.w	r3, r7, #8
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff fe8a 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b354:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b358:	2133      	movs	r1, #51	@ 0x33
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f8ac 	bl	800b4b8 <SDMMC_GetCmdResp1>
 800b360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b362:	69fb      	ldr	r3, [r7, #28]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3720      	adds	r7, #32
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b088      	sub	sp, #32
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b378:	2302      	movs	r3, #2
 800b37a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b37c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b382:	2300      	movs	r3, #0
 800b384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b38a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b38c:	f107 0308 	add.w	r3, r7, #8
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff fe68 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f97f 	bl	800b69c <SDMMC_GetCmdResp2>
 800b39e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3a0:	69fb      	ldr	r3, [r7, #28]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3720      	adds	r7, #32
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b088      	sub	sp, #32
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b3b8:	2309      	movs	r3, #9
 800b3ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b3c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3cc:	f107 0308 	add.w	r3, r7, #8
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff fe48 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f95f 	bl	800b69c <SDMMC_GetCmdResp2>
 800b3de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3e0:	69fb      	ldr	r3, [r7, #28]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3720      	adds	r7, #32
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b088      	sub	sp, #32
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b406:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b40a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40c:	f107 0308 	add.w	r3, r7, #8
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fe28 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	2103      	movs	r1, #3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f9c7 	bl	800b7b0 <SDMMC_GetCmdResp6>
 800b422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b424:	69fb      	ldr	r3, [r7, #28]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3720      	adds	r7, #32
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b088      	sub	sp, #32
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b43c:	230d      	movs	r3, #13
 800b43e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b446:	2300      	movs	r3, #0
 800b448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b44a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b44e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b450:	f107 0308 	add.w	r3, r7, #8
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7ff fe06 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b45c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b460:	210d      	movs	r1, #13
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f828 	bl	800b4b8 <SDMMC_GetCmdResp1>
 800b468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b46a:	69fb      	ldr	r3, [r7, #28]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3720      	adds	r7, #32
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b480:	230d      	movs	r3, #13
 800b482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b48a:	2300      	movs	r3, #0
 800b48c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b48e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b492:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b494:	f107 0308 	add.w	r3, r7, #8
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7ff fde4 	bl	800b068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b4a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4a4:	210d      	movs	r1, #13
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f806 	bl	800b4b8 <SDMMC_GetCmdResp1>
 800b4ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ae:	69fb      	ldr	r3, [r7, #28]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3720      	adds	r7, #32
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b088      	sub	sp, #32
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b4c6:	4b70      	ldr	r3, [pc, #448]	@ (800b688 <SDMMC_GetCmdResp1+0x1d0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a70      	ldr	r2, [pc, #448]	@ (800b68c <SDMMC_GetCmdResp1+0x1d4>)
 800b4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b4d0:	0a5a      	lsrs	r2, r3, #9
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	fb02 f303 	mul.w	r3, r2, r3
 800b4d8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	1e5a      	subs	r2, r3, #1
 800b4de:	61fa      	str	r2, [r7, #28]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4e8:	e0c9      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ee:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	4b67      	ldr	r3, [pc, #412]	@ (800b690 <SDMMC_GetCmdResp1+0x1d8>)
 800b4f4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d0ef      	beq.n	800b4da <SDMMC_GetCmdResp1+0x22>
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1ea      	bne.n	800b4da <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b508:	f003 0304 	and.w	r3, r3, #4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2204      	movs	r2, #4
 800b514:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b516:	2304      	movs	r3, #4
 800b518:	e0b1      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2201      	movs	r2, #1
 800b52a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e0a6      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4a58      	ldr	r2, [pc, #352]	@ (800b694 <SDMMC_GetCmdResp1+0x1dc>)
 800b534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7ff fdc0 	bl	800b0bc <SDMMC_GetCommandResponse>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	7afb      	ldrb	r3, [r7, #11]
 800b542:	4293      	cmp	r3, r2
 800b544:	d001      	beq.n	800b54a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b546:	2301      	movs	r3, #1
 800b548:	e099      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b54a:	2100      	movs	r1, #0
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff fdc2 	bl	800b0d6 <SDMMC_GetResponse>
 800b552:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	4b50      	ldr	r3, [pc, #320]	@ (800b698 <SDMMC_GetCmdResp1+0x1e0>)
 800b558:	4013      	ands	r3, r2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b55e:	2300      	movs	r3, #0
 800b560:	e08d      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b00      	cmp	r3, #0
 800b566:	da02      	bge.n	800b56e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b568:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b56c:	e087      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b578:	2340      	movs	r3, #64	@ 0x40
 800b57a:	e080      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d001      	beq.n	800b58a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b586:	2380      	movs	r3, #128	@ 0x80
 800b588:	e079      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b598:	e071      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b5a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5a8:	e069      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5b8:	e061      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b5c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5c8:	e059      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5d8:	e051      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b5e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b5e8:	e049      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b5f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b5f8:	e041      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b608:	e039      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b614:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b618:	e031      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b624:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b628:	e029      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b634:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b638:	e021      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b644:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b648:	e019      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b654:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b658:	e011      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b664:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b668:	e009      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b674:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b678:	e001      	b.n	800b67e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b67a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3720      	adds	r7, #32
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20000004 	.word	0x20000004
 800b68c:	10624dd3 	.word	0x10624dd3
 800b690:	00200045 	.word	0x00200045
 800b694:	002000c5 	.word	0x002000c5
 800b698:	fdffe008 	.word	0xfdffe008

0800b69c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b6a4:	4b1f      	ldr	r3, [pc, #124]	@ (800b724 <SDMMC_GetCmdResp2+0x88>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a1f      	ldr	r2, [pc, #124]	@ (800b728 <SDMMC_GetCmdResp2+0x8c>)
 800b6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ae:	0a5b      	lsrs	r3, r3, #9
 800b6b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6b4:	fb02 f303 	mul.w	r3, r2, r3
 800b6b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	1e5a      	subs	r2, r3, #1
 800b6be:	60fa      	str	r2, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b6c8:	e026      	b.n	800b718 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d0ef      	beq.n	800b6ba <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1ea      	bne.n	800b6ba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2204      	movs	r2, #4
 800b6f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6f6:	2304      	movs	r3, #4
 800b6f8:	e00e      	b.n	800b718 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b00      	cmp	r3, #0
 800b704:	d004      	beq.n	800b710 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e003      	b.n	800b718 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a06      	ldr	r2, [pc, #24]	@ (800b72c <SDMMC_GetCmdResp2+0x90>)
 800b714:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	20000004 	.word	0x20000004
 800b728:	10624dd3 	.word	0x10624dd3
 800b72c:	002000c5 	.word	0x002000c5

0800b730 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b738:	4b1a      	ldr	r3, [pc, #104]	@ (800b7a4 <SDMMC_GetCmdResp3+0x74>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a1a      	ldr	r2, [pc, #104]	@ (800b7a8 <SDMMC_GetCmdResp3+0x78>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	0a5b      	lsrs	r3, r3, #9
 800b744:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b748:	fb02 f303 	mul.w	r3, r2, r3
 800b74c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	1e5a      	subs	r2, r3, #1
 800b752:	60fa      	str	r2, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b758:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b75c:	e01b      	b.n	800b796 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b762:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d0ef      	beq.n	800b74e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1ea      	bne.n	800b74e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b00      	cmp	r3, #0
 800b782:	d004      	beq.n	800b78e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2204      	movs	r2, #4
 800b788:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b78a:	2304      	movs	r3, #4
 800b78c:	e003      	b.n	800b796 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a06      	ldr	r2, [pc, #24]	@ (800b7ac <SDMMC_GetCmdResp3+0x7c>)
 800b792:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	20000004 	.word	0x20000004
 800b7a8:	10624dd3 	.word	0x10624dd3
 800b7ac:	002000c5 	.word	0x002000c5

0800b7b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b7be:	4b35      	ldr	r3, [pc, #212]	@ (800b894 <SDMMC_GetCmdResp6+0xe4>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a35      	ldr	r2, [pc, #212]	@ (800b898 <SDMMC_GetCmdResp6+0xe8>)
 800b7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c8:	0a5b      	lsrs	r3, r3, #9
 800b7ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7ce:	fb02 f303 	mul.w	r3, r2, r3
 800b7d2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	1e5a      	subs	r2, r3, #1
 800b7d8:	61fa      	str	r2, [r7, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7e2:	e052      	b.n	800b88a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d0ef      	beq.n	800b7d4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1ea      	bne.n	800b7d4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b802:	f003 0304 	and.w	r3, r3, #4
 800b806:	2b00      	cmp	r3, #0
 800b808:	d004      	beq.n	800b814 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2204      	movs	r2, #4
 800b80e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b810:	2304      	movs	r3, #4
 800b812:	e03a      	b.n	800b88a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d004      	beq.n	800b82a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2201      	movs	r2, #1
 800b824:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b826:	2301      	movs	r3, #1
 800b828:	e02f      	b.n	800b88a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7ff fc46 	bl	800b0bc <SDMMC_GetCommandResponse>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	4293      	cmp	r3, r2
 800b838:	d001      	beq.n	800b83e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e025      	b.n	800b88a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	4a16      	ldr	r2, [pc, #88]	@ (800b89c <SDMMC_GetCmdResp6+0xec>)
 800b842:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b844:	2100      	movs	r1, #0
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f7ff fc45 	bl	800b0d6 <SDMMC_GetResponse>
 800b84c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d106      	bne.n	800b866 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	0c1b      	lsrs	r3, r3, #16
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b862:	2300      	movs	r3, #0
 800b864:	e011      	b.n	800b88a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b874:	e009      	b.n	800b88a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b884:	e001      	b.n	800b88a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b886:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3720      	adds	r7, #32
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20000004 	.word	0x20000004
 800b898:	10624dd3 	.word	0x10624dd3
 800b89c:	002000c5 	.word	0x002000c5

0800b8a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b8a8:	4b22      	ldr	r3, [pc, #136]	@ (800b934 <SDMMC_GetCmdResp7+0x94>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a22      	ldr	r2, [pc, #136]	@ (800b938 <SDMMC_GetCmdResp7+0x98>)
 800b8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b2:	0a5b      	lsrs	r3, r3, #9
 800b8b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
 800b8bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	1e5a      	subs	r2, r3, #1
 800b8c2:	60fa      	str	r2, [r7, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8cc:	e02c      	b.n	800b928 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0ef      	beq.n	800b8be <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1ea      	bne.n	800b8be <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2204      	movs	r2, #4
 800b8f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8fa:	2304      	movs	r3, #4
 800b8fc:	e014      	b.n	800b928 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b910:	2301      	movs	r3, #1
 800b912:	e009      	b.n	800b928 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2240      	movs	r2, #64	@ 0x40
 800b924:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b926:	2300      	movs	r3, #0

}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	20000004 	.word	0x20000004
 800b938:	10624dd3 	.word	0x10624dd3

0800b93c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b944:	4b11      	ldr	r3, [pc, #68]	@ (800b98c <SDMMC_GetCmdError+0x50>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a11      	ldr	r2, [pc, #68]	@ (800b990 <SDMMC_GetCmdError+0x54>)
 800b94a:	fba2 2303 	umull	r2, r3, r2, r3
 800b94e:	0a5b      	lsrs	r3, r3, #9
 800b950:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	1e5a      	subs	r2, r3, #1
 800b95e:	60fa      	str	r2, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b964:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b968:	e009      	b.n	800b97e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b96e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b972:	2b00      	cmp	r3, #0
 800b974:	d0f1      	beq.n	800b95a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a06      	ldr	r2, [pc, #24]	@ (800b994 <SDMMC_GetCmdError+0x58>)
 800b97a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	20000004 	.word	0x20000004
 800b990:	10624dd3 	.word	0x10624dd3
 800b994:	002000c5 	.word	0x002000c5

0800b998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b0:	f043 0201 	orr.w	r2, r3, #1
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	f107 001c 	add.w	r0, r7, #28
 800b9d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e008      	b.n	800b9f4 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff ffd8 	bl	800b998 <USB_CoreReset>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9fe:	b004      	add	sp, #16
 800ba00:	4770      	bx	lr

0800ba02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b085      	sub	sp, #20
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ba0a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ba0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	43db      	mvns	r3, r3
 800ba18:	401a      	ands	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	641a      	str	r2, [r3, #64]	@ 0x40
 800ba4a:	e00b      	b.n	800ba64 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800ba4c:	78fb      	ldrb	r3, [r7, #3]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d106      	bne.n	800ba60 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	641a      	str	r2, [r3, #64]	@ 0x40
 800ba5e:	e001      	b.n	800ba64 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e000      	b.n	800ba66 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800ba72:	b084      	sub	sp, #16
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	f107 001c 	add.w	r0, r7, #28
 800ba80:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba8e:	f023 0201 	bic.w	r2, r3, #1
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800ba96:	2100      	movs	r1, #0
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff ffc7 	bl	800ba2c <USB_SetCurrentMode>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bab4:	b004      	add	sp, #16
 800bab6:	4770      	bx	lr

0800bab8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bac4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <abort>:
 800bada:	2006      	movs	r0, #6
 800badc:	b508      	push	{r3, lr}
 800bade:	f000 fd3d 	bl	800c55c <raise>
 800bae2:	2001      	movs	r0, #1
 800bae4:	f7f6 f993 	bl	8001e0e <_exit>

0800bae8 <malloc>:
 800bae8:	4b02      	ldr	r3, [pc, #8]	@ (800baf4 <malloc+0xc>)
 800baea:	4601      	mov	r1, r0
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	f000 b82d 	b.w	800bb4c <_malloc_r>
 800baf2:	bf00      	nop
 800baf4:	2000001c 	.word	0x2000001c

0800baf8 <free>:
 800baf8:	4b02      	ldr	r3, [pc, #8]	@ (800bb04 <free+0xc>)
 800bafa:	4601      	mov	r1, r0
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	f000 bde7 	b.w	800c6d0 <_free_r>
 800bb02:	bf00      	nop
 800bb04:	2000001c 	.word	0x2000001c

0800bb08 <sbrk_aligned>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	4e0f      	ldr	r6, [pc, #60]	@ (800bb48 <sbrk_aligned+0x40>)
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	4605      	mov	r5, r0
 800bb10:	6831      	ldr	r1, [r6, #0]
 800bb12:	b911      	cbnz	r1, 800bb1a <sbrk_aligned+0x12>
 800bb14:	f000 fd72 	bl	800c5fc <_sbrk_r>
 800bb18:	6030      	str	r0, [r6, #0]
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f000 fd6d 	bl	800c5fc <_sbrk_r>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	d103      	bne.n	800bb2e <sbrk_aligned+0x26>
 800bb26:	f04f 34ff 	mov.w	r4, #4294967295
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	bd70      	pop	{r4, r5, r6, pc}
 800bb2e:	1cc4      	adds	r4, r0, #3
 800bb30:	f024 0403 	bic.w	r4, r4, #3
 800bb34:	42a0      	cmp	r0, r4
 800bb36:	d0f8      	beq.n	800bb2a <sbrk_aligned+0x22>
 800bb38:	1a21      	subs	r1, r4, r0
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	f000 fd5e 	bl	800c5fc <_sbrk_r>
 800bb40:	3001      	adds	r0, #1
 800bb42:	d1f2      	bne.n	800bb2a <sbrk_aligned+0x22>
 800bb44:	e7ef      	b.n	800bb26 <sbrk_aligned+0x1e>
 800bb46:	bf00      	nop
 800bb48:	20001670 	.word	0x20001670

0800bb4c <_malloc_r>:
 800bb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb50:	1ccd      	adds	r5, r1, #3
 800bb52:	4606      	mov	r6, r0
 800bb54:	f025 0503 	bic.w	r5, r5, #3
 800bb58:	3508      	adds	r5, #8
 800bb5a:	2d0c      	cmp	r5, #12
 800bb5c:	bf38      	it	cc
 800bb5e:	250c      	movcc	r5, #12
 800bb60:	2d00      	cmp	r5, #0
 800bb62:	db01      	blt.n	800bb68 <_malloc_r+0x1c>
 800bb64:	42a9      	cmp	r1, r5
 800bb66:	d904      	bls.n	800bb72 <_malloc_r+0x26>
 800bb68:	230c      	movs	r3, #12
 800bb6a:	6033      	str	r3, [r6, #0]
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc48 <_malloc_r+0xfc>
 800bb76:	f000 f869 	bl	800bc4c <__malloc_lock>
 800bb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb7e:	461c      	mov	r4, r3
 800bb80:	bb44      	cbnz	r4, 800bbd4 <_malloc_r+0x88>
 800bb82:	4629      	mov	r1, r5
 800bb84:	4630      	mov	r0, r6
 800bb86:	f7ff ffbf 	bl	800bb08 <sbrk_aligned>
 800bb8a:	1c43      	adds	r3, r0, #1
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	d158      	bne.n	800bc42 <_malloc_r+0xf6>
 800bb90:	f8d8 4000 	ldr.w	r4, [r8]
 800bb94:	4627      	mov	r7, r4
 800bb96:	2f00      	cmp	r7, #0
 800bb98:	d143      	bne.n	800bc22 <_malloc_r+0xd6>
 800bb9a:	2c00      	cmp	r4, #0
 800bb9c:	d04b      	beq.n	800bc36 <_malloc_r+0xea>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	4639      	mov	r1, r7
 800bba2:	4630      	mov	r0, r6
 800bba4:	eb04 0903 	add.w	r9, r4, r3
 800bba8:	f000 fd28 	bl	800c5fc <_sbrk_r>
 800bbac:	4581      	cmp	r9, r0
 800bbae:	d142      	bne.n	800bc36 <_malloc_r+0xea>
 800bbb0:	6821      	ldr	r1, [r4, #0]
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	1a6d      	subs	r5, r5, r1
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7ff ffa6 	bl	800bb08 <sbrk_aligned>
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d03a      	beq.n	800bc36 <_malloc_r+0xea>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	442b      	add	r3, r5
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	f8d8 3000 	ldr.w	r3, [r8]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	bb62      	cbnz	r2, 800bc28 <_malloc_r+0xdc>
 800bbce:	f8c8 7000 	str.w	r7, [r8]
 800bbd2:	e00f      	b.n	800bbf4 <_malloc_r+0xa8>
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	1b52      	subs	r2, r2, r5
 800bbd8:	d420      	bmi.n	800bc1c <_malloc_r+0xd0>
 800bbda:	2a0b      	cmp	r2, #11
 800bbdc:	d917      	bls.n	800bc0e <_malloc_r+0xc2>
 800bbde:	1961      	adds	r1, r4, r5
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	6025      	str	r5, [r4, #0]
 800bbe4:	bf18      	it	ne
 800bbe6:	6059      	strne	r1, [r3, #4]
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	bf08      	it	eq
 800bbec:	f8c8 1000 	streq.w	r1, [r8]
 800bbf0:	5162      	str	r2, [r4, r5]
 800bbf2:	604b      	str	r3, [r1, #4]
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f000 f82f 	bl	800bc58 <__malloc_unlock>
 800bbfa:	f104 000b 	add.w	r0, r4, #11
 800bbfe:	1d23      	adds	r3, r4, #4
 800bc00:	f020 0007 	bic.w	r0, r0, #7
 800bc04:	1ac2      	subs	r2, r0, r3
 800bc06:	bf1c      	itt	ne
 800bc08:	1a1b      	subne	r3, r3, r0
 800bc0a:	50a3      	strne	r3, [r4, r2]
 800bc0c:	e7af      	b.n	800bb6e <_malloc_r+0x22>
 800bc0e:	6862      	ldr	r2, [r4, #4]
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	bf0c      	ite	eq
 800bc14:	f8c8 2000 	streq.w	r2, [r8]
 800bc18:	605a      	strne	r2, [r3, #4]
 800bc1a:	e7eb      	b.n	800bbf4 <_malloc_r+0xa8>
 800bc1c:	4623      	mov	r3, r4
 800bc1e:	6864      	ldr	r4, [r4, #4]
 800bc20:	e7ae      	b.n	800bb80 <_malloc_r+0x34>
 800bc22:	463c      	mov	r4, r7
 800bc24:	687f      	ldr	r7, [r7, #4]
 800bc26:	e7b6      	b.n	800bb96 <_malloc_r+0x4a>
 800bc28:	461a      	mov	r2, r3
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d1fb      	bne.n	800bc28 <_malloc_r+0xdc>
 800bc30:	2300      	movs	r3, #0
 800bc32:	6053      	str	r3, [r2, #4]
 800bc34:	e7de      	b.n	800bbf4 <_malloc_r+0xa8>
 800bc36:	230c      	movs	r3, #12
 800bc38:	4630      	mov	r0, r6
 800bc3a:	6033      	str	r3, [r6, #0]
 800bc3c:	f000 f80c 	bl	800bc58 <__malloc_unlock>
 800bc40:	e794      	b.n	800bb6c <_malloc_r+0x20>
 800bc42:	6005      	str	r5, [r0, #0]
 800bc44:	e7d6      	b.n	800bbf4 <_malloc_r+0xa8>
 800bc46:	bf00      	nop
 800bc48:	20001674 	.word	0x20001674

0800bc4c <__malloc_lock>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	@ (800bc54 <__malloc_lock+0x8>)
 800bc4e:	f000 bd22 	b.w	800c696 <__retarget_lock_acquire_recursive>
 800bc52:	bf00      	nop
 800bc54:	200017b8 	.word	0x200017b8

0800bc58 <__malloc_unlock>:
 800bc58:	4801      	ldr	r0, [pc, #4]	@ (800bc60 <__malloc_unlock+0x8>)
 800bc5a:	f000 bd1d 	b.w	800c698 <__retarget_lock_release_recursive>
 800bc5e:	bf00      	nop
 800bc60:	200017b8 	.word	0x200017b8

0800bc64 <__sflush_r>:
 800bc64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6c:	0716      	lsls	r6, r2, #28
 800bc6e:	4605      	mov	r5, r0
 800bc70:	460c      	mov	r4, r1
 800bc72:	d454      	bmi.n	800bd1e <__sflush_r+0xba>
 800bc74:	684b      	ldr	r3, [r1, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dc02      	bgt.n	800bc80 <__sflush_r+0x1c>
 800bc7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd48      	ble.n	800bd12 <__sflush_r+0xae>
 800bc80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc82:	2e00      	cmp	r6, #0
 800bc84:	d045      	beq.n	800bd12 <__sflush_r+0xae>
 800bc86:	2300      	movs	r3, #0
 800bc88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc8c:	682f      	ldr	r7, [r5, #0]
 800bc8e:	6a21      	ldr	r1, [r4, #32]
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	d030      	beq.n	800bcf6 <__sflush_r+0x92>
 800bc94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	0759      	lsls	r1, r3, #29
 800bc9a:	d505      	bpl.n	800bca8 <__sflush_r+0x44>
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	1ad2      	subs	r2, r2, r3
 800bca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bca2:	b10b      	cbz	r3, 800bca8 <__sflush_r+0x44>
 800bca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bca6:	1ad2      	subs	r2, r2, r3
 800bca8:	2300      	movs	r3, #0
 800bcaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcac:	6a21      	ldr	r1, [r4, #32]
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b0      	blx	r6
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	d106      	bne.n	800bcc6 <__sflush_r+0x62>
 800bcb8:	6829      	ldr	r1, [r5, #0]
 800bcba:	291d      	cmp	r1, #29
 800bcbc:	d82b      	bhi.n	800bd16 <__sflush_r+0xb2>
 800bcbe:	4a2a      	ldr	r2, [pc, #168]	@ (800bd68 <__sflush_r+0x104>)
 800bcc0:	40ca      	lsrs	r2, r1
 800bcc2:	07d6      	lsls	r6, r2, #31
 800bcc4:	d527      	bpl.n	800bd16 <__sflush_r+0xb2>
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	04d9      	lsls	r1, r3, #19
 800bcca:	6062      	str	r2, [r4, #4]
 800bccc:	6922      	ldr	r2, [r4, #16]
 800bcce:	6022      	str	r2, [r4, #0]
 800bcd0:	d504      	bpl.n	800bcdc <__sflush_r+0x78>
 800bcd2:	1c42      	adds	r2, r0, #1
 800bcd4:	d101      	bne.n	800bcda <__sflush_r+0x76>
 800bcd6:	682b      	ldr	r3, [r5, #0]
 800bcd8:	b903      	cbnz	r3, 800bcdc <__sflush_r+0x78>
 800bcda:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcde:	602f      	str	r7, [r5, #0]
 800bce0:	b1b9      	cbz	r1, 800bd12 <__sflush_r+0xae>
 800bce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bce6:	4299      	cmp	r1, r3
 800bce8:	d002      	beq.n	800bcf0 <__sflush_r+0x8c>
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 fcf0 	bl	800c6d0 <_free_r>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcf4:	e00d      	b.n	800bd12 <__sflush_r+0xae>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	47b0      	blx	r6
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	1c50      	adds	r0, r2, #1
 800bd00:	d1c9      	bne.n	800bc96 <__sflush_r+0x32>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0c6      	beq.n	800bc96 <__sflush_r+0x32>
 800bd08:	2b1d      	cmp	r3, #29
 800bd0a:	d001      	beq.n	800bd10 <__sflush_r+0xac>
 800bd0c:	2b16      	cmp	r3, #22
 800bd0e:	d11d      	bne.n	800bd4c <__sflush_r+0xe8>
 800bd10:	602f      	str	r7, [r5, #0]
 800bd12:	2000      	movs	r0, #0
 800bd14:	e021      	b.n	800bd5a <__sflush_r+0xf6>
 800bd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd1a:	b21b      	sxth	r3, r3
 800bd1c:	e01a      	b.n	800bd54 <__sflush_r+0xf0>
 800bd1e:	690f      	ldr	r7, [r1, #16]
 800bd20:	2f00      	cmp	r7, #0
 800bd22:	d0f6      	beq.n	800bd12 <__sflush_r+0xae>
 800bd24:	0793      	lsls	r3, r2, #30
 800bd26:	680e      	ldr	r6, [r1, #0]
 800bd28:	600f      	str	r7, [r1, #0]
 800bd2a:	bf0c      	ite	eq
 800bd2c:	694b      	ldreq	r3, [r1, #20]
 800bd2e:	2300      	movne	r3, #0
 800bd30:	eba6 0807 	sub.w	r8, r6, r7
 800bd34:	608b      	str	r3, [r1, #8]
 800bd36:	f1b8 0f00 	cmp.w	r8, #0
 800bd3a:	ddea      	ble.n	800bd12 <__sflush_r+0xae>
 800bd3c:	4643      	mov	r3, r8
 800bd3e:	463a      	mov	r2, r7
 800bd40:	6a21      	ldr	r1, [r4, #32]
 800bd42:	4628      	mov	r0, r5
 800bd44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd46:	47b0      	blx	r6
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	dc08      	bgt.n	800bd5e <__sflush_r+0xfa>
 800bd4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	81a3      	strh	r3, [r4, #12]
 800bd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5e:	4407      	add	r7, r0
 800bd60:	eba8 0800 	sub.w	r8, r8, r0
 800bd64:	e7e7      	b.n	800bd36 <__sflush_r+0xd2>
 800bd66:	bf00      	nop
 800bd68:	20400001 	.word	0x20400001

0800bd6c <_fflush_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	690b      	ldr	r3, [r1, #16]
 800bd70:	4605      	mov	r5, r0
 800bd72:	460c      	mov	r4, r1
 800bd74:	b913      	cbnz	r3, 800bd7c <_fflush_r+0x10>
 800bd76:	2500      	movs	r5, #0
 800bd78:	4628      	mov	r0, r5
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	b118      	cbz	r0, 800bd86 <_fflush_r+0x1a>
 800bd7e:	6a03      	ldr	r3, [r0, #32]
 800bd80:	b90b      	cbnz	r3, 800bd86 <_fflush_r+0x1a>
 800bd82:	f000 f92d 	bl	800bfe0 <__sinit>
 800bd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d0f3      	beq.n	800bd76 <_fflush_r+0xa>
 800bd8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd90:	07d0      	lsls	r0, r2, #31
 800bd92:	d404      	bmi.n	800bd9e <_fflush_r+0x32>
 800bd94:	0599      	lsls	r1, r3, #22
 800bd96:	d402      	bmi.n	800bd9e <_fflush_r+0x32>
 800bd98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd9a:	f000 fc7c 	bl	800c696 <__retarget_lock_acquire_recursive>
 800bd9e:	4628      	mov	r0, r5
 800bda0:	4621      	mov	r1, r4
 800bda2:	f7ff ff5f 	bl	800bc64 <__sflush_r>
 800bda6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bda8:	4605      	mov	r5, r0
 800bdaa:	07da      	lsls	r2, r3, #31
 800bdac:	d4e4      	bmi.n	800bd78 <_fflush_r+0xc>
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	059b      	lsls	r3, r3, #22
 800bdb2:	d4e1      	bmi.n	800bd78 <_fflush_r+0xc>
 800bdb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdb6:	f000 fc6f 	bl	800c698 <__retarget_lock_release_recursive>
 800bdba:	e7dd      	b.n	800bd78 <_fflush_r+0xc>

0800bdbc <fflush>:
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	b920      	cbnz	r0, 800bdca <fflush+0xe>
 800bdc0:	4a04      	ldr	r2, [pc, #16]	@ (800bdd4 <fflush+0x18>)
 800bdc2:	4905      	ldr	r1, [pc, #20]	@ (800bdd8 <fflush+0x1c>)
 800bdc4:	4805      	ldr	r0, [pc, #20]	@ (800bddc <fflush+0x20>)
 800bdc6:	f000 b935 	b.w	800c034 <_fwalk_sglue>
 800bdca:	4b05      	ldr	r3, [pc, #20]	@ (800bde0 <fflush+0x24>)
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	f7ff bfcd 	b.w	800bd6c <_fflush_r>
 800bdd2:	bf00      	nop
 800bdd4:	20000010 	.word	0x20000010
 800bdd8:	0800bd6d 	.word	0x0800bd6d
 800bddc:	20000020 	.word	0x20000020
 800bde0:	2000001c 	.word	0x2000001c

0800bde4 <_fgets_r>:
 800bde4:	2a01      	cmp	r2, #1
 800bde6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdea:	4681      	mov	r9, r0
 800bdec:	460e      	mov	r6, r1
 800bdee:	4615      	mov	r5, r2
 800bdf0:	461c      	mov	r4, r3
 800bdf2:	dd21      	ble.n	800be38 <_fgets_r+0x54>
 800bdf4:	b118      	cbz	r0, 800bdfe <_fgets_r+0x1a>
 800bdf6:	6a03      	ldr	r3, [r0, #32]
 800bdf8:	b90b      	cbnz	r3, 800bdfe <_fgets_r+0x1a>
 800bdfa:	f000 f8f1 	bl	800bfe0 <__sinit>
 800bdfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be00:	07db      	lsls	r3, r3, #31
 800be02:	d405      	bmi.n	800be10 <_fgets_r+0x2c>
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	059f      	lsls	r7, r3, #22
 800be08:	d402      	bmi.n	800be10 <_fgets_r+0x2c>
 800be0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be0c:	f000 fc43 	bl	800c696 <__retarget_lock_acquire_recursive>
 800be10:	3d01      	subs	r5, #1
 800be12:	4637      	mov	r7, r6
 800be14:	6863      	ldr	r3, [r4, #4]
 800be16:	b99b      	cbnz	r3, 800be40 <_fgets_r+0x5c>
 800be18:	4621      	mov	r1, r4
 800be1a:	4648      	mov	r0, r9
 800be1c:	f000 fa00 	bl	800c220 <__srefill_r>
 800be20:	b168      	cbz	r0, 800be3e <_fgets_r+0x5a>
 800be22:	42b7      	cmp	r7, r6
 800be24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be26:	d13a      	bne.n	800be9e <_fgets_r+0xba>
 800be28:	07d8      	lsls	r0, r3, #31
 800be2a:	d405      	bmi.n	800be38 <_fgets_r+0x54>
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	0599      	lsls	r1, r3, #22
 800be30:	d402      	bmi.n	800be38 <_fgets_r+0x54>
 800be32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be34:	f000 fc30 	bl	800c698 <__retarget_lock_release_recursive>
 800be38:	2000      	movs	r0, #0
 800be3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3e:	6863      	ldr	r3, [r4, #4]
 800be40:	42ab      	cmp	r3, r5
 800be42:	f8d4 a000 	ldr.w	sl, [r4]
 800be46:	f04f 010a 	mov.w	r1, #10
 800be4a:	bf28      	it	cs
 800be4c:	462b      	movcs	r3, r5
 800be4e:	4650      	mov	r0, sl
 800be50:	461a      	mov	r2, r3
 800be52:	4698      	mov	r8, r3
 800be54:	f000 fc21 	bl	800c69a <memchr>
 800be58:	6863      	ldr	r3, [r4, #4]
 800be5a:	b188      	cbz	r0, 800be80 <_fgets_r+0x9c>
 800be5c:	3001      	adds	r0, #1
 800be5e:	4651      	mov	r1, sl
 800be60:	eba0 050a 	sub.w	r5, r0, sl
 800be64:	1b5b      	subs	r3, r3, r5
 800be66:	462a      	mov	r2, r5
 800be68:	e9c4 0300 	strd	r0, r3, [r4]
 800be6c:	4638      	mov	r0, r7
 800be6e:	f000 fc22 	bl	800c6b6 <memcpy>
 800be72:	2300      	movs	r3, #0
 800be74:	557b      	strb	r3, [r7, r5]
 800be76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be78:	07da      	lsls	r2, r3, #31
 800be7a:	d513      	bpl.n	800bea4 <_fgets_r+0xc0>
 800be7c:	4630      	mov	r0, r6
 800be7e:	e7dc      	b.n	800be3a <_fgets_r+0x56>
 800be80:	eba3 0308 	sub.w	r3, r3, r8
 800be84:	4638      	mov	r0, r7
 800be86:	4642      	mov	r2, r8
 800be88:	4651      	mov	r1, sl
 800be8a:	6063      	str	r3, [r4, #4]
 800be8c:	4447      	add	r7, r8
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	4443      	add	r3, r8
 800be92:	6023      	str	r3, [r4, #0]
 800be94:	f000 fc0f 	bl	800c6b6 <memcpy>
 800be98:	ebb5 0508 	subs.w	r5, r5, r8
 800be9c:	d1ba      	bne.n	800be14 <_fgets_r+0x30>
 800be9e:	2300      	movs	r3, #0
 800bea0:	703b      	strb	r3, [r7, #0]
 800bea2:	e7e8      	b.n	800be76 <_fgets_r+0x92>
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	059b      	lsls	r3, r3, #22
 800bea8:	d4e8      	bmi.n	800be7c <_fgets_r+0x98>
 800beaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beac:	f000 fbf4 	bl	800c698 <__retarget_lock_release_recursive>
 800beb0:	e7e4      	b.n	800be7c <_fgets_r+0x98>
	...

0800beb4 <fgets>:
 800beb4:	4613      	mov	r3, r2
 800beb6:	460a      	mov	r2, r1
 800beb8:	4601      	mov	r1, r0
 800beba:	4802      	ldr	r0, [pc, #8]	@ (800bec4 <fgets+0x10>)
 800bebc:	6800      	ldr	r0, [r0, #0]
 800bebe:	f7ff bf91 	b.w	800bde4 <_fgets_r>
 800bec2:	bf00      	nop
 800bec4:	2000001c 	.word	0x2000001c

0800bec8 <std>:
 800bec8:	2300      	movs	r3, #0
 800beca:	b510      	push	{r4, lr}
 800becc:	4604      	mov	r4, r0
 800bece:	6083      	str	r3, [r0, #8]
 800bed0:	8181      	strh	r1, [r0, #12]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6643      	str	r3, [r0, #100]	@ 0x64
 800bed6:	81c2      	strh	r2, [r0, #14]
 800bed8:	2208      	movs	r2, #8
 800beda:	6183      	str	r3, [r0, #24]
 800bedc:	e9c0 3300 	strd	r3, r3, [r0]
 800bee0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bee4:	305c      	adds	r0, #92	@ 0x5c
 800bee6:	f000 fb09 	bl	800c4fc <memset>
 800beea:	4b0d      	ldr	r3, [pc, #52]	@ (800bf20 <std+0x58>)
 800beec:	6224      	str	r4, [r4, #32]
 800beee:	6263      	str	r3, [r4, #36]	@ 0x24
 800bef0:	4b0c      	ldr	r3, [pc, #48]	@ (800bf24 <std+0x5c>)
 800bef2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bef4:	4b0c      	ldr	r3, [pc, #48]	@ (800bf28 <std+0x60>)
 800bef6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bef8:	4b0c      	ldr	r3, [pc, #48]	@ (800bf2c <std+0x64>)
 800befa:	6323      	str	r3, [r4, #48]	@ 0x30
 800befc:	4b0c      	ldr	r3, [pc, #48]	@ (800bf30 <std+0x68>)
 800befe:	429c      	cmp	r4, r3
 800bf00:	d006      	beq.n	800bf10 <std+0x48>
 800bf02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf06:	4294      	cmp	r4, r2
 800bf08:	d002      	beq.n	800bf10 <std+0x48>
 800bf0a:	33d0      	adds	r3, #208	@ 0xd0
 800bf0c:	429c      	cmp	r4, r3
 800bf0e:	d105      	bne.n	800bf1c <std+0x54>
 800bf10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf18:	f000 bbbc 	b.w	800c694 <__retarget_lock_init_recursive>
 800bf1c:	bd10      	pop	{r4, pc}
 800bf1e:	bf00      	nop
 800bf20:	0800c34d 	.word	0x0800c34d
 800bf24:	0800c36f 	.word	0x0800c36f
 800bf28:	0800c3a7 	.word	0x0800c3a7
 800bf2c:	0800c3cb 	.word	0x0800c3cb
 800bf30:	20001678 	.word	0x20001678

0800bf34 <stdio_exit_handler>:
 800bf34:	4a02      	ldr	r2, [pc, #8]	@ (800bf40 <stdio_exit_handler+0xc>)
 800bf36:	4903      	ldr	r1, [pc, #12]	@ (800bf44 <stdio_exit_handler+0x10>)
 800bf38:	4803      	ldr	r0, [pc, #12]	@ (800bf48 <stdio_exit_handler+0x14>)
 800bf3a:	f000 b87b 	b.w	800c034 <_fwalk_sglue>
 800bf3e:	bf00      	nop
 800bf40:	20000010 	.word	0x20000010
 800bf44:	0800bd6d 	.word	0x0800bd6d
 800bf48:	20000020 	.word	0x20000020

0800bf4c <cleanup_stdio>:
 800bf4c:	6841      	ldr	r1, [r0, #4]
 800bf4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bf80 <cleanup_stdio+0x34>)
 800bf50:	4299      	cmp	r1, r3
 800bf52:	b510      	push	{r4, lr}
 800bf54:	4604      	mov	r4, r0
 800bf56:	d001      	beq.n	800bf5c <cleanup_stdio+0x10>
 800bf58:	f7ff ff08 	bl	800bd6c <_fflush_r>
 800bf5c:	68a1      	ldr	r1, [r4, #8]
 800bf5e:	4b09      	ldr	r3, [pc, #36]	@ (800bf84 <cleanup_stdio+0x38>)
 800bf60:	4299      	cmp	r1, r3
 800bf62:	d002      	beq.n	800bf6a <cleanup_stdio+0x1e>
 800bf64:	4620      	mov	r0, r4
 800bf66:	f7ff ff01 	bl	800bd6c <_fflush_r>
 800bf6a:	68e1      	ldr	r1, [r4, #12]
 800bf6c:	4b06      	ldr	r3, [pc, #24]	@ (800bf88 <cleanup_stdio+0x3c>)
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	d004      	beq.n	800bf7c <cleanup_stdio+0x30>
 800bf72:	4620      	mov	r0, r4
 800bf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf78:	f7ff bef8 	b.w	800bd6c <_fflush_r>
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	bf00      	nop
 800bf80:	20001678 	.word	0x20001678
 800bf84:	200016e0 	.word	0x200016e0
 800bf88:	20001748 	.word	0x20001748

0800bf8c <global_stdio_init.part.0>:
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfbc <global_stdio_init.part.0+0x30>)
 800bf90:	2104      	movs	r1, #4
 800bf92:	4c0b      	ldr	r4, [pc, #44]	@ (800bfc0 <global_stdio_init.part.0+0x34>)
 800bf94:	4a0b      	ldr	r2, [pc, #44]	@ (800bfc4 <global_stdio_init.part.0+0x38>)
 800bf96:	4620      	mov	r0, r4
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f7ff ff94 	bl	800bec8 <std>
 800bfa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	2109      	movs	r1, #9
 800bfa8:	f7ff ff8e 	bl	800bec8 <std>
 800bfac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bfb0:	2202      	movs	r2, #2
 800bfb2:	2112      	movs	r1, #18
 800bfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb8:	f7ff bf86 	b.w	800bec8 <std>
 800bfbc:	200017b0 	.word	0x200017b0
 800bfc0:	20001678 	.word	0x20001678
 800bfc4:	0800bf35 	.word	0x0800bf35

0800bfc8 <__sfp_lock_acquire>:
 800bfc8:	4801      	ldr	r0, [pc, #4]	@ (800bfd0 <__sfp_lock_acquire+0x8>)
 800bfca:	f000 bb64 	b.w	800c696 <__retarget_lock_acquire_recursive>
 800bfce:	bf00      	nop
 800bfd0:	200017b9 	.word	0x200017b9

0800bfd4 <__sfp_lock_release>:
 800bfd4:	4801      	ldr	r0, [pc, #4]	@ (800bfdc <__sfp_lock_release+0x8>)
 800bfd6:	f000 bb5f 	b.w	800c698 <__retarget_lock_release_recursive>
 800bfda:	bf00      	nop
 800bfdc:	200017b9 	.word	0x200017b9

0800bfe0 <__sinit>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	f7ff fff0 	bl	800bfc8 <__sfp_lock_acquire>
 800bfe8:	6a23      	ldr	r3, [r4, #32]
 800bfea:	b11b      	cbz	r3, 800bff4 <__sinit+0x14>
 800bfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bff0:	f7ff bff0 	b.w	800bfd4 <__sfp_lock_release>
 800bff4:	4b04      	ldr	r3, [pc, #16]	@ (800c008 <__sinit+0x28>)
 800bff6:	6223      	str	r3, [r4, #32]
 800bff8:	4b04      	ldr	r3, [pc, #16]	@ (800c00c <__sinit+0x2c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1f5      	bne.n	800bfec <__sinit+0xc>
 800c000:	f7ff ffc4 	bl	800bf8c <global_stdio_init.part.0>
 800c004:	e7f2      	b.n	800bfec <__sinit+0xc>
 800c006:	bf00      	nop
 800c008:	0800bf4d 	.word	0x0800bf4d
 800c00c:	200017b0 	.word	0x200017b0

0800c010 <fiprintf>:
 800c010:	b40e      	push	{r1, r2, r3}
 800c012:	b503      	push	{r0, r1, lr}
 800c014:	ab03      	add	r3, sp, #12
 800c016:	4601      	mov	r1, r0
 800c018:	4805      	ldr	r0, [pc, #20]	@ (800c030 <fiprintf+0x20>)
 800c01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01e:	6800      	ldr	r0, [r0, #0]
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	f000 fd21 	bl	800ca68 <_vfiprintf_r>
 800c026:	b002      	add	sp, #8
 800c028:	f85d eb04 	ldr.w	lr, [sp], #4
 800c02c:	b003      	add	sp, #12
 800c02e:	4770      	bx	lr
 800c030:	2000001c 	.word	0x2000001c

0800c034 <_fwalk_sglue>:
 800c034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c038:	4607      	mov	r7, r0
 800c03a:	4688      	mov	r8, r1
 800c03c:	4614      	mov	r4, r2
 800c03e:	2600      	movs	r6, #0
 800c040:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c044:	f1b9 0901 	subs.w	r9, r9, #1
 800c048:	d505      	bpl.n	800c056 <_fwalk_sglue+0x22>
 800c04a:	6824      	ldr	r4, [r4, #0]
 800c04c:	2c00      	cmp	r4, #0
 800c04e:	d1f7      	bne.n	800c040 <_fwalk_sglue+0xc>
 800c050:	4630      	mov	r0, r6
 800c052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d907      	bls.n	800c06c <_fwalk_sglue+0x38>
 800c05c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c060:	3301      	adds	r3, #1
 800c062:	d003      	beq.n	800c06c <_fwalk_sglue+0x38>
 800c064:	4629      	mov	r1, r5
 800c066:	4638      	mov	r0, r7
 800c068:	47c0      	blx	r8
 800c06a:	4306      	orrs	r6, r0
 800c06c:	3568      	adds	r5, #104	@ 0x68
 800c06e:	e7e9      	b.n	800c044 <_fwalk_sglue+0x10>

0800c070 <_fwrite_r>:
 800c070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c074:	9c08      	ldr	r4, [sp, #32]
 800c076:	468a      	mov	sl, r1
 800c078:	4690      	mov	r8, r2
 800c07a:	fb02 f903 	mul.w	r9, r2, r3
 800c07e:	4606      	mov	r6, r0
 800c080:	b118      	cbz	r0, 800c08a <_fwrite_r+0x1a>
 800c082:	6a03      	ldr	r3, [r0, #32]
 800c084:	b90b      	cbnz	r3, 800c08a <_fwrite_r+0x1a>
 800c086:	f7ff ffab 	bl	800bfe0 <__sinit>
 800c08a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c08c:	07dd      	lsls	r5, r3, #31
 800c08e:	d405      	bmi.n	800c09c <_fwrite_r+0x2c>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	0598      	lsls	r0, r3, #22
 800c094:	d402      	bmi.n	800c09c <_fwrite_r+0x2c>
 800c096:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c098:	f000 fafd 	bl	800c696 <__retarget_lock_acquire_recursive>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	0719      	lsls	r1, r3, #28
 800c0a0:	d516      	bpl.n	800c0d0 <_fwrite_r+0x60>
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	b1a3      	cbz	r3, 800c0d0 <_fwrite_r+0x60>
 800c0a6:	2500      	movs	r5, #0
 800c0a8:	454d      	cmp	r5, r9
 800c0aa:	d01f      	beq.n	800c0ec <_fwrite_r+0x7c>
 800c0ac:	68a7      	ldr	r7, [r4, #8]
 800c0ae:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800c0b2:	3f01      	subs	r7, #1
 800c0b4:	2f00      	cmp	r7, #0
 800c0b6:	60a7      	str	r7, [r4, #8]
 800c0b8:	da04      	bge.n	800c0c4 <_fwrite_r+0x54>
 800c0ba:	69a3      	ldr	r3, [r4, #24]
 800c0bc:	429f      	cmp	r7, r3
 800c0be:	db0f      	blt.n	800c0e0 <_fwrite_r+0x70>
 800c0c0:	290a      	cmp	r1, #10
 800c0c2:	d00d      	beq.n	800c0e0 <_fwrite_r+0x70>
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	6022      	str	r2, [r4, #0]
 800c0ca:	7019      	strb	r1, [r3, #0]
 800c0cc:	3501      	adds	r5, #1
 800c0ce:	e7eb      	b.n	800c0a8 <_fwrite_r+0x38>
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f000 f9bc 	bl	800c450 <__swsetup_r>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0e4      	beq.n	800c0a6 <_fwrite_r+0x36>
 800c0dc:	2500      	movs	r5, #0
 800c0de:	e005      	b.n	800c0ec <_fwrite_r+0x7c>
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f000 f975 	bl	800c3d2 <__swbuf_r>
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d1ef      	bne.n	800c0cc <_fwrite_r+0x5c>
 800c0ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0ee:	07da      	lsls	r2, r3, #31
 800c0f0:	d405      	bmi.n	800c0fe <_fwrite_r+0x8e>
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	059b      	lsls	r3, r3, #22
 800c0f6:	d402      	bmi.n	800c0fe <_fwrite_r+0x8e>
 800c0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0fa:	f000 facd 	bl	800c698 <__retarget_lock_release_recursive>
 800c0fe:	fbb5 f0f8 	udiv	r0, r5, r8
 800c102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800c108 <fwrite>:
 800c108:	b507      	push	{r0, r1, r2, lr}
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	4613      	mov	r3, r2
 800c10e:	460a      	mov	r2, r1
 800c110:	4601      	mov	r1, r0
 800c112:	4803      	ldr	r0, [pc, #12]	@ (800c120 <fwrite+0x18>)
 800c114:	6800      	ldr	r0, [r0, #0]
 800c116:	f7ff ffab 	bl	800c070 <_fwrite_r>
 800c11a:	b003      	add	sp, #12
 800c11c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c120:	2000001c 	.word	0x2000001c

0800c124 <iprintf>:
 800c124:	b40f      	push	{r0, r1, r2, r3}
 800c126:	b507      	push	{r0, r1, r2, lr}
 800c128:	4906      	ldr	r1, [pc, #24]	@ (800c144 <iprintf+0x20>)
 800c12a:	ab04      	add	r3, sp, #16
 800c12c:	6808      	ldr	r0, [r1, #0]
 800c12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c132:	6881      	ldr	r1, [r0, #8]
 800c134:	9301      	str	r3, [sp, #4]
 800c136:	f000 fc97 	bl	800ca68 <_vfiprintf_r>
 800c13a:	b003      	add	sp, #12
 800c13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c140:	b004      	add	sp, #16
 800c142:	4770      	bx	lr
 800c144:	2000001c 	.word	0x2000001c

0800c148 <_puts_r>:
 800c148:	6a03      	ldr	r3, [r0, #32]
 800c14a:	b570      	push	{r4, r5, r6, lr}
 800c14c:	4605      	mov	r5, r0
 800c14e:	460e      	mov	r6, r1
 800c150:	6884      	ldr	r4, [r0, #8]
 800c152:	b90b      	cbnz	r3, 800c158 <_puts_r+0x10>
 800c154:	f7ff ff44 	bl	800bfe0 <__sinit>
 800c158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c15a:	07db      	lsls	r3, r3, #31
 800c15c:	d405      	bmi.n	800c16a <_puts_r+0x22>
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	0598      	lsls	r0, r3, #22
 800c162:	d402      	bmi.n	800c16a <_puts_r+0x22>
 800c164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c166:	f000 fa96 	bl	800c696 <__retarget_lock_acquire_recursive>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	0719      	lsls	r1, r3, #28
 800c16e:	d502      	bpl.n	800c176 <_puts_r+0x2e>
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d135      	bne.n	800c1e2 <_puts_r+0x9a>
 800c176:	4621      	mov	r1, r4
 800c178:	4628      	mov	r0, r5
 800c17a:	f000 f969 	bl	800c450 <__swsetup_r>
 800c17e:	b380      	cbz	r0, 800c1e2 <_puts_r+0x9a>
 800c180:	f04f 35ff 	mov.w	r5, #4294967295
 800c184:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c186:	07da      	lsls	r2, r3, #31
 800c188:	d405      	bmi.n	800c196 <_puts_r+0x4e>
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	059b      	lsls	r3, r3, #22
 800c18e:	d402      	bmi.n	800c196 <_puts_r+0x4e>
 800c190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c192:	f000 fa81 	bl	800c698 <__retarget_lock_release_recursive>
 800c196:	4628      	mov	r0, r5
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	da04      	bge.n	800c1a8 <_puts_r+0x60>
 800c19e:	69a2      	ldr	r2, [r4, #24]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	dc17      	bgt.n	800c1d4 <_puts_r+0x8c>
 800c1a4:	290a      	cmp	r1, #10
 800c1a6:	d015      	beq.n	800c1d4 <_puts_r+0x8c>
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	6022      	str	r2, [r4, #0]
 800c1ae:	7019      	strb	r1, [r3, #0]
 800c1b0:	68a3      	ldr	r3, [r4, #8]
 800c1b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	60a3      	str	r3, [r4, #8]
 800c1ba:	2900      	cmp	r1, #0
 800c1bc:	d1ed      	bne.n	800c19a <_puts_r+0x52>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	da11      	bge.n	800c1e6 <_puts_r+0x9e>
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	210a      	movs	r1, #10
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f000 f903 	bl	800c3d2 <__swbuf_r>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d0d7      	beq.n	800c180 <_puts_r+0x38>
 800c1d0:	250a      	movs	r5, #10
 800c1d2:	e7d7      	b.n	800c184 <_puts_r+0x3c>
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	f000 f8fb 	bl	800c3d2 <__swbuf_r>
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d1e7      	bne.n	800c1b0 <_puts_r+0x68>
 800c1e0:	e7ce      	b.n	800c180 <_puts_r+0x38>
 800c1e2:	3e01      	subs	r6, #1
 800c1e4:	e7e4      	b.n	800c1b0 <_puts_r+0x68>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	6022      	str	r2, [r4, #0]
 800c1ec:	220a      	movs	r2, #10
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	e7ee      	b.n	800c1d0 <_puts_r+0x88>
	...

0800c1f4 <puts>:
 800c1f4:	4b02      	ldr	r3, [pc, #8]	@ (800c200 <puts+0xc>)
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	f7ff bfa5 	b.w	800c148 <_puts_r>
 800c1fe:	bf00      	nop
 800c200:	2000001c 	.word	0x2000001c

0800c204 <lflush>:
 800c204:	898b      	ldrh	r3, [r1, #12]
 800c206:	f003 0309 	and.w	r3, r3, #9
 800c20a:	2b09      	cmp	r3, #9
 800c20c:	d103      	bne.n	800c216 <lflush+0x12>
 800c20e:	4b03      	ldr	r3, [pc, #12]	@ (800c21c <lflush+0x18>)
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	f7ff bdab 	b.w	800bd6c <_fflush_r>
 800c216:	2000      	movs	r0, #0
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	2000001c 	.word	0x2000001c

0800c220 <__srefill_r>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	460c      	mov	r4, r1
 800c224:	4605      	mov	r5, r0
 800c226:	b118      	cbz	r0, 800c230 <__srefill_r+0x10>
 800c228:	6a03      	ldr	r3, [r0, #32]
 800c22a:	b90b      	cbnz	r3, 800c230 <__srefill_r+0x10>
 800c22c:	f7ff fed8 	bl	800bfe0 <__sinit>
 800c230:	2300      	movs	r3, #0
 800c232:	6063      	str	r3, [r4, #4]
 800c234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c238:	069e      	lsls	r6, r3, #26
 800c23a:	d408      	bmi.n	800c24e <__srefill_r+0x2e>
 800c23c:	0758      	lsls	r0, r3, #29
 800c23e:	d445      	bmi.n	800c2cc <__srefill_r+0xac>
 800c240:	06d9      	lsls	r1, r3, #27
 800c242:	d407      	bmi.n	800c254 <__srefill_r+0x34>
 800c244:	2209      	movs	r2, #9
 800c246:	602a      	str	r2, [r5, #0]
 800c248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c24c:	81a3      	strh	r3, [r4, #12]
 800c24e:	f04f 30ff 	mov.w	r0, #4294967295
 800c252:	bd70      	pop	{r4, r5, r6, pc}
 800c254:	071a      	lsls	r2, r3, #28
 800c256:	d50b      	bpl.n	800c270 <__srefill_r+0x50>
 800c258:	4621      	mov	r1, r4
 800c25a:	4628      	mov	r0, r5
 800c25c:	f7ff fd86 	bl	800bd6c <_fflush_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	d1f4      	bne.n	800c24e <__srefill_r+0x2e>
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	60a0      	str	r0, [r4, #8]
 800c268:	f023 0308 	bic.w	r3, r3, #8
 800c26c:	61a0      	str	r0, [r4, #24]
 800c26e:	81a3      	strh	r3, [r4, #12]
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	f043 0304 	orr.w	r3, r3, #4
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	6923      	ldr	r3, [r4, #16]
 800c27a:	b91b      	cbnz	r3, 800c284 <__srefill_r+0x64>
 800c27c:	4621      	mov	r1, r4
 800c27e:	4628      	mov	r0, r5
 800c280:	f000 febf 	bl	800d002 <__smakebuf_r>
 800c284:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800c288:	07b3      	lsls	r3, r6, #30
 800c28a:	d00f      	beq.n	800c2ac <__srefill_r+0x8c>
 800c28c:	2301      	movs	r3, #1
 800c28e:	4a1b      	ldr	r2, [pc, #108]	@ (800c2fc <__srefill_r+0xdc>)
 800c290:	491b      	ldr	r1, [pc, #108]	@ (800c300 <__srefill_r+0xe0>)
 800c292:	481c      	ldr	r0, [pc, #112]	@ (800c304 <__srefill_r+0xe4>)
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	f7ff fecd 	bl	800c034 <_fwalk_sglue>
 800c29a:	81a6      	strh	r6, [r4, #12]
 800c29c:	f006 0609 	and.w	r6, r6, #9
 800c2a0:	2e09      	cmp	r6, #9
 800c2a2:	d103      	bne.n	800c2ac <__srefill_r+0x8c>
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f7ff fcdc 	bl	800bc64 <__sflush_r>
 800c2ac:	6922      	ldr	r2, [r4, #16]
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800c2b2:	6963      	ldr	r3, [r4, #20]
 800c2b4:	6a21      	ldr	r1, [r4, #32]
 800c2b6:	6022      	str	r2, [r4, #0]
 800c2b8:	47b0      	blx	r6
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	6060      	str	r0, [r4, #4]
 800c2be:	dc17      	bgt.n	800c2f0 <__srefill_r+0xd0>
 800c2c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c4:	d116      	bne.n	800c2f4 <__srefill_r+0xd4>
 800c2c6:	f043 0320 	orr.w	r3, r3, #32
 800c2ca:	e7bf      	b.n	800c24c <__srefill_r+0x2c>
 800c2cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2ce:	2900      	cmp	r1, #0
 800c2d0:	d0d2      	beq.n	800c278 <__srefill_r+0x58>
 800c2d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2d6:	4299      	cmp	r1, r3
 800c2d8:	d002      	beq.n	800c2e0 <__srefill_r+0xc0>
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 f9f8 	bl	800c6d0 <_free_r>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c2e6:	6063      	str	r3, [r4, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d0c5      	beq.n	800c278 <__srefill_r+0x58>
 800c2ec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	e7ae      	b.n	800c252 <__srefill_r+0x32>
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	6062      	str	r2, [r4, #4]
 800c2f8:	e7a6      	b.n	800c248 <__srefill_r+0x28>
 800c2fa:	bf00      	nop
 800c2fc:	20000010 	.word	0x20000010
 800c300:	0800c205 	.word	0x0800c205
 800c304:	20000020 	.word	0x20000020

0800c308 <siprintf>:
 800c308:	b40e      	push	{r1, r2, r3}
 800c30a:	b510      	push	{r4, lr}
 800c30c:	b09d      	sub	sp, #116	@ 0x74
 800c30e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c312:	2400      	movs	r4, #0
 800c314:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c316:	9002      	str	r0, [sp, #8]
 800c318:	9006      	str	r0, [sp, #24]
 800c31a:	9107      	str	r1, [sp, #28]
 800c31c:	9104      	str	r1, [sp, #16]
 800c31e:	4809      	ldr	r0, [pc, #36]	@ (800c344 <siprintf+0x3c>)
 800c320:	4909      	ldr	r1, [pc, #36]	@ (800c348 <siprintf+0x40>)
 800c322:	f853 2b04 	ldr.w	r2, [r3], #4
 800c326:	9105      	str	r1, [sp, #20]
 800c328:	a902      	add	r1, sp, #8
 800c32a:	6800      	ldr	r0, [r0, #0]
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c330:	f000 fa74 	bl	800c81c <_svfiprintf_r>
 800c334:	9b02      	ldr	r3, [sp, #8]
 800c336:	701c      	strb	r4, [r3, #0]
 800c338:	b01d      	add	sp, #116	@ 0x74
 800c33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c33e:	b003      	add	sp, #12
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	2000001c 	.word	0x2000001c
 800c348:	ffff0208 	.word	0xffff0208

0800c34c <__sread>:
 800c34c:	b510      	push	{r4, lr}
 800c34e:	460c      	mov	r4, r1
 800c350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c354:	f000 f92c 	bl	800c5b0 <_read_r>
 800c358:	2800      	cmp	r0, #0
 800c35a:	bfab      	itete	ge
 800c35c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c35e:	89a3      	ldrhlt	r3, [r4, #12]
 800c360:	181b      	addge	r3, r3, r0
 800c362:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c366:	bfac      	ite	ge
 800c368:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c36a:	81a3      	strhlt	r3, [r4, #12]
 800c36c:	bd10      	pop	{r4, pc}

0800c36e <__swrite>:
 800c36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c372:	461f      	mov	r7, r3
 800c374:	898b      	ldrh	r3, [r1, #12]
 800c376:	4605      	mov	r5, r0
 800c378:	460c      	mov	r4, r1
 800c37a:	05db      	lsls	r3, r3, #23
 800c37c:	4616      	mov	r6, r2
 800c37e:	d505      	bpl.n	800c38c <__swrite+0x1e>
 800c380:	2302      	movs	r3, #2
 800c382:	2200      	movs	r2, #0
 800c384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c388:	f000 f900 	bl	800c58c <_lseek_r>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	4632      	mov	r2, r6
 800c390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c394:	4628      	mov	r0, r5
 800c396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	463b      	mov	r3, r7
 800c39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a2:	f000 b93b 	b.w	800c61c <_write_r>

0800c3a6 <__sseek>:
 800c3a6:	b510      	push	{r4, lr}
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ae:	f000 f8ed 	bl	800c58c <_lseek_r>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	bf15      	itete	ne
 800c3b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3c2:	81a3      	strheq	r3, [r4, #12]
 800c3c4:	bf18      	it	ne
 800c3c6:	81a3      	strhne	r3, [r4, #12]
 800c3c8:	bd10      	pop	{r4, pc}

0800c3ca <__sclose>:
 800c3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ce:	f000 b8cd 	b.w	800c56c <_close_r>

0800c3d2 <__swbuf_r>:
 800c3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d4:	460e      	mov	r6, r1
 800c3d6:	4614      	mov	r4, r2
 800c3d8:	4605      	mov	r5, r0
 800c3da:	b118      	cbz	r0, 800c3e4 <__swbuf_r+0x12>
 800c3dc:	6a03      	ldr	r3, [r0, #32]
 800c3de:	b90b      	cbnz	r3, 800c3e4 <__swbuf_r+0x12>
 800c3e0:	f7ff fdfe 	bl	800bfe0 <__sinit>
 800c3e4:	69a3      	ldr	r3, [r4, #24]
 800c3e6:	60a3      	str	r3, [r4, #8]
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	071a      	lsls	r2, r3, #28
 800c3ec:	d501      	bpl.n	800c3f2 <__swbuf_r+0x20>
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	b943      	cbnz	r3, 800c404 <__swbuf_r+0x32>
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	f000 f82b 	bl	800c450 <__swsetup_r>
 800c3fa:	b118      	cbz	r0, 800c404 <__swbuf_r+0x32>
 800c3fc:	f04f 37ff 	mov.w	r7, #4294967295
 800c400:	4638      	mov	r0, r7
 800c402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	b2f6      	uxtb	r6, r6
 800c408:	6922      	ldr	r2, [r4, #16]
 800c40a:	4637      	mov	r7, r6
 800c40c:	1a98      	subs	r0, r3, r2
 800c40e:	6963      	ldr	r3, [r4, #20]
 800c410:	4283      	cmp	r3, r0
 800c412:	dc05      	bgt.n	800c420 <__swbuf_r+0x4e>
 800c414:	4621      	mov	r1, r4
 800c416:	4628      	mov	r0, r5
 800c418:	f7ff fca8 	bl	800bd6c <_fflush_r>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d1ed      	bne.n	800c3fc <__swbuf_r+0x2a>
 800c420:	68a3      	ldr	r3, [r4, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	60a3      	str	r3, [r4, #8]
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	6022      	str	r2, [r4, #0]
 800c42c:	701e      	strb	r6, [r3, #0]
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	6962      	ldr	r2, [r4, #20]
 800c432:	429a      	cmp	r2, r3
 800c434:	d004      	beq.n	800c440 <__swbuf_r+0x6e>
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	07db      	lsls	r3, r3, #31
 800c43a:	d5e1      	bpl.n	800c400 <__swbuf_r+0x2e>
 800c43c:	2e0a      	cmp	r6, #10
 800c43e:	d1df      	bne.n	800c400 <__swbuf_r+0x2e>
 800c440:	4621      	mov	r1, r4
 800c442:	4628      	mov	r0, r5
 800c444:	f7ff fc92 	bl	800bd6c <_fflush_r>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d0d9      	beq.n	800c400 <__swbuf_r+0x2e>
 800c44c:	e7d6      	b.n	800c3fc <__swbuf_r+0x2a>
	...

0800c450 <__swsetup_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4b29      	ldr	r3, [pc, #164]	@ (800c4f8 <__swsetup_r+0xa8>)
 800c454:	4605      	mov	r5, r0
 800c456:	460c      	mov	r4, r1
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	b118      	cbz	r0, 800c464 <__swsetup_r+0x14>
 800c45c:	6a03      	ldr	r3, [r0, #32]
 800c45e:	b90b      	cbnz	r3, 800c464 <__swsetup_r+0x14>
 800c460:	f7ff fdbe 	bl	800bfe0 <__sinit>
 800c464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c468:	0719      	lsls	r1, r3, #28
 800c46a:	d422      	bmi.n	800c4b2 <__swsetup_r+0x62>
 800c46c:	06da      	lsls	r2, r3, #27
 800c46e:	d407      	bmi.n	800c480 <__swsetup_r+0x30>
 800c470:	2209      	movs	r2, #9
 800c472:	602a      	str	r2, [r5, #0]
 800c474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c478:	f04f 30ff 	mov.w	r0, #4294967295
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	e033      	b.n	800c4e8 <__swsetup_r+0x98>
 800c480:	0758      	lsls	r0, r3, #29
 800c482:	d512      	bpl.n	800c4aa <__swsetup_r+0x5a>
 800c484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c486:	b141      	cbz	r1, 800c49a <__swsetup_r+0x4a>
 800c488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c48c:	4299      	cmp	r1, r3
 800c48e:	d002      	beq.n	800c496 <__swsetup_r+0x46>
 800c490:	4628      	mov	r0, r5
 800c492:	f000 f91d 	bl	800c6d0 <_free_r>
 800c496:	2300      	movs	r3, #0
 800c498:	6363      	str	r3, [r4, #52]	@ 0x34
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	6923      	ldr	r3, [r4, #16]
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	f043 0308 	orr.w	r3, r3, #8
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	6923      	ldr	r3, [r4, #16]
 800c4b4:	b94b      	cbnz	r3, 800c4ca <__swsetup_r+0x7a>
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4c0:	d003      	beq.n	800c4ca <__swsetup_r+0x7a>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f000 fd9c 	bl	800d002 <__smakebuf_r>
 800c4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ce:	f013 0201 	ands.w	r2, r3, #1
 800c4d2:	d00a      	beq.n	800c4ea <__swsetup_r+0x9a>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	60a2      	str	r2, [r4, #8]
 800c4d8:	6962      	ldr	r2, [r4, #20]
 800c4da:	4252      	negs	r2, r2
 800c4dc:	61a2      	str	r2, [r4, #24]
 800c4de:	6922      	ldr	r2, [r4, #16]
 800c4e0:	b942      	cbnz	r2, 800c4f4 <__swsetup_r+0xa4>
 800c4e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4e6:	d1c5      	bne.n	800c474 <__swsetup_r+0x24>
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	0799      	lsls	r1, r3, #30
 800c4ec:	bf58      	it	pl
 800c4ee:	6962      	ldrpl	r2, [r4, #20]
 800c4f0:	60a2      	str	r2, [r4, #8]
 800c4f2:	e7f4      	b.n	800c4de <__swsetup_r+0x8e>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e7f7      	b.n	800c4e8 <__swsetup_r+0x98>
 800c4f8:	2000001c 	.word	0x2000001c

0800c4fc <memset>:
 800c4fc:	4402      	add	r2, r0
 800c4fe:	4603      	mov	r3, r0
 800c500:	4293      	cmp	r3, r2
 800c502:	d100      	bne.n	800c506 <memset+0xa>
 800c504:	4770      	bx	lr
 800c506:	f803 1b01 	strb.w	r1, [r3], #1
 800c50a:	e7f9      	b.n	800c500 <memset+0x4>

0800c50c <_raise_r>:
 800c50c:	291f      	cmp	r1, #31
 800c50e:	b538      	push	{r3, r4, r5, lr}
 800c510:	4605      	mov	r5, r0
 800c512:	460c      	mov	r4, r1
 800c514:	d904      	bls.n	800c520 <_raise_r+0x14>
 800c516:	2316      	movs	r3, #22
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	f04f 30ff 	mov.w	r0, #4294967295
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c522:	b112      	cbz	r2, 800c52a <_raise_r+0x1e>
 800c524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c528:	b94b      	cbnz	r3, 800c53e <_raise_r+0x32>
 800c52a:	4628      	mov	r0, r5
 800c52c:	f000 f864 	bl	800c5f8 <_getpid_r>
 800c530:	4622      	mov	r2, r4
 800c532:	4601      	mov	r1, r0
 800c534:	4628      	mov	r0, r5
 800c536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c53a:	f000 b84b 	b.w	800c5d4 <_kill_r>
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d00a      	beq.n	800c558 <_raise_r+0x4c>
 800c542:	1c59      	adds	r1, r3, #1
 800c544:	d103      	bne.n	800c54e <_raise_r+0x42>
 800c546:	2316      	movs	r3, #22
 800c548:	6003      	str	r3, [r0, #0]
 800c54a:	2001      	movs	r0, #1
 800c54c:	e7e7      	b.n	800c51e <_raise_r+0x12>
 800c54e:	2100      	movs	r1, #0
 800c550:	4620      	mov	r0, r4
 800c552:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c556:	4798      	blx	r3
 800c558:	2000      	movs	r0, #0
 800c55a:	e7e0      	b.n	800c51e <_raise_r+0x12>

0800c55c <raise>:
 800c55c:	4b02      	ldr	r3, [pc, #8]	@ (800c568 <raise+0xc>)
 800c55e:	4601      	mov	r1, r0
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	f7ff bfd3 	b.w	800c50c <_raise_r>
 800c566:	bf00      	nop
 800c568:	2000001c 	.word	0x2000001c

0800c56c <_close_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	2300      	movs	r3, #0
 800c570:	4d05      	ldr	r5, [pc, #20]	@ (800c588 <_close_r+0x1c>)
 800c572:	4604      	mov	r4, r0
 800c574:	4608      	mov	r0, r1
 800c576:	602b      	str	r3, [r5, #0]
 800c578:	f7f5 fc8d 	bl	8001e96 <_close>
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	d102      	bne.n	800c586 <_close_r+0x1a>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	b103      	cbz	r3, 800c586 <_close_r+0x1a>
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	200017b4 	.word	0x200017b4

0800c58c <_lseek_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4604      	mov	r4, r0
 800c590:	4d06      	ldr	r5, [pc, #24]	@ (800c5ac <_lseek_r+0x20>)
 800c592:	4608      	mov	r0, r1
 800c594:	4611      	mov	r1, r2
 800c596:	2200      	movs	r2, #0
 800c598:	602a      	str	r2, [r5, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	f7f5 fca2 	bl	8001ee4 <_lseek>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_lseek_r+0x1e>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_lseek_r+0x1e>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	200017b4 	.word	0x200017b4

0800c5b0 <_read_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	4d06      	ldr	r5, [pc, #24]	@ (800c5d0 <_read_r+0x20>)
 800c5b6:	4608      	mov	r0, r1
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	602a      	str	r2, [r5, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f7f5 fc30 	bl	8001e24 <_read>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_read_r+0x1e>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_read_r+0x1e>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	200017b4 	.word	0x200017b4

0800c5d4 <_kill_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	4d06      	ldr	r5, [pc, #24]	@ (800c5f4 <_kill_r+0x20>)
 800c5da:	4604      	mov	r4, r0
 800c5dc:	4608      	mov	r0, r1
 800c5de:	4611      	mov	r1, r2
 800c5e0:	602b      	str	r3, [r5, #0]
 800c5e2:	f7f5 fc04 	bl	8001dee <_kill>
 800c5e6:	1c43      	adds	r3, r0, #1
 800c5e8:	d102      	bne.n	800c5f0 <_kill_r+0x1c>
 800c5ea:	682b      	ldr	r3, [r5, #0]
 800c5ec:	b103      	cbz	r3, 800c5f0 <_kill_r+0x1c>
 800c5ee:	6023      	str	r3, [r4, #0]
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
 800c5f2:	bf00      	nop
 800c5f4:	200017b4 	.word	0x200017b4

0800c5f8 <_getpid_r>:
 800c5f8:	f7f5 bbf1 	b.w	8001dde <_getpid>

0800c5fc <_sbrk_r>:
 800c5fc:	b538      	push	{r3, r4, r5, lr}
 800c5fe:	2300      	movs	r3, #0
 800c600:	4d05      	ldr	r5, [pc, #20]	@ (800c618 <_sbrk_r+0x1c>)
 800c602:	4604      	mov	r4, r0
 800c604:	4608      	mov	r0, r1
 800c606:	602b      	str	r3, [r5, #0]
 800c608:	f7f5 fc7a 	bl	8001f00 <_sbrk>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	d102      	bne.n	800c616 <_sbrk_r+0x1a>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	b103      	cbz	r3, 800c616 <_sbrk_r+0x1a>
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	200017b4 	.word	0x200017b4

0800c61c <_write_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4604      	mov	r4, r0
 800c620:	4d06      	ldr	r5, [pc, #24]	@ (800c63c <_write_r+0x20>)
 800c622:	4608      	mov	r0, r1
 800c624:	4611      	mov	r1, r2
 800c626:	2200      	movs	r2, #0
 800c628:	602a      	str	r2, [r5, #0]
 800c62a:	461a      	mov	r2, r3
 800c62c:	f7f5 fc17 	bl	8001e5e <_write>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d102      	bne.n	800c63a <_write_r+0x1e>
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	b103      	cbz	r3, 800c63a <_write_r+0x1e>
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	200017b4 	.word	0x200017b4

0800c640 <__errno>:
 800c640:	4b01      	ldr	r3, [pc, #4]	@ (800c648 <__errno+0x8>)
 800c642:	6818      	ldr	r0, [r3, #0]
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	2000001c 	.word	0x2000001c

0800c64c <__libc_init_array>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	4d0d      	ldr	r5, [pc, #52]	@ (800c684 <__libc_init_array+0x38>)
 800c650:	2600      	movs	r6, #0
 800c652:	4c0d      	ldr	r4, [pc, #52]	@ (800c688 <__libc_init_array+0x3c>)
 800c654:	1b64      	subs	r4, r4, r5
 800c656:	10a4      	asrs	r4, r4, #2
 800c658:	42a6      	cmp	r6, r4
 800c65a:	d109      	bne.n	800c670 <__libc_init_array+0x24>
 800c65c:	4d0b      	ldr	r5, [pc, #44]	@ (800c68c <__libc_init_array+0x40>)
 800c65e:	2600      	movs	r6, #0
 800c660:	4c0b      	ldr	r4, [pc, #44]	@ (800c690 <__libc_init_array+0x44>)
 800c662:	f000 fd7d 	bl	800d160 <_init>
 800c666:	1b64      	subs	r4, r4, r5
 800c668:	10a4      	asrs	r4, r4, #2
 800c66a:	42a6      	cmp	r6, r4
 800c66c:	d105      	bne.n	800c67a <__libc_init_array+0x2e>
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	f855 3b04 	ldr.w	r3, [r5], #4
 800c674:	3601      	adds	r6, #1
 800c676:	4798      	blx	r3
 800c678:	e7ee      	b.n	800c658 <__libc_init_array+0xc>
 800c67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c67e:	3601      	adds	r6, #1
 800c680:	4798      	blx	r3
 800c682:	e7f2      	b.n	800c66a <__libc_init_array+0x1e>
 800c684:	0800d418 	.word	0x0800d418
 800c688:	0800d418 	.word	0x0800d418
 800c68c:	0800d418 	.word	0x0800d418
 800c690:	0800d41c 	.word	0x0800d41c

0800c694 <__retarget_lock_init_recursive>:
 800c694:	4770      	bx	lr

0800c696 <__retarget_lock_acquire_recursive>:
 800c696:	4770      	bx	lr

0800c698 <__retarget_lock_release_recursive>:
 800c698:	4770      	bx	lr

0800c69a <memchr>:
 800c69a:	b2c9      	uxtb	r1, r1
 800c69c:	4603      	mov	r3, r0
 800c69e:	4402      	add	r2, r0
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	d101      	bne.n	800c6ac <memchr+0x12>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	e003      	b.n	800c6b4 <memchr+0x1a>
 800c6ac:	7804      	ldrb	r4, [r0, #0]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	428c      	cmp	r4, r1
 800c6b2:	d1f6      	bne.n	800c6a2 <memchr+0x8>
 800c6b4:	bd10      	pop	{r4, pc}

0800c6b6 <memcpy>:
 800c6b6:	440a      	add	r2, r1
 800c6b8:	1e43      	subs	r3, r0, #1
 800c6ba:	4291      	cmp	r1, r2
 800c6bc:	d100      	bne.n	800c6c0 <memcpy+0xa>
 800c6be:	4770      	bx	lr
 800c6c0:	b510      	push	{r4, lr}
 800c6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6c6:	4291      	cmp	r1, r2
 800c6c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6cc:	d1f9      	bne.n	800c6c2 <memcpy+0xc>
 800c6ce:	bd10      	pop	{r4, pc}

0800c6d0 <_free_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4605      	mov	r5, r0
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	d041      	beq.n	800c75c <_free_r+0x8c>
 800c6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6dc:	1f0c      	subs	r4, r1, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfb8      	it	lt
 800c6e2:	18e4      	addlt	r4, r4, r3
 800c6e4:	f7ff fab2 	bl	800bc4c <__malloc_lock>
 800c6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c760 <_free_r+0x90>)
 800c6ea:	6813      	ldr	r3, [r2, #0]
 800c6ec:	b933      	cbnz	r3, 800c6fc <_free_r+0x2c>
 800c6ee:	6063      	str	r3, [r4, #4]
 800c6f0:	6014      	str	r4, [r2, #0]
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6f8:	f7ff baae 	b.w	800bc58 <__malloc_unlock>
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	d908      	bls.n	800c712 <_free_r+0x42>
 800c700:	6820      	ldr	r0, [r4, #0]
 800c702:	1821      	adds	r1, r4, r0
 800c704:	428b      	cmp	r3, r1
 800c706:	bf01      	itttt	eq
 800c708:	6819      	ldreq	r1, [r3, #0]
 800c70a:	685b      	ldreq	r3, [r3, #4]
 800c70c:	1809      	addeq	r1, r1, r0
 800c70e:	6021      	streq	r1, [r4, #0]
 800c710:	e7ed      	b.n	800c6ee <_free_r+0x1e>
 800c712:	461a      	mov	r2, r3
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	b10b      	cbz	r3, 800c71c <_free_r+0x4c>
 800c718:	42a3      	cmp	r3, r4
 800c71a:	d9fa      	bls.n	800c712 <_free_r+0x42>
 800c71c:	6811      	ldr	r1, [r2, #0]
 800c71e:	1850      	adds	r0, r2, r1
 800c720:	42a0      	cmp	r0, r4
 800c722:	d10b      	bne.n	800c73c <_free_r+0x6c>
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	4401      	add	r1, r0
 800c728:	1850      	adds	r0, r2, r1
 800c72a:	6011      	str	r1, [r2, #0]
 800c72c:	4283      	cmp	r3, r0
 800c72e:	d1e0      	bne.n	800c6f2 <_free_r+0x22>
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4408      	add	r0, r1
 800c736:	6053      	str	r3, [r2, #4]
 800c738:	6010      	str	r0, [r2, #0]
 800c73a:	e7da      	b.n	800c6f2 <_free_r+0x22>
 800c73c:	d902      	bls.n	800c744 <_free_r+0x74>
 800c73e:	230c      	movs	r3, #12
 800c740:	602b      	str	r3, [r5, #0]
 800c742:	e7d6      	b.n	800c6f2 <_free_r+0x22>
 800c744:	6820      	ldr	r0, [r4, #0]
 800c746:	1821      	adds	r1, r4, r0
 800c748:	428b      	cmp	r3, r1
 800c74a:	bf02      	ittt	eq
 800c74c:	6819      	ldreq	r1, [r3, #0]
 800c74e:	685b      	ldreq	r3, [r3, #4]
 800c750:	1809      	addeq	r1, r1, r0
 800c752:	6063      	str	r3, [r4, #4]
 800c754:	bf08      	it	eq
 800c756:	6021      	streq	r1, [r4, #0]
 800c758:	6054      	str	r4, [r2, #4]
 800c75a:	e7ca      	b.n	800c6f2 <_free_r+0x22>
 800c75c:	bd38      	pop	{r3, r4, r5, pc}
 800c75e:	bf00      	nop
 800c760:	20001674 	.word	0x20001674

0800c764 <__ssputs_r>:
 800c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c768:	461f      	mov	r7, r3
 800c76a:	688e      	ldr	r6, [r1, #8]
 800c76c:	4682      	mov	sl, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	42be      	cmp	r6, r7
 800c772:	4690      	mov	r8, r2
 800c774:	680b      	ldr	r3, [r1, #0]
 800c776:	d82d      	bhi.n	800c7d4 <__ssputs_r+0x70>
 800c778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c77c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c780:	d026      	beq.n	800c7d0 <__ssputs_r+0x6c>
 800c782:	6965      	ldr	r5, [r4, #20]
 800c784:	6909      	ldr	r1, [r1, #16]
 800c786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c78a:	eba3 0901 	sub.w	r9, r3, r1
 800c78e:	1c7b      	adds	r3, r7, #1
 800c790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c794:	444b      	add	r3, r9
 800c796:	106d      	asrs	r5, r5, #1
 800c798:	429d      	cmp	r5, r3
 800c79a:	bf38      	it	cc
 800c79c:	461d      	movcc	r5, r3
 800c79e:	0553      	lsls	r3, r2, #21
 800c7a0:	d527      	bpl.n	800c7f2 <__ssputs_r+0x8e>
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	f7ff f9d2 	bl	800bb4c <_malloc_r>
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	b360      	cbz	r0, 800c806 <__ssputs_r+0xa2>
 800c7ac:	464a      	mov	r2, r9
 800c7ae:	6921      	ldr	r1, [r4, #16]
 800c7b0:	f7ff ff81 	bl	800c6b6 <memcpy>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7be:	81a3      	strh	r3, [r4, #12]
 800c7c0:	6126      	str	r6, [r4, #16]
 800c7c2:	444e      	add	r6, r9
 800c7c4:	6165      	str	r5, [r4, #20]
 800c7c6:	eba5 0509 	sub.w	r5, r5, r9
 800c7ca:	6026      	str	r6, [r4, #0]
 800c7cc:	463e      	mov	r6, r7
 800c7ce:	60a5      	str	r5, [r4, #8]
 800c7d0:	42be      	cmp	r6, r7
 800c7d2:	d900      	bls.n	800c7d6 <__ssputs_r+0x72>
 800c7d4:	463e      	mov	r6, r7
 800c7d6:	4632      	mov	r2, r6
 800c7d8:	4641      	mov	r1, r8
 800c7da:	6820      	ldr	r0, [r4, #0]
 800c7dc:	f000 fc4d 	bl	800d07a <memmove>
 800c7e0:	68a3      	ldr	r3, [r4, #8]
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	1b9b      	subs	r3, r3, r6
 800c7e6:	60a3      	str	r3, [r4, #8]
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	4433      	add	r3, r6
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f2:	462a      	mov	r2, r5
 800c7f4:	f000 fc7e 	bl	800d0f4 <_realloc_r>
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d1e0      	bne.n	800c7c0 <__ssputs_r+0x5c>
 800c7fe:	6921      	ldr	r1, [r4, #16]
 800c800:	4650      	mov	r0, sl
 800c802:	f7ff ff65 	bl	800c6d0 <_free_r>
 800c806:	230c      	movs	r3, #12
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	f8ca 3000 	str.w	r3, [sl]
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c816:	81a3      	strh	r3, [r4, #12]
 800c818:	e7e9      	b.n	800c7ee <__ssputs_r+0x8a>
	...

0800c81c <_svfiprintf_r>:
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	4698      	mov	r8, r3
 800c822:	898b      	ldrh	r3, [r1, #12]
 800c824:	b09d      	sub	sp, #116	@ 0x74
 800c826:	4607      	mov	r7, r0
 800c828:	061b      	lsls	r3, r3, #24
 800c82a:	460d      	mov	r5, r1
 800c82c:	4614      	mov	r4, r2
 800c82e:	d510      	bpl.n	800c852 <_svfiprintf_r+0x36>
 800c830:	690b      	ldr	r3, [r1, #16]
 800c832:	b973      	cbnz	r3, 800c852 <_svfiprintf_r+0x36>
 800c834:	2140      	movs	r1, #64	@ 0x40
 800c836:	f7ff f989 	bl	800bb4c <_malloc_r>
 800c83a:	6028      	str	r0, [r5, #0]
 800c83c:	6128      	str	r0, [r5, #16]
 800c83e:	b930      	cbnz	r0, 800c84e <_svfiprintf_r+0x32>
 800c840:	230c      	movs	r3, #12
 800c842:	603b      	str	r3, [r7, #0]
 800c844:	f04f 30ff 	mov.w	r0, #4294967295
 800c848:	b01d      	add	sp, #116	@ 0x74
 800c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	2340      	movs	r3, #64	@ 0x40
 800c850:	616b      	str	r3, [r5, #20]
 800c852:	2300      	movs	r3, #0
 800c854:	f8cd 800c 	str.w	r8, [sp, #12]
 800c858:	f04f 0901 	mov.w	r9, #1
 800c85c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ca00 <_svfiprintf_r+0x1e4>
 800c860:	9309      	str	r3, [sp, #36]	@ 0x24
 800c862:	2320      	movs	r3, #32
 800c864:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c868:	2330      	movs	r3, #48	@ 0x30
 800c86a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c86e:	4623      	mov	r3, r4
 800c870:	469a      	mov	sl, r3
 800c872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c876:	b10a      	cbz	r2, 800c87c <_svfiprintf_r+0x60>
 800c878:	2a25      	cmp	r2, #37	@ 0x25
 800c87a:	d1f9      	bne.n	800c870 <_svfiprintf_r+0x54>
 800c87c:	ebba 0b04 	subs.w	fp, sl, r4
 800c880:	d00b      	beq.n	800c89a <_svfiprintf_r+0x7e>
 800c882:	465b      	mov	r3, fp
 800c884:	4622      	mov	r2, r4
 800c886:	4629      	mov	r1, r5
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff ff6b 	bl	800c764 <__ssputs_r>
 800c88e:	3001      	adds	r0, #1
 800c890:	f000 80a7 	beq.w	800c9e2 <_svfiprintf_r+0x1c6>
 800c894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c896:	445a      	add	r2, fp
 800c898:	9209      	str	r2, [sp, #36]	@ 0x24
 800c89a:	f89a 3000 	ldrb.w	r3, [sl]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 809f 	beq.w	800c9e2 <_svfiprintf_r+0x1c6>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8aa:	f10a 0a01 	add.w	sl, sl, #1
 800c8ae:	9304      	str	r3, [sp, #16]
 800c8b0:	9307      	str	r3, [sp, #28]
 800c8b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8bc:	4654      	mov	r4, sl
 800c8be:	2205      	movs	r2, #5
 800c8c0:	484f      	ldr	r0, [pc, #316]	@ (800ca00 <_svfiprintf_r+0x1e4>)
 800c8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c6:	f7ff fee8 	bl	800c69a <memchr>
 800c8ca:	9a04      	ldr	r2, [sp, #16]
 800c8cc:	b9d8      	cbnz	r0, 800c906 <_svfiprintf_r+0xea>
 800c8ce:	06d0      	lsls	r0, r2, #27
 800c8d0:	bf44      	itt	mi
 800c8d2:	2320      	movmi	r3, #32
 800c8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8d8:	0711      	lsls	r1, r2, #28
 800c8da:	bf44      	itt	mi
 800c8dc:	232b      	movmi	r3, #43	@ 0x2b
 800c8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8e8:	d015      	beq.n	800c916 <_svfiprintf_r+0xfa>
 800c8ea:	9a07      	ldr	r2, [sp, #28]
 800c8ec:	4654      	mov	r4, sl
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	f04f 0c0a 	mov.w	ip, #10
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8fa:	3b30      	subs	r3, #48	@ 0x30
 800c8fc:	2b09      	cmp	r3, #9
 800c8fe:	d94b      	bls.n	800c998 <_svfiprintf_r+0x17c>
 800c900:	b1b0      	cbz	r0, 800c930 <_svfiprintf_r+0x114>
 800c902:	9207      	str	r2, [sp, #28]
 800c904:	e014      	b.n	800c930 <_svfiprintf_r+0x114>
 800c906:	eba0 0308 	sub.w	r3, r0, r8
 800c90a:	46a2      	mov	sl, r4
 800c90c:	fa09 f303 	lsl.w	r3, r9, r3
 800c910:	4313      	orrs	r3, r2
 800c912:	9304      	str	r3, [sp, #16]
 800c914:	e7d2      	b.n	800c8bc <_svfiprintf_r+0xa0>
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	1d19      	adds	r1, r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	9103      	str	r1, [sp, #12]
 800c920:	bfbb      	ittet	lt
 800c922:	425b      	neglt	r3, r3
 800c924:	f042 0202 	orrlt.w	r2, r2, #2
 800c928:	9307      	strge	r3, [sp, #28]
 800c92a:	9307      	strlt	r3, [sp, #28]
 800c92c:	bfb8      	it	lt
 800c92e:	9204      	strlt	r2, [sp, #16]
 800c930:	7823      	ldrb	r3, [r4, #0]
 800c932:	2b2e      	cmp	r3, #46	@ 0x2e
 800c934:	d10a      	bne.n	800c94c <_svfiprintf_r+0x130>
 800c936:	7863      	ldrb	r3, [r4, #1]
 800c938:	2b2a      	cmp	r3, #42	@ 0x2a
 800c93a:	d132      	bne.n	800c9a2 <_svfiprintf_r+0x186>
 800c93c:	9b03      	ldr	r3, [sp, #12]
 800c93e:	3402      	adds	r4, #2
 800c940:	1d1a      	adds	r2, r3, #4
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c948:	9203      	str	r2, [sp, #12]
 800c94a:	9305      	str	r3, [sp, #20]
 800c94c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca10 <_svfiprintf_r+0x1f4>
 800c950:	2203      	movs	r2, #3
 800c952:	7821      	ldrb	r1, [r4, #0]
 800c954:	4650      	mov	r0, sl
 800c956:	f7ff fea0 	bl	800c69a <memchr>
 800c95a:	b138      	cbz	r0, 800c96c <_svfiprintf_r+0x150>
 800c95c:	eba0 000a 	sub.w	r0, r0, sl
 800c960:	2240      	movs	r2, #64	@ 0x40
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	3401      	adds	r4, #1
 800c966:	4082      	lsls	r2, r0
 800c968:	4313      	orrs	r3, r2
 800c96a:	9304      	str	r3, [sp, #16]
 800c96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c970:	2206      	movs	r2, #6
 800c972:	4824      	ldr	r0, [pc, #144]	@ (800ca04 <_svfiprintf_r+0x1e8>)
 800c974:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c978:	f7ff fe8f 	bl	800c69a <memchr>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d036      	beq.n	800c9ee <_svfiprintf_r+0x1d2>
 800c980:	4b21      	ldr	r3, [pc, #132]	@ (800ca08 <_svfiprintf_r+0x1ec>)
 800c982:	bb1b      	cbnz	r3, 800c9cc <_svfiprintf_r+0x1b0>
 800c984:	9b03      	ldr	r3, [sp, #12]
 800c986:	3307      	adds	r3, #7
 800c988:	f023 0307 	bic.w	r3, r3, #7
 800c98c:	3308      	adds	r3, #8
 800c98e:	9303      	str	r3, [sp, #12]
 800c990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c992:	4433      	add	r3, r6
 800c994:	9309      	str	r3, [sp, #36]	@ 0x24
 800c996:	e76a      	b.n	800c86e <_svfiprintf_r+0x52>
 800c998:	fb0c 3202 	mla	r2, ip, r2, r3
 800c99c:	460c      	mov	r4, r1
 800c99e:	2001      	movs	r0, #1
 800c9a0:	e7a8      	b.n	800c8f4 <_svfiprintf_r+0xd8>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	3401      	adds	r4, #1
 800c9a6:	f04f 0c0a 	mov.w	ip, #10
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	9305      	str	r3, [sp, #20]
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9b4:	3a30      	subs	r2, #48	@ 0x30
 800c9b6:	2a09      	cmp	r2, #9
 800c9b8:	d903      	bls.n	800c9c2 <_svfiprintf_r+0x1a6>
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d0c6      	beq.n	800c94c <_svfiprintf_r+0x130>
 800c9be:	9105      	str	r1, [sp, #20]
 800c9c0:	e7c4      	b.n	800c94c <_svfiprintf_r+0x130>
 800c9c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e7f0      	b.n	800c9ae <_svfiprintf_r+0x192>
 800c9cc:	ab03      	add	r3, sp, #12
 800c9ce:	462a      	mov	r2, r5
 800c9d0:	a904      	add	r1, sp, #16
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800ca0c <_svfiprintf_r+0x1f0>)
 800c9d8:	f3af 8000 	nop.w
 800c9dc:	1c42      	adds	r2, r0, #1
 800c9de:	4606      	mov	r6, r0
 800c9e0:	d1d6      	bne.n	800c990 <_svfiprintf_r+0x174>
 800c9e2:	89ab      	ldrh	r3, [r5, #12]
 800c9e4:	065b      	lsls	r3, r3, #25
 800c9e6:	f53f af2d 	bmi.w	800c844 <_svfiprintf_r+0x28>
 800c9ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9ec:	e72c      	b.n	800c848 <_svfiprintf_r+0x2c>
 800c9ee:	ab03      	add	r3, sp, #12
 800c9f0:	462a      	mov	r2, r5
 800c9f2:	a904      	add	r1, sp, #16
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	4b04      	ldr	r3, [pc, #16]	@ (800ca0c <_svfiprintf_r+0x1f0>)
 800c9fa:	f000 f9bf 	bl	800cd7c <_printf_i>
 800c9fe:	e7ed      	b.n	800c9dc <_svfiprintf_r+0x1c0>
 800ca00:	0800d3dc 	.word	0x0800d3dc
 800ca04:	0800d3e6 	.word	0x0800d3e6
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	0800c765 	.word	0x0800c765
 800ca10:	0800d3e2 	.word	0x0800d3e2

0800ca14 <__sfputc_r>:
 800ca14:	6893      	ldr	r3, [r2, #8]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	b410      	push	{r4}
 800ca1c:	6093      	str	r3, [r2, #8]
 800ca1e:	da08      	bge.n	800ca32 <__sfputc_r+0x1e>
 800ca20:	6994      	ldr	r4, [r2, #24]
 800ca22:	42a3      	cmp	r3, r4
 800ca24:	db01      	blt.n	800ca2a <__sfputc_r+0x16>
 800ca26:	290a      	cmp	r1, #10
 800ca28:	d103      	bne.n	800ca32 <__sfputc_r+0x1e>
 800ca2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca2e:	f7ff bcd0 	b.w	800c3d2 <__swbuf_r>
 800ca32:	6813      	ldr	r3, [r2, #0]
 800ca34:	1c58      	adds	r0, r3, #1
 800ca36:	6010      	str	r0, [r2, #0]
 800ca38:	4608      	mov	r0, r1
 800ca3a:	7019      	strb	r1, [r3, #0]
 800ca3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <__sfputs_r>:
 800ca42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca44:	4606      	mov	r6, r0
 800ca46:	460f      	mov	r7, r1
 800ca48:	4614      	mov	r4, r2
 800ca4a:	18d5      	adds	r5, r2, r3
 800ca4c:	42ac      	cmp	r4, r5
 800ca4e:	d101      	bne.n	800ca54 <__sfputs_r+0x12>
 800ca50:	2000      	movs	r0, #0
 800ca52:	e007      	b.n	800ca64 <__sfputs_r+0x22>
 800ca54:	463a      	mov	r2, r7
 800ca56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff ffda 	bl	800ca14 <__sfputc_r>
 800ca60:	1c43      	adds	r3, r0, #1
 800ca62:	d1f3      	bne.n	800ca4c <__sfputs_r+0xa>
 800ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca68 <_vfiprintf_r>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	460d      	mov	r5, r1
 800ca6e:	b09d      	sub	sp, #116	@ 0x74
 800ca70:	4614      	mov	r4, r2
 800ca72:	4698      	mov	r8, r3
 800ca74:	4606      	mov	r6, r0
 800ca76:	b118      	cbz	r0, 800ca80 <_vfiprintf_r+0x18>
 800ca78:	6a03      	ldr	r3, [r0, #32]
 800ca7a:	b90b      	cbnz	r3, 800ca80 <_vfiprintf_r+0x18>
 800ca7c:	f7ff fab0 	bl	800bfe0 <__sinit>
 800ca80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca82:	07d9      	lsls	r1, r3, #31
 800ca84:	d405      	bmi.n	800ca92 <_vfiprintf_r+0x2a>
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	059a      	lsls	r2, r3, #22
 800ca8a:	d402      	bmi.n	800ca92 <_vfiprintf_r+0x2a>
 800ca8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca8e:	f7ff fe02 	bl	800c696 <__retarget_lock_acquire_recursive>
 800ca92:	89ab      	ldrh	r3, [r5, #12]
 800ca94:	071b      	lsls	r3, r3, #28
 800ca96:	d501      	bpl.n	800ca9c <_vfiprintf_r+0x34>
 800ca98:	692b      	ldr	r3, [r5, #16]
 800ca9a:	b99b      	cbnz	r3, 800cac4 <_vfiprintf_r+0x5c>
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f7ff fcd6 	bl	800c450 <__swsetup_r>
 800caa4:	b170      	cbz	r0, 800cac4 <_vfiprintf_r+0x5c>
 800caa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800caa8:	07dc      	lsls	r4, r3, #31
 800caaa:	d504      	bpl.n	800cab6 <_vfiprintf_r+0x4e>
 800caac:	f04f 30ff 	mov.w	r0, #4294967295
 800cab0:	b01d      	add	sp, #116	@ 0x74
 800cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab6:	89ab      	ldrh	r3, [r5, #12]
 800cab8:	0598      	lsls	r0, r3, #22
 800caba:	d4f7      	bmi.n	800caac <_vfiprintf_r+0x44>
 800cabc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cabe:	f7ff fdeb 	bl	800c698 <__retarget_lock_release_recursive>
 800cac2:	e7f3      	b.n	800caac <_vfiprintf_r+0x44>
 800cac4:	2300      	movs	r3, #0
 800cac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800caca:	f04f 0901 	mov.w	r9, #1
 800cace:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800cc84 <_vfiprintf_r+0x21c>
 800cad2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cad4:	2320      	movs	r3, #32
 800cad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cada:	2330      	movs	r3, #48	@ 0x30
 800cadc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cae0:	4623      	mov	r3, r4
 800cae2:	469a      	mov	sl, r3
 800cae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cae8:	b10a      	cbz	r2, 800caee <_vfiprintf_r+0x86>
 800caea:	2a25      	cmp	r2, #37	@ 0x25
 800caec:	d1f9      	bne.n	800cae2 <_vfiprintf_r+0x7a>
 800caee:	ebba 0b04 	subs.w	fp, sl, r4
 800caf2:	d00b      	beq.n	800cb0c <_vfiprintf_r+0xa4>
 800caf4:	465b      	mov	r3, fp
 800caf6:	4622      	mov	r2, r4
 800caf8:	4629      	mov	r1, r5
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7ff ffa1 	bl	800ca42 <__sfputs_r>
 800cb00:	3001      	adds	r0, #1
 800cb02:	f000 80a7 	beq.w	800cc54 <_vfiprintf_r+0x1ec>
 800cb06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb08:	445a      	add	r2, fp
 800cb0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 809f 	beq.w	800cc54 <_vfiprintf_r+0x1ec>
 800cb16:	2300      	movs	r3, #0
 800cb18:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1c:	f10a 0a01 	add.w	sl, sl, #1
 800cb20:	9304      	str	r3, [sp, #16]
 800cb22:	9307      	str	r3, [sp, #28]
 800cb24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb28:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb2e:	4654      	mov	r4, sl
 800cb30:	2205      	movs	r2, #5
 800cb32:	4854      	ldr	r0, [pc, #336]	@ (800cc84 <_vfiprintf_r+0x21c>)
 800cb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb38:	f7ff fdaf 	bl	800c69a <memchr>
 800cb3c:	9a04      	ldr	r2, [sp, #16]
 800cb3e:	b9d8      	cbnz	r0, 800cb78 <_vfiprintf_r+0x110>
 800cb40:	06d1      	lsls	r1, r2, #27
 800cb42:	bf44      	itt	mi
 800cb44:	2320      	movmi	r3, #32
 800cb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb4a:	0713      	lsls	r3, r2, #28
 800cb4c:	bf44      	itt	mi
 800cb4e:	232b      	movmi	r3, #43	@ 0x2b
 800cb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb54:	f89a 3000 	ldrb.w	r3, [sl]
 800cb58:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb5a:	d015      	beq.n	800cb88 <_vfiprintf_r+0x120>
 800cb5c:	9a07      	ldr	r2, [sp, #28]
 800cb5e:	4654      	mov	r4, sl
 800cb60:	2000      	movs	r0, #0
 800cb62:	f04f 0c0a 	mov.w	ip, #10
 800cb66:	4621      	mov	r1, r4
 800cb68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb6c:	3b30      	subs	r3, #48	@ 0x30
 800cb6e:	2b09      	cmp	r3, #9
 800cb70:	d94b      	bls.n	800cc0a <_vfiprintf_r+0x1a2>
 800cb72:	b1b0      	cbz	r0, 800cba2 <_vfiprintf_r+0x13a>
 800cb74:	9207      	str	r2, [sp, #28]
 800cb76:	e014      	b.n	800cba2 <_vfiprintf_r+0x13a>
 800cb78:	eba0 0308 	sub.w	r3, r0, r8
 800cb7c:	46a2      	mov	sl, r4
 800cb7e:	fa09 f303 	lsl.w	r3, r9, r3
 800cb82:	4313      	orrs	r3, r2
 800cb84:	9304      	str	r3, [sp, #16]
 800cb86:	e7d2      	b.n	800cb2e <_vfiprintf_r+0xc6>
 800cb88:	9b03      	ldr	r3, [sp, #12]
 800cb8a:	1d19      	adds	r1, r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	9103      	str	r1, [sp, #12]
 800cb92:	bfbb      	ittet	lt
 800cb94:	425b      	neglt	r3, r3
 800cb96:	f042 0202 	orrlt.w	r2, r2, #2
 800cb9a:	9307      	strge	r3, [sp, #28]
 800cb9c:	9307      	strlt	r3, [sp, #28]
 800cb9e:	bfb8      	it	lt
 800cba0:	9204      	strlt	r2, [sp, #16]
 800cba2:	7823      	ldrb	r3, [r4, #0]
 800cba4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cba6:	d10a      	bne.n	800cbbe <_vfiprintf_r+0x156>
 800cba8:	7863      	ldrb	r3, [r4, #1]
 800cbaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbac:	d132      	bne.n	800cc14 <_vfiprintf_r+0x1ac>
 800cbae:	9b03      	ldr	r3, [sp, #12]
 800cbb0:	3402      	adds	r4, #2
 800cbb2:	1d1a      	adds	r2, r3, #4
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbba:	9203      	str	r2, [sp, #12]
 800cbbc:	9305      	str	r3, [sp, #20]
 800cbbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc94 <_vfiprintf_r+0x22c>
 800cbc2:	2203      	movs	r2, #3
 800cbc4:	7821      	ldrb	r1, [r4, #0]
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	f7ff fd67 	bl	800c69a <memchr>
 800cbcc:	b138      	cbz	r0, 800cbde <_vfiprintf_r+0x176>
 800cbce:	eba0 000a 	sub.w	r0, r0, sl
 800cbd2:	2240      	movs	r2, #64	@ 0x40
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	3401      	adds	r4, #1
 800cbd8:	4082      	lsls	r2, r0
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	9304      	str	r3, [sp, #16]
 800cbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe2:	2206      	movs	r2, #6
 800cbe4:	4828      	ldr	r0, [pc, #160]	@ (800cc88 <_vfiprintf_r+0x220>)
 800cbe6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbea:	f7ff fd56 	bl	800c69a <memchr>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d03f      	beq.n	800cc72 <_vfiprintf_r+0x20a>
 800cbf2:	4b26      	ldr	r3, [pc, #152]	@ (800cc8c <_vfiprintf_r+0x224>)
 800cbf4:	bb1b      	cbnz	r3, 800cc3e <_vfiprintf_r+0x1d6>
 800cbf6:	9b03      	ldr	r3, [sp, #12]
 800cbf8:	3307      	adds	r3, #7
 800cbfa:	f023 0307 	bic.w	r3, r3, #7
 800cbfe:	3308      	adds	r3, #8
 800cc00:	9303      	str	r3, [sp, #12]
 800cc02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc04:	443b      	add	r3, r7
 800cc06:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc08:	e76a      	b.n	800cae0 <_vfiprintf_r+0x78>
 800cc0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc0e:	460c      	mov	r4, r1
 800cc10:	2001      	movs	r0, #1
 800cc12:	e7a8      	b.n	800cb66 <_vfiprintf_r+0xfe>
 800cc14:	2300      	movs	r3, #0
 800cc16:	3401      	adds	r4, #1
 800cc18:	f04f 0c0a 	mov.w	ip, #10
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	9305      	str	r3, [sp, #20]
 800cc20:	4620      	mov	r0, r4
 800cc22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc26:	3a30      	subs	r2, #48	@ 0x30
 800cc28:	2a09      	cmp	r2, #9
 800cc2a:	d903      	bls.n	800cc34 <_vfiprintf_r+0x1cc>
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d0c6      	beq.n	800cbbe <_vfiprintf_r+0x156>
 800cc30:	9105      	str	r1, [sp, #20]
 800cc32:	e7c4      	b.n	800cbbe <_vfiprintf_r+0x156>
 800cc34:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc38:	4604      	mov	r4, r0
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e7f0      	b.n	800cc20 <_vfiprintf_r+0x1b8>
 800cc3e:	ab03      	add	r3, sp, #12
 800cc40:	462a      	mov	r2, r5
 800cc42:	a904      	add	r1, sp, #16
 800cc44:	4630      	mov	r0, r6
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	4b11      	ldr	r3, [pc, #68]	@ (800cc90 <_vfiprintf_r+0x228>)
 800cc4a:	f3af 8000 	nop.w
 800cc4e:	4607      	mov	r7, r0
 800cc50:	1c78      	adds	r0, r7, #1
 800cc52:	d1d6      	bne.n	800cc02 <_vfiprintf_r+0x19a>
 800cc54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc56:	07d9      	lsls	r1, r3, #31
 800cc58:	d405      	bmi.n	800cc66 <_vfiprintf_r+0x1fe>
 800cc5a:	89ab      	ldrh	r3, [r5, #12]
 800cc5c:	059a      	lsls	r2, r3, #22
 800cc5e:	d402      	bmi.n	800cc66 <_vfiprintf_r+0x1fe>
 800cc60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc62:	f7ff fd19 	bl	800c698 <__retarget_lock_release_recursive>
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	065b      	lsls	r3, r3, #25
 800cc6a:	f53f af1f 	bmi.w	800caac <_vfiprintf_r+0x44>
 800cc6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc70:	e71e      	b.n	800cab0 <_vfiprintf_r+0x48>
 800cc72:	ab03      	add	r3, sp, #12
 800cc74:	462a      	mov	r2, r5
 800cc76:	a904      	add	r1, sp, #16
 800cc78:	4630      	mov	r0, r6
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4b04      	ldr	r3, [pc, #16]	@ (800cc90 <_vfiprintf_r+0x228>)
 800cc7e:	f000 f87d 	bl	800cd7c <_printf_i>
 800cc82:	e7e4      	b.n	800cc4e <_vfiprintf_r+0x1e6>
 800cc84:	0800d3dc 	.word	0x0800d3dc
 800cc88:	0800d3e6 	.word	0x0800d3e6
 800cc8c:	00000000 	.word	0x00000000
 800cc90:	0800ca43 	.word	0x0800ca43
 800cc94:	0800d3e2 	.word	0x0800d3e2

0800cc98 <_printf_common>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	4616      	mov	r6, r2
 800cc9e:	4698      	mov	r8, r3
 800cca0:	688a      	ldr	r2, [r1, #8]
 800cca2:	4607      	mov	r7, r0
 800cca4:	690b      	ldr	r3, [r1, #16]
 800cca6:	460c      	mov	r4, r1
 800cca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccac:	4293      	cmp	r3, r2
 800ccae:	bfb8      	it	lt
 800ccb0:	4613      	movlt	r3, r2
 800ccb2:	6033      	str	r3, [r6, #0]
 800ccb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ccb8:	b10a      	cbz	r2, 800ccbe <_printf_common+0x26>
 800ccba:	3301      	adds	r3, #1
 800ccbc:	6033      	str	r3, [r6, #0]
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	0699      	lsls	r1, r3, #26
 800ccc2:	bf42      	ittt	mi
 800ccc4:	6833      	ldrmi	r3, [r6, #0]
 800ccc6:	3302      	addmi	r3, #2
 800ccc8:	6033      	strmi	r3, [r6, #0]
 800ccca:	6825      	ldr	r5, [r4, #0]
 800cccc:	f015 0506 	ands.w	r5, r5, #6
 800ccd0:	d106      	bne.n	800cce0 <_printf_common+0x48>
 800ccd2:	f104 0a19 	add.w	sl, r4, #25
 800ccd6:	68e3      	ldr	r3, [r4, #12]
 800ccd8:	6832      	ldr	r2, [r6, #0]
 800ccda:	1a9b      	subs	r3, r3, r2
 800ccdc:	42ab      	cmp	r3, r5
 800ccde:	dc2b      	bgt.n	800cd38 <_printf_common+0xa0>
 800cce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cce4:	6822      	ldr	r2, [r4, #0]
 800cce6:	3b00      	subs	r3, #0
 800cce8:	bf18      	it	ne
 800ccea:	2301      	movne	r3, #1
 800ccec:	0692      	lsls	r2, r2, #26
 800ccee:	d430      	bmi.n	800cd52 <_printf_common+0xba>
 800ccf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ccf4:	4641      	mov	r1, r8
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	47c8      	blx	r9
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	d023      	beq.n	800cd46 <_printf_common+0xae>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	341a      	adds	r4, #26
 800cd02:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800cd06:	f003 0306 	and.w	r3, r3, #6
 800cd0a:	2b04      	cmp	r3, #4
 800cd0c:	bf0a      	itet	eq
 800cd0e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800cd12:	2500      	movne	r5, #0
 800cd14:	6833      	ldreq	r3, [r6, #0]
 800cd16:	f04f 0600 	mov.w	r6, #0
 800cd1a:	bf08      	it	eq
 800cd1c:	1aed      	subeq	r5, r5, r3
 800cd1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cd22:	bf08      	it	eq
 800cd24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	bfc4      	itt	gt
 800cd2c:	1a9b      	subgt	r3, r3, r2
 800cd2e:	18ed      	addgt	r5, r5, r3
 800cd30:	42b5      	cmp	r5, r6
 800cd32:	d11a      	bne.n	800cd6a <_printf_common+0xd2>
 800cd34:	2000      	movs	r0, #0
 800cd36:	e008      	b.n	800cd4a <_printf_common+0xb2>
 800cd38:	2301      	movs	r3, #1
 800cd3a:	4652      	mov	r2, sl
 800cd3c:	4641      	mov	r1, r8
 800cd3e:	4638      	mov	r0, r7
 800cd40:	47c8      	blx	r9
 800cd42:	3001      	adds	r0, #1
 800cd44:	d103      	bne.n	800cd4e <_printf_common+0xb6>
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd4e:	3501      	adds	r5, #1
 800cd50:	e7c1      	b.n	800ccd6 <_printf_common+0x3e>
 800cd52:	18e1      	adds	r1, r4, r3
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	2030      	movs	r0, #48	@ 0x30
 800cd58:	3302      	adds	r3, #2
 800cd5a:	4422      	add	r2, r4
 800cd5c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd68:	e7c2      	b.n	800ccf0 <_printf_common+0x58>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	4641      	mov	r1, r8
 800cd70:	4638      	mov	r0, r7
 800cd72:	47c8      	blx	r9
 800cd74:	3001      	adds	r0, #1
 800cd76:	d0e6      	beq.n	800cd46 <_printf_common+0xae>
 800cd78:	3601      	adds	r6, #1
 800cd7a:	e7d9      	b.n	800cd30 <_printf_common+0x98>

0800cd7c <_printf_i>:
 800cd7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd80:	7e0f      	ldrb	r7, [r1, #24]
 800cd82:	4691      	mov	r9, r2
 800cd84:	4680      	mov	r8, r0
 800cd86:	460c      	mov	r4, r1
 800cd88:	2f78      	cmp	r7, #120	@ 0x78
 800cd8a:	469a      	mov	sl, r3
 800cd8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd92:	d807      	bhi.n	800cda4 <_printf_i+0x28>
 800cd94:	2f62      	cmp	r7, #98	@ 0x62
 800cd96:	d80a      	bhi.n	800cdae <_printf_i+0x32>
 800cd98:	2f00      	cmp	r7, #0
 800cd9a:	f000 80d1 	beq.w	800cf40 <_printf_i+0x1c4>
 800cd9e:	2f58      	cmp	r7, #88	@ 0x58
 800cda0:	f000 80b8 	beq.w	800cf14 <_printf_i+0x198>
 800cda4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cda8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdac:	e03a      	b.n	800ce24 <_printf_i+0xa8>
 800cdae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdb2:	2b15      	cmp	r3, #21
 800cdb4:	d8f6      	bhi.n	800cda4 <_printf_i+0x28>
 800cdb6:	a101      	add	r1, pc, #4	@ (adr r1, 800cdbc <_printf_i+0x40>)
 800cdb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdbc:	0800ce15 	.word	0x0800ce15
 800cdc0:	0800ce29 	.word	0x0800ce29
 800cdc4:	0800cda5 	.word	0x0800cda5
 800cdc8:	0800cda5 	.word	0x0800cda5
 800cdcc:	0800cda5 	.word	0x0800cda5
 800cdd0:	0800cda5 	.word	0x0800cda5
 800cdd4:	0800ce29 	.word	0x0800ce29
 800cdd8:	0800cda5 	.word	0x0800cda5
 800cddc:	0800cda5 	.word	0x0800cda5
 800cde0:	0800cda5 	.word	0x0800cda5
 800cde4:	0800cda5 	.word	0x0800cda5
 800cde8:	0800cf27 	.word	0x0800cf27
 800cdec:	0800ce53 	.word	0x0800ce53
 800cdf0:	0800cee1 	.word	0x0800cee1
 800cdf4:	0800cda5 	.word	0x0800cda5
 800cdf8:	0800cda5 	.word	0x0800cda5
 800cdfc:	0800cf49 	.word	0x0800cf49
 800ce00:	0800cda5 	.word	0x0800cda5
 800ce04:	0800ce53 	.word	0x0800ce53
 800ce08:	0800cda5 	.word	0x0800cda5
 800ce0c:	0800cda5 	.word	0x0800cda5
 800ce10:	0800cee9 	.word	0x0800cee9
 800ce14:	6833      	ldr	r3, [r6, #0]
 800ce16:	1d1a      	adds	r2, r3, #4
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	6032      	str	r2, [r6, #0]
 800ce1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce24:	2301      	movs	r3, #1
 800ce26:	e09c      	b.n	800cf62 <_printf_i+0x1e6>
 800ce28:	6833      	ldr	r3, [r6, #0]
 800ce2a:	6820      	ldr	r0, [r4, #0]
 800ce2c:	1d19      	adds	r1, r3, #4
 800ce2e:	6031      	str	r1, [r6, #0]
 800ce30:	0606      	lsls	r6, r0, #24
 800ce32:	d501      	bpl.n	800ce38 <_printf_i+0xbc>
 800ce34:	681d      	ldr	r5, [r3, #0]
 800ce36:	e003      	b.n	800ce40 <_printf_i+0xc4>
 800ce38:	0645      	lsls	r5, r0, #25
 800ce3a:	d5fb      	bpl.n	800ce34 <_printf_i+0xb8>
 800ce3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce40:	2d00      	cmp	r5, #0
 800ce42:	da03      	bge.n	800ce4c <_printf_i+0xd0>
 800ce44:	232d      	movs	r3, #45	@ 0x2d
 800ce46:	426d      	negs	r5, r5
 800ce48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce4c:	4858      	ldr	r0, [pc, #352]	@ (800cfb0 <_printf_i+0x234>)
 800ce4e:	230a      	movs	r3, #10
 800ce50:	e011      	b.n	800ce76 <_printf_i+0xfa>
 800ce52:	6821      	ldr	r1, [r4, #0]
 800ce54:	6833      	ldr	r3, [r6, #0]
 800ce56:	0608      	lsls	r0, r1, #24
 800ce58:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce5c:	d402      	bmi.n	800ce64 <_printf_i+0xe8>
 800ce5e:	0649      	lsls	r1, r1, #25
 800ce60:	bf48      	it	mi
 800ce62:	b2ad      	uxthmi	r5, r5
 800ce64:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce66:	6033      	str	r3, [r6, #0]
 800ce68:	4851      	ldr	r0, [pc, #324]	@ (800cfb0 <_printf_i+0x234>)
 800ce6a:	bf14      	ite	ne
 800ce6c:	230a      	movne	r3, #10
 800ce6e:	2308      	moveq	r3, #8
 800ce70:	2100      	movs	r1, #0
 800ce72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce76:	6866      	ldr	r6, [r4, #4]
 800ce78:	2e00      	cmp	r6, #0
 800ce7a:	60a6      	str	r6, [r4, #8]
 800ce7c:	db05      	blt.n	800ce8a <_printf_i+0x10e>
 800ce7e:	6821      	ldr	r1, [r4, #0]
 800ce80:	432e      	orrs	r6, r5
 800ce82:	f021 0104 	bic.w	r1, r1, #4
 800ce86:	6021      	str	r1, [r4, #0]
 800ce88:	d04b      	beq.n	800cf22 <_printf_i+0x1a6>
 800ce8a:	4616      	mov	r6, r2
 800ce8c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce90:	fb03 5711 	mls	r7, r3, r1, r5
 800ce94:	5dc7      	ldrb	r7, [r0, r7]
 800ce96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce9a:	462f      	mov	r7, r5
 800ce9c:	460d      	mov	r5, r1
 800ce9e:	42bb      	cmp	r3, r7
 800cea0:	d9f4      	bls.n	800ce8c <_printf_i+0x110>
 800cea2:	2b08      	cmp	r3, #8
 800cea4:	d10b      	bne.n	800cebe <_printf_i+0x142>
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	07df      	lsls	r7, r3, #31
 800ceaa:	d508      	bpl.n	800cebe <_printf_i+0x142>
 800ceac:	6923      	ldr	r3, [r4, #16]
 800ceae:	6861      	ldr	r1, [r4, #4]
 800ceb0:	4299      	cmp	r1, r3
 800ceb2:	bfde      	ittt	le
 800ceb4:	2330      	movle	r3, #48	@ 0x30
 800ceb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ceba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cebe:	1b92      	subs	r2, r2, r6
 800cec0:	6122      	str	r2, [r4, #16]
 800cec2:	464b      	mov	r3, r9
 800cec4:	aa03      	add	r2, sp, #12
 800cec6:	4621      	mov	r1, r4
 800cec8:	4640      	mov	r0, r8
 800ceca:	f8cd a000 	str.w	sl, [sp]
 800cece:	f7ff fee3 	bl	800cc98 <_printf_common>
 800ced2:	3001      	adds	r0, #1
 800ced4:	d14a      	bne.n	800cf6c <_printf_i+0x1f0>
 800ced6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceda:	b004      	add	sp, #16
 800cedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	f043 0320 	orr.w	r3, r3, #32
 800cee6:	6023      	str	r3, [r4, #0]
 800cee8:	2778      	movs	r7, #120	@ 0x78
 800ceea:	4832      	ldr	r0, [pc, #200]	@ (800cfb4 <_printf_i+0x238>)
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cef2:	061f      	lsls	r7, r3, #24
 800cef4:	6831      	ldr	r1, [r6, #0]
 800cef6:	f851 5b04 	ldr.w	r5, [r1], #4
 800cefa:	d402      	bmi.n	800cf02 <_printf_i+0x186>
 800cefc:	065f      	lsls	r7, r3, #25
 800cefe:	bf48      	it	mi
 800cf00:	b2ad      	uxthmi	r5, r5
 800cf02:	6031      	str	r1, [r6, #0]
 800cf04:	07d9      	lsls	r1, r3, #31
 800cf06:	bf44      	itt	mi
 800cf08:	f043 0320 	orrmi.w	r3, r3, #32
 800cf0c:	6023      	strmi	r3, [r4, #0]
 800cf0e:	b11d      	cbz	r5, 800cf18 <_printf_i+0x19c>
 800cf10:	2310      	movs	r3, #16
 800cf12:	e7ad      	b.n	800ce70 <_printf_i+0xf4>
 800cf14:	4826      	ldr	r0, [pc, #152]	@ (800cfb0 <_printf_i+0x234>)
 800cf16:	e7e9      	b.n	800ceec <_printf_i+0x170>
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	f023 0320 	bic.w	r3, r3, #32
 800cf1e:	6023      	str	r3, [r4, #0]
 800cf20:	e7f6      	b.n	800cf10 <_printf_i+0x194>
 800cf22:	4616      	mov	r6, r2
 800cf24:	e7bd      	b.n	800cea2 <_printf_i+0x126>
 800cf26:	6833      	ldr	r3, [r6, #0]
 800cf28:	6825      	ldr	r5, [r4, #0]
 800cf2a:	1d18      	adds	r0, r3, #4
 800cf2c:	6961      	ldr	r1, [r4, #20]
 800cf2e:	6030      	str	r0, [r6, #0]
 800cf30:	062e      	lsls	r6, r5, #24
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	d501      	bpl.n	800cf3a <_printf_i+0x1be>
 800cf36:	6019      	str	r1, [r3, #0]
 800cf38:	e002      	b.n	800cf40 <_printf_i+0x1c4>
 800cf3a:	0668      	lsls	r0, r5, #25
 800cf3c:	d5fb      	bpl.n	800cf36 <_printf_i+0x1ba>
 800cf3e:	8019      	strh	r1, [r3, #0]
 800cf40:	2300      	movs	r3, #0
 800cf42:	4616      	mov	r6, r2
 800cf44:	6123      	str	r3, [r4, #16]
 800cf46:	e7bc      	b.n	800cec2 <_printf_i+0x146>
 800cf48:	6833      	ldr	r3, [r6, #0]
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	1d1a      	adds	r2, r3, #4
 800cf4e:	6032      	str	r2, [r6, #0]
 800cf50:	681e      	ldr	r6, [r3, #0]
 800cf52:	6862      	ldr	r2, [r4, #4]
 800cf54:	4630      	mov	r0, r6
 800cf56:	f7ff fba0 	bl	800c69a <memchr>
 800cf5a:	b108      	cbz	r0, 800cf60 <_printf_i+0x1e4>
 800cf5c:	1b80      	subs	r0, r0, r6
 800cf5e:	6060      	str	r0, [r4, #4]
 800cf60:	6863      	ldr	r3, [r4, #4]
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	2300      	movs	r3, #0
 800cf66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf6a:	e7aa      	b.n	800cec2 <_printf_i+0x146>
 800cf6c:	6923      	ldr	r3, [r4, #16]
 800cf6e:	4632      	mov	r2, r6
 800cf70:	4649      	mov	r1, r9
 800cf72:	4640      	mov	r0, r8
 800cf74:	47d0      	blx	sl
 800cf76:	3001      	adds	r0, #1
 800cf78:	d0ad      	beq.n	800ced6 <_printf_i+0x15a>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	079b      	lsls	r3, r3, #30
 800cf7e:	d413      	bmi.n	800cfa8 <_printf_i+0x22c>
 800cf80:	68e0      	ldr	r0, [r4, #12]
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	4298      	cmp	r0, r3
 800cf86:	bfb8      	it	lt
 800cf88:	4618      	movlt	r0, r3
 800cf8a:	e7a6      	b.n	800ceda <_printf_i+0x15e>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	4632      	mov	r2, r6
 800cf90:	4649      	mov	r1, r9
 800cf92:	4640      	mov	r0, r8
 800cf94:	47d0      	blx	sl
 800cf96:	3001      	adds	r0, #1
 800cf98:	d09d      	beq.n	800ced6 <_printf_i+0x15a>
 800cf9a:	3501      	adds	r5, #1
 800cf9c:	68e3      	ldr	r3, [r4, #12]
 800cf9e:	9903      	ldr	r1, [sp, #12]
 800cfa0:	1a5b      	subs	r3, r3, r1
 800cfa2:	42ab      	cmp	r3, r5
 800cfa4:	dcf2      	bgt.n	800cf8c <_printf_i+0x210>
 800cfa6:	e7eb      	b.n	800cf80 <_printf_i+0x204>
 800cfa8:	2500      	movs	r5, #0
 800cfaa:	f104 0619 	add.w	r6, r4, #25
 800cfae:	e7f5      	b.n	800cf9c <_printf_i+0x220>
 800cfb0:	0800d3ed 	.word	0x0800d3ed
 800cfb4:	0800d3fe 	.word	0x0800d3fe

0800cfb8 <__swhatbuf_r>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	460c      	mov	r4, r1
 800cfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc0:	b096      	sub	sp, #88	@ 0x58
 800cfc2:	4615      	mov	r5, r2
 800cfc4:	2900      	cmp	r1, #0
 800cfc6:	461e      	mov	r6, r3
 800cfc8:	da0c      	bge.n	800cfe4 <__swhatbuf_r+0x2c>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfd2:	bf14      	ite	ne
 800cfd4:	2340      	movne	r3, #64	@ 0x40
 800cfd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfda:	2000      	movs	r0, #0
 800cfdc:	6031      	str	r1, [r6, #0]
 800cfde:	602b      	str	r3, [r5, #0]
 800cfe0:	b016      	add	sp, #88	@ 0x58
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}
 800cfe4:	466a      	mov	r2, sp
 800cfe6:	f000 f863 	bl	800d0b0 <_fstat_r>
 800cfea:	2800      	cmp	r0, #0
 800cfec:	dbed      	blt.n	800cfca <__swhatbuf_r+0x12>
 800cfee:	9901      	ldr	r1, [sp, #4]
 800cff0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cff4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cff8:	4259      	negs	r1, r3
 800cffa:	4159      	adcs	r1, r3
 800cffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d000:	e7eb      	b.n	800cfda <__swhatbuf_r+0x22>

0800d002 <__smakebuf_r>:
 800d002:	898b      	ldrh	r3, [r1, #12]
 800d004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d006:	079d      	lsls	r5, r3, #30
 800d008:	4606      	mov	r6, r0
 800d00a:	460c      	mov	r4, r1
 800d00c:	d507      	bpl.n	800d01e <__smakebuf_r+0x1c>
 800d00e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d012:	6023      	str	r3, [r4, #0]
 800d014:	6123      	str	r3, [r4, #16]
 800d016:	2301      	movs	r3, #1
 800d018:	6163      	str	r3, [r4, #20]
 800d01a:	b003      	add	sp, #12
 800d01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d01e:	ab01      	add	r3, sp, #4
 800d020:	466a      	mov	r2, sp
 800d022:	f7ff ffc9 	bl	800cfb8 <__swhatbuf_r>
 800d026:	9f00      	ldr	r7, [sp, #0]
 800d028:	4605      	mov	r5, r0
 800d02a:	4630      	mov	r0, r6
 800d02c:	4639      	mov	r1, r7
 800d02e:	f7fe fd8d 	bl	800bb4c <_malloc_r>
 800d032:	b948      	cbnz	r0, 800d048 <__smakebuf_r+0x46>
 800d034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d038:	059a      	lsls	r2, r3, #22
 800d03a:	d4ee      	bmi.n	800d01a <__smakebuf_r+0x18>
 800d03c:	f023 0303 	bic.w	r3, r3, #3
 800d040:	f043 0302 	orr.w	r3, r3, #2
 800d044:	81a3      	strh	r3, [r4, #12]
 800d046:	e7e2      	b.n	800d00e <__smakebuf_r+0xc>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	6020      	str	r0, [r4, #0]
 800d04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d050:	81a3      	strh	r3, [r4, #12]
 800d052:	9b01      	ldr	r3, [sp, #4]
 800d054:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d058:	b15b      	cbz	r3, 800d072 <__smakebuf_r+0x70>
 800d05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d05e:	4630      	mov	r0, r6
 800d060:	f000 f838 	bl	800d0d4 <_isatty_r>
 800d064:	b128      	cbz	r0, 800d072 <__smakebuf_r+0x70>
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f023 0303 	bic.w	r3, r3, #3
 800d06c:	f043 0301 	orr.w	r3, r3, #1
 800d070:	81a3      	strh	r3, [r4, #12]
 800d072:	89a3      	ldrh	r3, [r4, #12]
 800d074:	431d      	orrs	r5, r3
 800d076:	81a5      	strh	r5, [r4, #12]
 800d078:	e7cf      	b.n	800d01a <__smakebuf_r+0x18>

0800d07a <memmove>:
 800d07a:	4288      	cmp	r0, r1
 800d07c:	b510      	push	{r4, lr}
 800d07e:	eb01 0402 	add.w	r4, r1, r2
 800d082:	d902      	bls.n	800d08a <memmove+0x10>
 800d084:	4284      	cmp	r4, r0
 800d086:	4623      	mov	r3, r4
 800d088:	d807      	bhi.n	800d09a <memmove+0x20>
 800d08a:	1e43      	subs	r3, r0, #1
 800d08c:	42a1      	cmp	r1, r4
 800d08e:	d008      	beq.n	800d0a2 <memmove+0x28>
 800d090:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d094:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d098:	e7f8      	b.n	800d08c <memmove+0x12>
 800d09a:	4402      	add	r2, r0
 800d09c:	4601      	mov	r1, r0
 800d09e:	428a      	cmp	r2, r1
 800d0a0:	d100      	bne.n	800d0a4 <memmove+0x2a>
 800d0a2:	bd10      	pop	{r4, pc}
 800d0a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0ac:	e7f7      	b.n	800d09e <memmove+0x24>
	...

0800d0b0 <_fstat_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	4d06      	ldr	r5, [pc, #24]	@ (800d0d0 <_fstat_r+0x20>)
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	602b      	str	r3, [r5, #0]
 800d0be:	f7f4 fef6 	bl	8001eae <_fstat>
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	d102      	bne.n	800d0cc <_fstat_r+0x1c>
 800d0c6:	682b      	ldr	r3, [r5, #0]
 800d0c8:	b103      	cbz	r3, 800d0cc <_fstat_r+0x1c>
 800d0ca:	6023      	str	r3, [r4, #0]
 800d0cc:	bd38      	pop	{r3, r4, r5, pc}
 800d0ce:	bf00      	nop
 800d0d0:	200017b4 	.word	0x200017b4

0800d0d4 <_isatty_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4d05      	ldr	r5, [pc, #20]	@ (800d0f0 <_isatty_r+0x1c>)
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4608      	mov	r0, r1
 800d0de:	602b      	str	r3, [r5, #0]
 800d0e0:	f7f4 fef5 	bl	8001ece <_isatty>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d102      	bne.n	800d0ee <_isatty_r+0x1a>
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	b103      	cbz	r3, 800d0ee <_isatty_r+0x1a>
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	200017b4 	.word	0x200017b4

0800d0f4 <_realloc_r>:
 800d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f8:	4607      	mov	r7, r0
 800d0fa:	4614      	mov	r4, r2
 800d0fc:	460d      	mov	r5, r1
 800d0fe:	b921      	cbnz	r1, 800d10a <_realloc_r+0x16>
 800d100:	4611      	mov	r1, r2
 800d102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d106:	f7fe bd21 	b.w	800bb4c <_malloc_r>
 800d10a:	b92a      	cbnz	r2, 800d118 <_realloc_r+0x24>
 800d10c:	4625      	mov	r5, r4
 800d10e:	f7ff fadf 	bl	800c6d0 <_free_r>
 800d112:	4628      	mov	r0, r5
 800d114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d118:	f000 f81a 	bl	800d150 <_malloc_usable_size_r>
 800d11c:	4284      	cmp	r4, r0
 800d11e:	4606      	mov	r6, r0
 800d120:	d802      	bhi.n	800d128 <_realloc_r+0x34>
 800d122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d126:	d8f4      	bhi.n	800d112 <_realloc_r+0x1e>
 800d128:	4621      	mov	r1, r4
 800d12a:	4638      	mov	r0, r7
 800d12c:	f7fe fd0e 	bl	800bb4c <_malloc_r>
 800d130:	4680      	mov	r8, r0
 800d132:	b908      	cbnz	r0, 800d138 <_realloc_r+0x44>
 800d134:	4645      	mov	r5, r8
 800d136:	e7ec      	b.n	800d112 <_realloc_r+0x1e>
 800d138:	42b4      	cmp	r4, r6
 800d13a:	4622      	mov	r2, r4
 800d13c:	4629      	mov	r1, r5
 800d13e:	bf28      	it	cs
 800d140:	4632      	movcs	r2, r6
 800d142:	f7ff fab8 	bl	800c6b6 <memcpy>
 800d146:	4629      	mov	r1, r5
 800d148:	4638      	mov	r0, r7
 800d14a:	f7ff fac1 	bl	800c6d0 <_free_r>
 800d14e:	e7f1      	b.n	800d134 <_realloc_r+0x40>

0800d150 <_malloc_usable_size_r>:
 800d150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d154:	1f18      	subs	r0, r3, #4
 800d156:	2b00      	cmp	r3, #0
 800d158:	bfbc      	itt	lt
 800d15a:	580b      	ldrlt	r3, [r1, r0]
 800d15c:	18c0      	addlt	r0, r0, r3
 800d15e:	4770      	bx	lr

0800d160 <_init>:
 800d160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d162:	bf00      	nop
 800d164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d166:	bc08      	pop	{r3}
 800d168:	469e      	mov	lr, r3
 800d16a:	4770      	bx	lr

0800d16c <_fini>:
 800d16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16e:	bf00      	nop
 800d170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d172:	bc08      	pop	{r3}
 800d174:	469e      	mov	lr, r3
 800d176:	4770      	bx	lr
