
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf34  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800c180  0800c180  0000d180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2a4  0800c2a4  0000e06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800c2a4  0800c2a4  0000e06c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800c2a4  0800c2a4  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2a4  0800c2a4  0000d2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2a8  0800c2a8  0000d2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c2ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001750  2000006c  0800c318  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017bc  0800c318  0000e7bc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b151  00000000  00000000  0000e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003613  00000000  00000000  000291f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002c808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000140e  00000000  00000000  0002e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003024c  00000000  00000000  0002f616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f92f  00000000  00000000  0005f862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00139036  00000000  00000000  0007f191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b81c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077a8  00000000  00000000  001b820c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001bf9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000006c 	.word	0x2000006c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800c168 	.word	0x0800c168

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000070 	.word	0x20000070
 8000288:	0800c168 	.word	0x0800c168

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(int argc, char* argv[])
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f001 fd53 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f817 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f9f5 	bl	800068c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002a2:	f000 f907 	bl	80004b4 <MX_ICACHE_Init>
  MX_TIM2_Init();
 80002a6:	f000 f93d 	bl	8000524 <MX_TIM2_Init>
  MX_I2C1_Init();
 80002aa:	f000 f883 	bl	80003b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80002ae:	f000 f8c1 	bl	8000434 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80002b2:	f000 f913 	bl	80004dc <MX_SDMMC1_SD_Init>
  MX_USB_PCD_Init();
 80002b6:	f000 f9b7 	bl	8000628 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  //debug_log("Running...");
  generateInitialWalls();
 80002ba:	f000 ff63 	bl	8001184 <generateInitialWalls>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Action nextMove = solver();
 80002be:	f001 f8fd 	bl	80014bc <solver>
 80002c2:	4603      	mov	r3, r0
 80002c4:	73fb      	strb	r3, [r7, #15]
  {
 80002c6:	bf00      	nop
 80002c8:	e7f9      	b.n	80002be <main+0x32>
	...

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09c      	sub	sp, #112	@ 0x70
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0320 	add.w	r3, r7, #32
 80002d6:	2250      	movs	r2, #80	@ 0x50
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f00b fda6 	bl	800be2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 0308 	add.w	r3, r7, #8
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
 80002f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80002f2:	4b2e      	ldr	r3, [pc, #184]	@ (80003ac <SystemClock_Config+0xe0>)
 80002f4:	691b      	ldr	r3, [r3, #16]
 80002f6:	4a2d      	ldr	r2, [pc, #180]	@ (80003ac <SystemClock_Config+0xe0>)
 80002f8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002fc:	6113      	str	r3, [r2, #16]
 80002fe:	4b2b      	ldr	r3, [pc, #172]	@ (80003ac <SystemClock_Config+0xe0>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800030a:	bf00      	nop
 800030c:	4b27      	ldr	r3, [pc, #156]	@ (80003ac <SystemClock_Config+0xe0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	2b08      	cmp	r3, #8
 8000316:	d1f9      	bne.n	800030c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000318:	2321      	movs	r3, #33	@ 0x21
 800031a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000320:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000326:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	2302      	movs	r3, #2
 800032a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800032c:	2303      	movs	r3, #3
 800032e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000330:	2301      	movs	r3, #1
 8000332:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000334:	233e      	movs	r3, #62	@ 0x3e
 8000336:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000338:	2302      	movs	r3, #2
 800033a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800033c:	2302      	movs	r3, #2
 800033e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000340:	2302      	movs	r3, #2
 8000342:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000344:	230c      	movs	r3, #12
 8000346:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000348:	2300      	movs	r3, #0
 800034a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800034c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000350:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	f107 0320 	add.w	r3, r7, #32
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fb44 	bl	80029e4 <HAL_RCC_OscConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000362:	f000 fa63 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	231f      	movs	r3, #31
 8000368:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	2303      	movs	r3, #3
 800036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2105      	movs	r1, #5
 8000384:	4618      	mov	r0, r3
 8000386:	f002 ff65 	bl	8003254 <HAL_RCC_ClockConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000390:	f000 fa4c 	bl	800082c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <SystemClock_Config+0xe4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <SystemClock_Config+0xe4>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6013      	str	r3, [r2, #0]
}
 80003a4:	bf00      	nop
 80003a6:	3770      	adds	r7, #112	@ 0x70
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	44020800 	.word	0x44020800
 80003b0:	40022000 	.word	0x40022000

080003b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003ba:	4a1c      	ldr	r2, [pc, #112]	@ (800042c <MX_I2C1_Init+0x78>)
 80003bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <MX_I2C1_Init+0x7c>)
 80003c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c4:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ca:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d0:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003d6:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003dc:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e2:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ee:	480e      	ldr	r0, [pc, #56]	@ (8000428 <MX_I2C1_Init+0x74>)
 80003f0:	f002 f862 	bl	80024b8 <HAL_I2C_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003fa:	f000 fa17 	bl	800082c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003fe:	2100      	movs	r1, #0
 8000400:	4809      	ldr	r0, [pc, #36]	@ (8000428 <MX_I2C1_Init+0x74>)
 8000402:	f002 f8f4 	bl	80025ee <HAL_I2CEx_ConfigAnalogFilter>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800040c:	f000 fa0e 	bl	800082c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000410:	2100      	movs	r1, #0
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_I2C1_Init+0x74>)
 8000414:	f002 f936 	bl	8002684 <HAL_I2CEx_ConfigDigitalFilter>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800041e:	f000 fa05 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000088 	.word	0x20000088
 800042c:	40005400 	.word	0x40005400
 8000430:	60808cd3 	.word	0x60808cd3

08000434 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000438:	4b1b      	ldr	r3, [pc, #108]	@ (80004a8 <MX_I2C2_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_I2C2_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60808CD3;
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <MX_I2C2_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <MX_I2C2_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_I2C2_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_I2C2_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000470:	f002 f822 	bl	80024b8 <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 f9d7 	bl	800082c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000482:	f002 f8b4 	bl	80025ee <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 f9ce 	bl	800082c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <MX_I2C2_Init+0x74>)
 8000494:	f002 f8f6 	bl	8002684 <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f9c5 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000dc 	.word	0x200000dc
 80004ac:	40005800 	.word	0x40005800
 80004b0:	60808cd3 	.word	0x60808cd3

080004b4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80004b8:	2000      	movs	r0, #0
 80004ba:	f002 f92f 	bl	800271c <HAL_ICACHE_ConfigAssociativityMode>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004c4:	f000 f9b2 	bl	800082c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004c8:	f002 f948 	bl	800275c <HAL_ICACHE_Enable>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004d2:	f000 f9ab 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_SDMMC1_SD_Init+0x40>)
 80004e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000520 <MX_SDMMC1_SD_Init+0x44>)
 80004e4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80004e6:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <MX_SDMMC1_SD_Init+0x40>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80004ec:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <MX_SDMMC1_SD_Init+0x40>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <MX_SDMMC1_SD_Init+0x40>)
 80004f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004f8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <MX_SDMMC1_SD_Init+0x40>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <MX_SDMMC1_SD_Init+0x40>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <MX_SDMMC1_SD_Init+0x40>)
 8000508:	f008 f9c6 	bl	8008898 <HAL_SD_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000512:	f000 f98b 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000130 	.word	0x20000130
 8000520:	46008000 	.word	0x46008000

08000524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08e      	sub	sp, #56	@ 0x38
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000538:	f107 031c 	add.w	r3, r7, #28
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000556:	4b33      	ldr	r3, [pc, #204]	@ (8000624 <MX_TIM2_Init+0x100>)
 8000558:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800055c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800055e:	4b31      	ldr	r3, [pc, #196]	@ (8000624 <MX_TIM2_Init+0x100>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000564:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <MX_TIM2_Init+0x100>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800056a:	4b2e      	ldr	r3, [pc, #184]	@ (8000624 <MX_TIM2_Init+0x100>)
 800056c:	f04f 32ff 	mov.w	r2, #4294967295
 8000570:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000572:	4b2c      	ldr	r3, [pc, #176]	@ (8000624 <MX_TIM2_Init+0x100>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000578:	4b2a      	ldr	r3, [pc, #168]	@ (8000624 <MX_TIM2_Init+0x100>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800057e:	4829      	ldr	r0, [pc, #164]	@ (8000624 <MX_TIM2_Init+0x100>)
 8000580:	f009 fa0a 	bl	8009998 <HAL_TIM_Base_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800058a:	f000 f94f 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800058e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000594:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000598:	4619      	mov	r1, r3
 800059a:	4822      	ldr	r0, [pc, #136]	@ (8000624 <MX_TIM2_Init+0x100>)
 800059c:	f009 fbc8 	bl	8009d30 <HAL_TIM_ConfigClockSource>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80005a6:	f000 f941 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005aa:	481e      	ldr	r0, [pc, #120]	@ (8000624 <MX_TIM2_Init+0x100>)
 80005ac:	f009 fa4b 	bl	8009a46 <HAL_TIM_PWM_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80005b6:	f000 f939 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4816      	ldr	r0, [pc, #88]	@ (8000624 <MX_TIM2_Init+0x100>)
 80005ca:	f00a fa6b 	bl	800aaa4 <HAL_TIMEx_MasterConfigSynchronization>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005d4:	f000 f92a 	bl	800082c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d8:	2360      	movs	r3, #96	@ 0x60
 80005da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <MX_TIM2_Init+0x100>)
 80005f0:	f009 fa8a 	bl	8009b08 <HAL_TIM_PWM_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005fa:	f000 f917 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	220c      	movs	r2, #12
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <MX_TIM2_Init+0x100>)
 8000606:	f009 fa7f 	bl	8009b08 <HAL_TIM_PWM_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000610:	f000 f90c 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000614:	4803      	ldr	r0, [pc, #12]	@ (8000624 <MX_TIM2_Init+0x100>)
 8000616:	f001 f943 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 800061a:	bf00      	nop
 800061c:	3738      	adds	r7, #56	@ 0x38
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001ac 	.word	0x200001ac

08000628 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 800062e:	4a16      	ldr	r2, [pc, #88]	@ (8000688 <MX_USB_PCD_Init+0x60>)
 8000630:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 8000634:	2208      	movs	r2, #8
 8000636:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 800063a:	2202      	movs	r2, #2
 800063c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 8000640:	2202      	movs	r2, #2
 8000642:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 8000646:	2200      	movs	r2, #0
 8000648:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 800064c:	2200      	movs	r2, #0
 800064e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 8000652:	2200      	movs	r2, #0
 8000654:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 8000658:	2200      	movs	r2, #0
 800065a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 800065e:	2200      	movs	r2, #0
 8000660:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 8000664:	2200      	movs	r2, #0
 8000666:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 800066a:	2200      	movs	r2, #0
 800066c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_USB_PCD_Init+0x5c>)
 8000670:	f002 f884 	bl	800277c <HAL_PCD_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800067a:	f000 f8d7 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200001f8 	.word	0x200001f8
 8000688:	40016000 	.word	0x40016000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a8:	4a5b      	ldr	r2, [pc, #364]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006b2:	4b59      	ldr	r3, [pc, #356]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c0:	4b55      	ldr	r3, [pc, #340]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c6:	4a54      	ldr	r2, [pc, #336]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d0:	4b51      	ldr	r3, [pc, #324]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b4e      	ldr	r3, [pc, #312]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b46      	ldr	r3, [pc, #280]	@ (8000818 <MX_GPIO_Init+0x18c>)
 80006fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000702:	4a45      	ldr	r2, [pc, #276]	@ (8000818 <MX_GPIO_Init+0x18c>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800070c:	4b42      	ldr	r3, [pc, #264]	@ (8000818 <MX_GPIO_Init+0x18c>)
 800070e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	4b3f      	ldr	r3, [pc, #252]	@ (8000818 <MX_GPIO_Init+0x18c>)
 800071c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000720:	4a3d      	ldr	r2, [pc, #244]	@ (8000818 <MX_GPIO_Init+0x18c>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800072a:	4b3b      	ldr	r3, [pc, #236]	@ (8000818 <MX_GPIO_Init+0x18c>)
 800072c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, XSHUT_0_Pin|XSHUT_1_Pin|BIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	21c5      	movs	r1, #197	@ 0xc5
 800073c:	4837      	ldr	r0, [pc, #220]	@ (800081c <MX_GPIO_Init+0x190>)
 800073e:	f001 fea3 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XSHUT_2_Pin|XSHUT_3_Pin|XSHUT_4_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2115      	movs	r1, #21
 8000746:	4836      	ldr	r0, [pc, #216]	@ (8000820 <MX_GPIO_Init+0x194>)
 8000748:	f001 fe9e 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D1_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2164      	movs	r1, #100	@ 0x64
 8000750:	4834      	ldr	r0, [pc, #208]	@ (8000824 <MX_GPIO_Init+0x198>)
 8000752:	f001 fe99 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_K2_Pin DIP0_Pin DIP1_Pin DIP7_Pin */
  GPIO_InitStruct.Pin = KEY_K2_Pin|DIP0_Pin|DIP1_Pin|DIP7_Pin;
 8000756:	f24a 0322 	movw	r3, #40994	@ 0xa022
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	482c      	ldr	r0, [pc, #176]	@ (800081c <MX_GPIO_Init+0x190>)
 800076c:	f001 fd2e 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : XSHUT_0_Pin XSHUT_1_Pin BIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = XSHUT_0_Pin|XSHUT_1_Pin|BIN2_Pin|BIN1_Pin;
 8000770:	23c5      	movs	r3, #197	@ 0xc5
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4825      	ldr	r0, [pc, #148]	@ (800081c <MX_GPIO_Init+0x190>)
 8000788:	f001 fd20 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP2_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin;
 800078c:	2308      	movs	r3, #8
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_GPIO_Init+0x19c>)
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIP2_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	481f      	ldr	r0, [pc, #124]	@ (800081c <MX_GPIO_Init+0x190>)
 80007a0:	f001 fd14 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : XSHUT_2_Pin XSHUT_3_Pin XSHUT_4_Pin */
  GPIO_InitStruct.Pin = XSHUT_2_Pin|XSHUT_3_Pin|XSHUT_4_Pin;
 80007a4:	2315      	movs	r3, #21
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4819      	ldr	r0, [pc, #100]	@ (8000820 <MX_GPIO_Init+0x194>)
 80007bc:	f001 fd06 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP3_Pin DIP4_Pin DIP5_Pin DIP6_Pin */
  GPIO_InitStruct.Pin = DIP3_Pin|DIP4_Pin|DIP5_Pin|DIP6_Pin;
 80007c0:	23aa      	movs	r3, #170	@ 0xaa
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4813      	ldr	r0, [pc, #76]	@ (8000820 <MX_GPIO_Init+0x194>)
 80007d4:	f001 fcfa 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin AIN1_Pin AIN2_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|AIN1_Pin|AIN2_Pin;
 80007d8:	2364      	movs	r3, #100	@ 0x64
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_GPIO_Init+0x198>)
 80007f0:	f001 fcec 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MH1_MH2_Pin */
  GPIO_InitStruct.Pin = MH1_MH2_Pin;
 80007f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_GPIO_Init+0x19c>)
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MH1_MH2_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_GPIO_Init+0x194>)
 800080a:	f001 fcdf 	bl	80021cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	@ 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	44020c00 	.word	0x44020c00
 800081c:	42020800 	.word	0x42020800
 8000820:	42020000 	.word	0x42020000
 8000824:	42020400 	.word	0x42020400
 8000828:	10110000 	.word	0x10110000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <queue_create>:
    struct node* head;
    struct node* tail;
    int size;
};

queue queue_create() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
queue q = (queue) malloc(sizeof(struct _queue));
 800083e:	200c      	movs	r0, #12
 8000840:	f00a ff96 	bl	800b770 <malloc>
 8000844:	4603      	mov	r3, r0
 8000846:	607b      	str	r3, [r7, #4]
    if (q == NULL) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d109      	bne.n	8000862 <queue_create+0x2a>
        fprintf(stderr, "Insufficient memory to \
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <queue_create+0x48>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	2231      	movs	r2, #49	@ 0x31
 8000856:	2101      	movs	r1, #1
 8000858:	480a      	ldr	r0, [pc, #40]	@ (8000884 <queue_create+0x4c>)
 800085a:	f00b fa01 	bl	800bc60 <fwrite>
        initialize queue.\n");
        abort();
 800085e:	f00a ff80 	bl	800b762 <abort>
    }
    q->head = NULL;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
    q->tail = NULL;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
    q->size = 0;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    return q;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000001c 	.word	0x2000001c
 8000884:	0800c180 	.word	0x0800c180

08000888 <queue_push>:
    }
    queue_clear(q);
    free(q);
}

void queue_push(queue q, item_type elem) {
 8000888:	b084      	sub	sp, #16
 800088a:	b590      	push	{r4, r7, lr}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct node* n;
    n = (struct node*) malloc(sizeof(struct node));
 800089a:	2014      	movs	r0, #20
 800089c:	f00a ff68 	bl	800b770 <malloc>
 80008a0:	4603      	mov	r3, r0
 80008a2:	60fb      	str	r3, [r7, #12]
    if (n == NULL) {
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d109      	bne.n	80008be <queue_push+0x36>
        fprintf(stderr, "Insufficient memory to \
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <queue_push+0x88>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	222c      	movs	r2, #44	@ 0x2c
 80008b2:	2101      	movs	r1, #1
 80008b4:	4817      	ldr	r0, [pc, #92]	@ (8000914 <queue_push+0x8c>)
 80008b6:	f00b f9d3 	bl	800bc60 <fwrite>
        create node.\n");
        abort();
 80008ba:	f00a ff52 	bl	800b762 <abort>
    }
    n->data = elem;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	461c      	mov	r4, r3
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    n->next = NULL;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
    if (q->head == NULL) {
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d107      	bne.n	80008ea <queue_push+0x62>
        q->head = q->tail = n;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e006      	b.n	80008f8 <queue_push+0x70>
    } else {
        q->tail->next = n;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	611a      	str	r2, [r3, #16]
        q->tail = n;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	605a      	str	r2, [r3, #4]
    }
    q->size += 1;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	609a      	str	r2, [r3, #8]
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800090c:	b004      	add	sp, #16
 800090e:	4770      	bx	lr
 8000910:	2000001c 	.word	0x2000001c
 8000914:	0800c1cc 	.word	0x0800c1cc

08000918 <queue_pop>:

item_type queue_pop(queue q) {
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b089      	sub	sp, #36	@ 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    if (queue_is_empty(q)) {
 8000922:	6838      	ldr	r0, [r7, #0]
 8000924:	f000 f840 	bl	80009a8 <queue_is_empty>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d009      	beq.n	8000942 <queue_pop+0x2a>
    fprintf(stderr, "Can't pop element from queue: \
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <queue_pop+0x88>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	2232      	movs	r2, #50	@ 0x32
 8000936:	2101      	movs	r1, #1
 8000938:	481a      	ldr	r0, [pc, #104]	@ (80009a4 <queue_pop+0x8c>)
 800093a:	f00b f991 	bl	800bc60 <fwrite>
    queue is empty.\n");
    abort();
 800093e:	f00a ff10 	bl	800b762 <abort>
    }
    struct node* head = q->head;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	61fb      	str	r3, [r7, #28]
    if (q->head == q->tail) {
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	d106      	bne.n	8000962 <queue_pop+0x4a>
        q->head = NULL;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
        q->tail = NULL;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	e004      	b.n	800096c <queue_pop+0x54>
    } else {
        q->head = q->head->next;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	601a      	str	r2, [r3, #0]
    }
    q->size -= 1;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	609a      	str	r2, [r3, #8]
    item_type data = head->data;
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	f107 040c 	add.w	r4, r7, #12
 800097c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800097e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    free(head);
 8000982:	69f8      	ldr	r0, [r7, #28]
 8000984:	f00a fefc 	bl	800b780 <free>
    return data;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	461c      	mov	r4, r3
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	3724      	adds	r7, #36	@ 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd90      	pop	{r4, r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000001c 	.word	0x2000001c
 80009a4:	0800c1fc 	.word	0x0800c1fc

080009a8 <queue_is_empty>:
        abort();
    }
    return q->head->data;
}

int queue_is_empty(queue q) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    if (q==NULL) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d109      	bne.n	80009ca <queue_is_empty+0x22>
        fprintf(stderr, "Cannot work with NULL queue.\n");
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <queue_is_empty+0x38>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	221d      	movs	r2, #29
 80009be:	2101      	movs	r1, #1
 80009c0:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <queue_is_empty+0x3c>)
 80009c2:	f00b f94d 	bl	800bc60 <fwrite>
        abort();
 80009c6:	f00a fecc 	bl	800b762 <abort>
    }
    return q->head == NULL;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000001c 	.word	0x2000001c
 80009e4:	0800c26c 	.word	0x0800c26c

080009e8 <checkTravelArray>:
Heading pathArray[MAZE_WIDTH][MAZE_HEIGHT] = {{NORTH}};
// keeps track of all of the cells that the mouse has visited
int travelArray[MAZE_WIDTH][MAZE_HEIGHT] = {{0}};

// given a coord, checks to see if the mouse has visited a certain cell before
int checkTravelArray(coord c) {return travelArray[c.x][c.y];}
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	463b      	mov	r3, r7
 80009f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4905      	ldr	r1, [pc, #20]	@ (8000a10 <checkTravelArray+0x28>)
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	4413      	add	r3, r2
 80009fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20001268 	.word	0x20001268

08000a14 <updateTravelArray>:
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) {travelArray[c.x][c.y] = 1;}
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4905      	ldr	r1, [pc, #20]	@ (8000a3c <updateTravelArray+0x28>)
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	4413      	add	r3, r2
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20001268 	.word	0x20001268

08000a40 <updateFloodArray>:
// given coordinate, updates the respective cell's floodfill value
void updateFloodArray(coord c, int val) {floodArray[c.x][c.y] = val;}
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4905      	ldr	r1, [pc, #20]	@ (8000a6c <updateFloodArray+0x2c>)
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	4413      	add	r3, r2
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20000d68 	.word	0x20000d68

08000a70 <getFloodArray>:
// given coordinate, gets the respective cell's floodfill value
int getFloodArray(coord c) {return floodArray[c.x][c.y];}
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	463b      	mov	r3, r7
 8000a78:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4905      	ldr	r1, [pc, #20]	@ (8000a98 <getFloodArray+0x28>)
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	4413      	add	r3, r2
 8000a86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000d68 	.word	0x20000d68

08000a9c <updatePathArray>:
// given coordinate, updates the respective cell's path heading
void updatePathArray(coord c, Heading h) {pathArray[c.x][c.y] = h;}
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000aaa:	4613      	mov	r3, r2
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4906      	ldr	r1, [pc, #24]	@ (8000acc <updatePathArray+0x30>)
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	440a      	add	r2, r1
 8000ab8:	4413      	add	r3, r2
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20001168 	.word	0x20001168

08000ad0 <getPathArray>:
// given cordinate, gets the respective cell's path heading
Heading getPathArray(coord c) {return pathArray[c.x][c.y];}
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	e883 0003 	stmia.w	r3, {r0, r1}
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4905      	ldr	r1, [pc, #20]	@ (8000af8 <getPathArray+0x28>)
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	440a      	add	r2, r1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20001168 	.word	0x20001168

08000afc <resetFloodArray>:

/* Floodfill Functions */

// resets the floodfill array to target the center as destination
void resetFloodArray()
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
    // set the entire flood array to blank values (-1)
    for (int x = 0; x < MAZE_WIDTH; x++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e014      	b.n	8000b32 <resetFloodArray+0x36>
        for (int y = 0; y < MAZE_HEIGHT; y++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	e00b      	b.n	8000b26 <resetFloodArray+0x2a>
            floodArray[x][y] = -1;
 8000b0e:	491e      	ldr	r1, [pc, #120]	@ (8000b88 <resetFloodArray+0x8c>)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	011a      	lsls	r2, r3, #4
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4413      	add	r3, r2
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int y = 0; y < MAZE_HEIGHT; y++)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	ddf0      	ble.n	8000b0e <resetFloodArray+0x12>
    for (int x = 0; x < MAZE_WIDTH; x++)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	dde7      	ble.n	8000b08 <resetFloodArray+0xc>
    // set desired goal values 
    if (target) // target is goal (center)
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <resetFloodArray+0x90>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d01a      	beq.n	8000b76 <resetFloodArray+0x7a>
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8000b40:	2307      	movs	r3, #7
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	e013      	b.n	8000b6e <resetFloodArray+0x72>
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
 8000b46:	2307      	movs	r3, #7
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	e00a      	b.n	8000b62 <resetFloodArray+0x66>
                floodArray[x][y] = 0;
 8000b4c:	490e      	ldr	r1, [pc, #56]	@ (8000b88 <resetFloodArray+0x8c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	011a      	lsls	r2, r3, #4
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	2200      	movs	r2, #0
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	ddf1      	ble.n	8000b4c <resetFloodArray+0x50>
        for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b08      	cmp	r3, #8
 8000b72:	dde8      	ble.n	8000b46 <resetFloodArray+0x4a>
    else // target is starting cell
        floodArray[STARTING_X][STARTING_Y] = 0;
}
 8000b74:	e002      	b.n	8000b7c <resetFloodArray+0x80>
        floodArray[STARTING_X][STARTING_Y] = 0;
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <resetFloodArray+0x8c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20000d68 	.word	0x20000d68
 8000b8c:	20000000 	.word	0x20000000

08000b90 <checkWall>:

// given heading and coordinate, check if there is a wall on that side of the cell
int checkWall(Heading heading, coord c) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	e883 0006 	stmia.w	r3, {r1, r2}
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d830      	bhi.n	8000c08 <checkWall+0x78>
 8000ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bac <checkWall+0x1c>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bbd 	.word	0x08000bbd
 8000bb0:	08000bd3 	.word	0x08000bd3
 8000bb4:	08000be3 	.word	0x08000be3
 8000bb8:	08000bf7 	.word	0x08000bf7
        case NORTH: return horizontalWalls[c.x][c.y+1];
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1c59      	adds	r1, r3, #1
 8000bc2:	4815      	ldr	r0, [pc, #84]	@ (8000c18 <checkWall+0x88>)
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	4413      	add	r3, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000bd0:	e01b      	b.n	8000c0a <checkWall+0x7a>
        case WEST: return verticalWalls[c.x][c.y];
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4911      	ldr	r1, [pc, #68]	@ (8000c1c <checkWall+0x8c>)
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be0:	e013      	b.n	8000c0a <checkWall+0x7a>
        case SOUTH: return horizontalWalls[c.x][c.y];
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <checkWall+0x88>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4413      	add	r3, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000bf4:	e009      	b.n	8000c0a <checkWall+0x7a>
        case EAST: return verticalWalls[c.x+1][c.y];
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	4907      	ldr	r1, [pc, #28]	@ (8000c1c <checkWall+0x8c>)
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	4413      	add	r3, r2
 8000c02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c06:	e000      	b.n	8000c0a <checkWall+0x7a>
    }
    return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000928 	.word	0x20000928
 8000c1c:	200004e8 	.word	0x200004e8

08000c20 <incrementCoord>:

// Increments coord in the direction of the heading by input integer, then returns updated coord
coord incrementCoord(Heading heading, coord c, int numCells) {
 8000c20:	b480      	push	{r7}
 8000c22:	b08d      	sub	sp, #52	@ 0x34
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	4608      	mov	r0, r1
 8000c2a:	4639      	mov	r1, r7
 8000c2c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000c30:	4603      	mov	r3, r0
 8000c32:	72fb      	strb	r3, [r7, #11]
    switch (heading) {
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d836      	bhi.n	8000ca8 <incrementCoord+0x88>
 8000c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c40 <incrementCoord+0x20>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000c51 	.word	0x08000c51
 8000c44:	08000c67 	.word	0x08000c67
 8000c48:	08000c7d 	.word	0x08000c7d
 8000c4c:	08000c93 	.word	0x08000c93
        case NORTH: return (coord){c.x, c.y += numCells};
 8000c50:	6839      	ldr	r1, [r7, #0]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c56:	4413      	add	r3, r2
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6019      	str	r1, [r3, #0]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	e027      	b.n	8000cb6 <incrementCoord+0x96>
        case WEST: return (coord){c.x -= numCells, c.y};
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6019      	str	r1, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	e01c      	b.n	8000cb6 <incrementCoord+0x96>
        case SOUTH: return (coord){c.x, c.y -= numCells};
 8000c7c:	6839      	ldr	r1, [r7, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6019      	str	r1, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	e011      	b.n	8000cb6 <incrementCoord+0x96>
        case EAST: return (coord){c.x += numCells, c.y};
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c96:	4413      	add	r3, r2
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	6839      	ldr	r1, [r7, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6019      	str	r1, [r3, #0]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	e006      	b.n	8000cb6 <incrementCoord+0x96>
    }
    return c;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	461a      	mov	r2, r3
 8000cac:	463b      	mov	r3, r7
 8000cae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cb2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	3734      	adds	r7, #52	@ 0x34
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <turnLeft>:

// turns currentHeading global variable to the left based on the mouse's current heading,
// then returns LEFT action
Action turnLeft() {
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
    //API_turnLeft();
    currentHeading = (currentHeading+1)%4;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <turnLeft+0x2c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	425a      	negs	r2, r3
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	bf58      	it	pl
 8000cda:	4253      	negpl	r3, r2
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <turnLeft+0x2c>)
 8000ce0:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200004e4 	.word	0x200004e4

08000cf4 <turnRight>:

// turns currentHeading global variable to the right based on the mouse's current heading,
// then returns RIGHT action
Action turnRight() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
    //API_turnRight();
    currentHeading = (currentHeading-1)%4;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <turnRight+0x2c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	425a      	negs	r2, r3
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	bf58      	it	pl
 8000d0a:	4253      	negpl	r3, r2
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <turnRight+0x2c>)
 8000d10:	701a      	strb	r2, [r3, #0]
    return RIGHT;
 8000d12:	2302      	movs	r3, #2
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200004e4 	.word	0x200004e4

08000d24 <mouseInGoal>:

// returns whether the mouse is in the target
unsigned char mouseInGoal() {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
    return (target == 1 && (currentXY.x >= LOWER_X_GOAL && currentXY.x <= UPPER_X_GOAL && currentXY.y >= LOWER_Y_GOAL && currentXY.y <= UPPER_Y_GOAL));
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <mouseInGoal+0x40>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d111      	bne.n	8000d54 <mouseInGoal+0x30>
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <mouseInGoal+0x44>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b06      	cmp	r3, #6
 8000d36:	dd0d      	ble.n	8000d54 <mouseInGoal+0x30>
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <mouseInGoal+0x44>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	dc09      	bgt.n	8000d54 <mouseInGoal+0x30>
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <mouseInGoal+0x44>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	dd05      	ble.n	8000d54 <mouseInGoal+0x30>
 8000d48:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <mouseInGoal+0x44>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	dc01      	bgt.n	8000d54 <mouseInGoal+0x30>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <mouseInGoal+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000000 	.word	0x20000000
 8000d68:	200004dc 	.word	0x200004dc

08000d6c <getNeighbor>:

// given heading and coordinates, returns the floodfill value of the corresponding neighbor cell.
// if the neighbor is off of the maze (argument cell is on the boundary of the maze), return -2
int getNeighbor(Heading heading, coord c)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	e883 0006 	stmia.w	r3, {r1, r2}
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d846      	bhi.n	8000e10 <getNeighbor+0xa4>
 8000d82:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <getNeighbor+0x1c>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000d99 	.word	0x08000d99
 8000d8c:	08000db7 	.word	0x08000db7
 8000d90:	08000dd5 	.word	0x08000dd5
 8000d94:	08000df3 	.word	0x08000df3
        case NORTH:
            if (c.y >= 15) return OUT_OF_BOUNDS;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b0e      	cmp	r3, #14
 8000d9c:	dd02      	ble.n	8000da4 <getNeighbor+0x38>
 8000d9e:	f06f 0301 	mvn.w	r3, #1
 8000da2:	e036      	b.n	8000e12 <getNeighbor+0xa6>
            else return floodArray[c.x][c.y+1];
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3301      	adds	r3, #1
 8000daa:	491d      	ldr	r1, [pc, #116]	@ (8000e20 <getNeighbor+0xb4>)
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	4413      	add	r3, r2
 8000db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db4:	e02d      	b.n	8000e12 <getNeighbor+0xa6>
        case WEST:
            if (c.x <= 0) return OUT_OF_BOUNDS;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dc02      	bgt.n	8000dc2 <getNeighbor+0x56>
 8000dbc:	f06f 0301 	mvn.w	r3, #1
 8000dc0:	e027      	b.n	8000e12 <getNeighbor+0xa6>
            else return floodArray[c.x-1][c.y];
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	4915      	ldr	r1, [pc, #84]	@ (8000e20 <getNeighbor+0xb4>)
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	4413      	add	r3, r2
 8000dce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dd2:	e01e      	b.n	8000e12 <getNeighbor+0xa6>
        case SOUTH:
            if (c.y <= 0) return OUT_OF_BOUNDS;
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	dc02      	bgt.n	8000de0 <getNeighbor+0x74>
 8000dda:	f06f 0301 	mvn.w	r3, #1
 8000dde:	e018      	b.n	8000e12 <getNeighbor+0xa6>
            else return floodArray[c.x][c.y-1];
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	490e      	ldr	r1, [pc, #56]	@ (8000e20 <getNeighbor+0xb4>)
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	4413      	add	r3, r2
 8000dec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000df0:	e00f      	b.n	8000e12 <getNeighbor+0xa6>
        case EAST:
            if (c.x >= 15) return OUT_OF_BOUNDS;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0e      	cmp	r3, #14
 8000df6:	dd02      	ble.n	8000dfe <getNeighbor+0x92>
 8000df8:	f06f 0301 	mvn.w	r3, #1
 8000dfc:	e009      	b.n	8000e12 <getNeighbor+0xa6>
            else return floodArray[c.x+1][c.y];
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4906      	ldr	r1, [pc, #24]	@ (8000e20 <getNeighbor+0xb4>)
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	4413      	add	r3, r2
 8000e0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e0e:	e000      	b.n	8000e12 <getNeighbor+0xa6>
    }
    return 1;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000d68 	.word	0x20000d68

08000e24 <generateNeighbor>:

neighbor generateNeighbor(queue q, Heading heading, neighbor current, int currentVal) {
 8000e24:	b082      	sub	sp, #8
 8000e26:	b590      	push	{r4, r7, lr}
 8000e28:	b08f      	sub	sp, #60	@ 0x3c
 8000e2a:	af02      	add	r7, sp, #8
 8000e2c:	6178      	str	r0, [r7, #20]
 8000e2e:	6139      	str	r1, [r7, #16]
 8000e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e32:	4613      	mov	r3, r2
 8000e34:	73fb      	strb	r3, [r7, #15]
    if (!checkWall(heading,current.coord)) {
 8000e36:	7bf8      	ldrb	r0, [r7, #15]
 8000e38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e3c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e40:	f7ff fea6 	bl	8000b90 <checkWall>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d15f      	bne.n	8000f0a <generateNeighbor+0xe6>
        int nextVal = currentVal + TILE_SCORE;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e4e:	4413      	add	r3, r2
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        neighbor next;
        // checks if the mouse would have to turn to go north from current cell
        if (current.heading != heading) {
 8000e52:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d006      	beq.n	8000e6a <generateNeighbor+0x46>
            nextVal += TURN_SCORE;
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e60:	4413      	add	r3, r2
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
            next.streak = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e68:	e00c      	b.n	8000e84 <generateNeighbor+0x60>
        } else { // if the mouse doesn't need to turn, records that is is on a straight streak
            nextVal += (STREAK_MULTIPLIER * (current.streak-1)) + STREAK_SCORE;
 8000e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	2200      	movs	r2, #0
 8000e76:	4413      	add	r3, r2
 8000e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e7a:	4413      	add	r3, r2
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            next.streak = current.streak + 1;
 8000e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e80:	3301      	adds	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // prepare neighbor to add to the floodfill queue
        next.coord = incrementCoord(heading, current.coord, 1);
 8000e84:	4638      	mov	r0, r7
 8000e86:	7bf9      	ldrb	r1, [r7, #15]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e90:	cb0c      	ldmia	r3, {r2, r3}
 8000e92:	f7ff fec5 	bl	8000c20 <incrementCoord>
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	463a      	mov	r2, r7
 8000e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea0:	e883 0003 	stmia.w	r3, {r0, r1}
        next.heading = heading;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	f887 3020 	strb.w	r3, [r7, #32]

        int neighborVal = getNeighbor(heading,current.coord);
 8000eaa:	7bf8      	ldrb	r0, [r7, #15]
 8000eac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000eb0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000eb4:	f7ff ff5a 	bl	8000d6c <getNeighbor>
 8000eb8:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (neighborVal == NOT_YET_SET || nextVal < neighborVal) {
 8000eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d003      	beq.n	8000eca <generateNeighbor+0xa6>
 8000ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	da1f      	bge.n	8000f0a <generateNeighbor+0xe6>
            queue_push(q,next);
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed4:	6938      	ldr	r0, [r7, #16]
 8000ed6:	f7ff fcd7 	bl	8000888 <queue_push>
            updateFloodArray(next.coord,nextVal);
 8000eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ee4:	f7ff fdac 	bl	8000a40 <updateFloodArray>
            updatePathArray(next.coord,(heading+2)%4);
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	3302      	adds	r3, #2
 8000eec:	425a      	negs	r2, r3
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	bf58      	it	pl
 8000ef8:	4253      	negpl	r3, r2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f06:	f7ff fdc9 	bl	8000a9c <updatePathArray>
        }
    }
    return current;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	461c      	mov	r4, r3
 8000f0e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	3734      	adds	r7, #52	@ 0x34
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f22:	b002      	add	sp, #8
 8000f24:	4770      	bx	lr
	...

08000f28 <floodFill>:

// updates the floodfill array based on known walls
void floodFill() {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b0a8      	sub	sp, #160	@ 0xa0
 8000f2c:	af04      	add	r7, sp, #16
    // set non-goal values to blank so that the floodfill array can be recalculated
    resetFloodArray();
 8000f2e:	f7ff fde5 	bl	8000afc <resetFloodArray>

    // declare/initialize relevant variables for queue for floodfill algorithm
    queue q = queue_create();
 8000f32:	f7ff fc81 	bl	8000838 <queue_create>
 8000f36:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    // iterate through the 2D array, find goal values and add them to the queue
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f40:	e06c      	b.n	800101c <floodFill+0xf4>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000f48:	e05f      	b.n	800100a <floodFill+0xe2>
            if (floodArray[x][y] == 0) {
 8000f4a:	4968      	ldr	r1, [pc, #416]	@ (80010ec <floodFill+0x1c4>)
 8000f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f50:	011a      	lsls	r2, r3, #4
 8000f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f56:	4413      	add	r3, r2
 8000f58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d14f      	bne.n	8001000 <floodFill+0xd8>
                // for the starting goal values, it doesn't matter which direction you approach them from.
                // as such, they should be oriented from all directions
                queue_push(q,(neighbor){(coord){x,y},NORTH,0});
 8000f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000f72:	2300      	movs	r3, #0
 8000f74:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f80:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f84:	f7ff fc80 	bl	8000888 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},WEST,0});
 8000f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8000f94:	2301      	movs	r3, #1
 8000f96:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000fac:	f7ff fc6c 	bl	8000888 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},SOUTH,0});
 8000fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000fd4:	f7ff fc58 	bl	8000888 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},EAST,0});
 8000fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fdc:	623b      	str	r3, [r7, #32]
 8000fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000ffc:	f7ff fc44 	bl	8000888 <queue_push>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 8001000:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001004:	3301      	adds	r3, #1
 8001006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800100a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800100e:	2b0f      	cmp	r3, #15
 8001010:	dd9b      	ble.n	8000f4a <floodFill+0x22>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8001012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800101c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001020:	2b0f      	cmp	r3, #15
 8001022:	dd8e      	ble.n	8000f42 <floodFill+0x1a>
            }
        }
    }

    // adds available neighbors to queue and updates their floodfill values
    while (!queue_is_empty(q)) {
 8001024:	e056      	b.n	80010d4 <floodFill+0x1ac>
        // initializes values for calculating floodfills for neighbors
        neighbor current = queue_pop(q);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fc72 	bl	8000918 <queue_pop>
        int currentVal = getFloodArray(current.coord);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	e893 0003 	ldmia.w	r3, {r0, r1}
 800103c:	f7ff fd18 	bl	8000a70 <getFloodArray>
 8001040:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

        // prints the current cell's floodfill number to the simulation screen
        //char forSetText[6] = ""; sprintf(forSetText, "%d", getFloodArray(current.coord)); API_setText(current.coord.x,current.coord.y,forSetText);
        
        // pushes neighbors if available
        generateNeighbor(q,NORTH,current,currentVal);
 8001044:	463d      	mov	r5, r7
 8001046:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800104a:	9303      	str	r3, [sp, #12]
 800104c:	466c      	mov	r4, sp
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2200      	movs	r2, #0
 800105e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001062:	4628      	mov	r0, r5
 8001064:	f7ff fede 	bl	8000e24 <generateNeighbor>
        generateNeighbor(q,WEST,current,currentVal);
 8001068:	463d      	mov	r5, r7
 800106a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	466c      	mov	r4, sp
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800107a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2201      	movs	r2, #1
 8001082:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001086:	4628      	mov	r0, r5
 8001088:	f7ff fecc 	bl	8000e24 <generateNeighbor>
        generateNeighbor(q,SOUTH,current,currentVal);
 800108c:	463d      	mov	r5, r7
 800108e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001092:	9303      	str	r3, [sp, #12]
 8001094:	466c      	mov	r4, sp
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800109e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2202      	movs	r2, #2
 80010a6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010aa:	4628      	mov	r0, r5
 80010ac:	f7ff feba 	bl	8000e24 <generateNeighbor>
        generateNeighbor(q,EAST,current,currentVal);        
 80010b0:	463d      	mov	r5, r7
 80010b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010b6:	9303      	str	r3, [sp, #12]
 80010b8:	466c      	mov	r4, sp
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010ce:	4628      	mov	r0, r5
 80010d0:	f7ff fea8 	bl	8000e24 <generateNeighbor>
    while (!queue_is_empty(q)) {
 80010d4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80010d8:	f7ff fc66 	bl	80009a8 <queue_is_empty>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0a1      	beq.n	8001026 <floodFill+0xfe>
    }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3790      	adds	r7, #144	@ 0x90
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bdb0      	pop	{r4, r5, r7, pc}
 80010ec:	20000d68 	.word	0x20000d68

080010f0 <placeWall>:

// places a wall in respective arrays and API at the given heading and coordinate
void placeWall(Heading heading, coord c) {
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	e883 0006 	stmia.w	r3, {r1, r2}
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
    // sets a wall in the wall arrays
    switch (heading) {
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d834      	bhi.n	8001170 <placeWall+0x80>
 8001106:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <placeWall+0x1c>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800111d 	.word	0x0800111d
 8001110:	08001135 	.word	0x08001135
 8001114:	08001147 	.word	0x08001147
 8001118:	0800115d 	.word	0x0800115d
        case NORTH:
            horizontalWalls[c.x][c.y+1] = 1;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1c59      	adds	r1, r3, #1
 8001122:	4816      	ldr	r0, [pc, #88]	@ (800117c <placeWall+0x8c>)
 8001124:	4613      	mov	r3, r2
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	440b      	add	r3, r1
 800112c:	2201      	movs	r2, #1
 800112e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            //API_setWall(c.x,c.y,'n');
            return;
 8001132:	e01d      	b.n	8001170 <placeWall+0x80>
        case WEST:
            verticalWalls[c.x][c.y] = 1;
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	4911      	ldr	r1, [pc, #68]	@ (8001180 <placeWall+0x90>)
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	4413      	add	r3, r2
 800113e:	2201      	movs	r2, #1
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            //API_setWall(c.x,c.y,'w');
            return;
 8001144:	e014      	b.n	8001170 <placeWall+0x80>
        case SOUTH:
            horizontalWalls[c.x][c.y] = 1;
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	480c      	ldr	r0, [pc, #48]	@ (800117c <placeWall+0x8c>)
 800114c:	4613      	mov	r3, r2
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	440b      	add	r3, r1
 8001154:	2201      	movs	r2, #1
 8001156:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            //API_setWall(c.x,c.y,'s');
            return;
 800115a:	e009      	b.n	8001170 <placeWall+0x80>
        case EAST:
            verticalWalls[c.x+1][c.y] = 1;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4907      	ldr	r1, [pc, #28]	@ (8001180 <placeWall+0x90>)
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	4413      	add	r3, r2
 8001168:	2201      	movs	r2, #1
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            //API_setWall(c.x,c.y,'e');
            return;
 800116e:	bf00      	nop
    }
}
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000928 	.word	0x20000928
 8001180:	200004e8 	.word	0x200004e8

08001184 <generateInitialWalls>:

void generateInitialWalls() {
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
    for (int x = 0; x < MAZE_WIDTH; x++) {
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
 800118e:	e018      	b.n	80011c2 <generateInitialWalls+0x3e>
        placeWall(SOUTH,(coord){x,0});
 8001190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff ffa5 	bl	80010f0 <placeWall>
        placeWall(NORTH,(coord){x,MAZE_HEIGHT-1});
 80011a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	230f      	movs	r3, #15
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ff9a 	bl	80010f0 <placeWall>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	3301      	adds	r3, #1
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	dde3      	ble.n	8001190 <generateInitialWalls+0xc>
    }
    for (int y = 0; y < MAZE_HEIGHT; y++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
 80011cc:	e017      	b.n	80011fe <generateInitialWalls+0x7a>
        placeWall(WEST,(coord){0,y});
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff ff86 	bl	80010f0 <placeWall>
        placeWall(EAST,(coord){MAZE_WIDTH-1,y});
 80011e4:	230f      	movs	r3, #15
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	463b      	mov	r3, r7
 80011ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011f2:	2003      	movs	r0, #3
 80011f4:	f7ff ff7c 	bl	80010f0 <placeWall>
    for (int y = 0; y < MAZE_HEIGHT; y++) {
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	3301      	adds	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	dde4      	ble.n	80011ce <generateInitialWalls+0x4a>
    }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <updateWalls>:

// checks for and then updates the walls for the current cell
void updateWalls()
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
    // based on the current heading, places walls at the respective locations
    //if (API_wallFront()) placeWall(currentHeading,currentXY);
    //if (API_wallLeft()) placeWall((currentHeading+1)%4,currentXY);
    //if (API_wallRight()) placeWall((currentHeading-1)%4,currentXY);
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <nextAction>:

// based on updated wall and floodfill information, return the next action that the mouse should do
Action nextAction()
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af02      	add	r7, sp, #8
    // stay at center if already in center
    if (target && mouseInGoal() && STAY_AT_CENTER)
 8001222:	4b45      	ldr	r3, [pc, #276]	@ (8001338 <nextAction+0x11c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <nextAction+0x22>
 800122a:	f7ff fd7b 	bl	8000d24 <mouseInGoal>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <nextAction+0x22>
 8001234:	2300      	movs	r3, #0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <nextAction+0x22>
        return IDLE;
 800123a:	2303      	movs	r3, #3
 800123c:	e078      	b.n	8001330 <nextAction+0x114>

    Heading newHeading = getPathArray(currentXY);
 800123e:	4b3f      	ldr	r3, [pc, #252]	@ (800133c <nextAction+0x120>)
 8001240:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001244:	f7ff fc44 	bl	8000ad0 <getPathArray>
 8001248:	4603      	mov	r3, r0
 800124a:	74fb      	strb	r3, [r7, #19]
    updateTravelArray(currentXY);
 800124c:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <nextAction+0x120>)
 800124e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001252:	f7ff fbdf 	bl	8000a14 <updateTravelArray>
    //coord originalCoord = currentXY;

    // moves forward if the mouse is already facing the correct heading
    if (newHeading == currentHeading) {
 8001256:	4b3a      	ldr	r3, [pc, #232]	@ (8001340 <nextAction+0x124>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	7cfa      	ldrb	r2, [r7, #19]
 800125c:	429a      	cmp	r2, r3
 800125e:	d13e      	bne.n	80012de <nextAction+0xc2>
        int moveNumber = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 8001264:	e016      	b.n	8001294 <nextAction+0x78>
        && getPathArray(currentXY) == currentHeading) {
            moveNumber++;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
            updateTravelArray(currentXY);
 800126c:	4b33      	ldr	r3, [pc, #204]	@ (800133c <nextAction+0x120>)
 800126e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001272:	f7ff fbcf 	bl	8000a14 <updateTravelArray>
            currentXY = incrementCoord(newHeading,currentXY,1);
 8001276:	4c31      	ldr	r4, [pc, #196]	@ (800133c <nextAction+0x120>)
 8001278:	4638      	mov	r0, r7
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <nextAction+0x120>)
 800127c:	7cf9      	ldrb	r1, [r7, #19]
 800127e:	2201      	movs	r2, #1
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	cb0c      	ldmia	r3, {r2, r3}
 8001284:	f7ff fccc 	bl	8000c20 <incrementCoord>
 8001288:	4622      	mov	r2, r4
 800128a:	463b      	mov	r3, r7
 800128c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001290:	e882 0003 	stmia.w	r2, {r0, r1}
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 8001294:	4b29      	ldr	r3, [pc, #164]	@ (800133c <nextAction+0x120>)
 8001296:	e893 0003 	ldmia.w	r3, {r0, r1}
 800129a:	f7ff fba5 	bl	80009e8 <checkTravelArray>
 800129e:	4603      	mov	r3, r0
        && getPathArray(currentXY) == currentHeading) {
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d113      	bne.n	80012cc <nextAction+0xb0>
        while (checkTravelArray(currentXY) == 1 && (!checkWall(newHeading,currentXY))
 80012a4:	4a25      	ldr	r2, [pc, #148]	@ (800133c <nextAction+0x120>)
 80012a6:	7cfb      	ldrb	r3, [r7, #19]
 80012a8:	ca06      	ldmia	r2, {r1, r2}
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fc70 	bl	8000b90 <checkWall>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10a      	bne.n	80012cc <nextAction+0xb0>
        && getPathArray(currentXY) == currentHeading) {
 80012b6:	4b21      	ldr	r3, [pc, #132]	@ (800133c <nextAction+0x120>)
 80012b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012bc:	f7ff fc08 	bl	8000ad0 <getPathArray>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <nextAction+0x124>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d0cc      	beq.n	8001266 <nextAction+0x4a>

        //char forSetText[4] = "";
        //sprintf(forSetText, "%d", moveNumber);
        //debug_log(forSetText);

        for (int i = 0; i < moveNumber; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	bf00      	nop
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	da01      	bge.n	80012de <nextAction+0xc2>
            //API_moveForward();
        return FORWARD;
 80012da:	2301      	movs	r3, #1
 80012dc:	e028      	b.n	8001330 <nextAction+0x114>
    }

    // determines which way to turn based on current direction and desired direction
    if (currentHeading == (newHeading+1)%4)
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <nextAction+0x124>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
 80012e6:	3301      	adds	r3, #1
 80012e8:	425a      	negs	r2, r3
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	bf58      	it	pl
 80012f4:	4253      	negpl	r3, r2
 80012f6:	4299      	cmp	r1, r3
 80012f8:	d103      	bne.n	8001302 <nextAction+0xe6>
        return turnRight();
 80012fa:	f7ff fcfb 	bl	8000cf4 <turnRight>
 80012fe:	4603      	mov	r3, r0
 8001300:	e016      	b.n	8001330 <nextAction+0x114>
    else if (currentHeading == (newHeading-1)%4)
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <nextAction+0x124>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	7cfb      	ldrb	r3, [r7, #19]
 800130a:	3b01      	subs	r3, #1
 800130c:	425a      	negs	r2, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	bf58      	it	pl
 8001318:	4253      	negpl	r3, r2
 800131a:	4299      	cmp	r1, r3
 800131c:	d103      	bne.n	8001326 <nextAction+0x10a>
        return turnLeft();
 800131e:	f7ff fcd1 	bl	8000cc4 <turnLeft>
 8001322:	4603      	mov	r3, r0
 8001324:	e004      	b.n	8001330 <nextAction+0x114>
    else {
        //debug_log("turned 180");
        turnLeft();
 8001326:	f7ff fccd 	bl	8000cc4 <turnLeft>
        return turnLeft();
 800132a:	f7ff fccb 	bl	8000cc4 <turnLeft>
 800132e:	4603      	mov	r3, r0
    }
}
 8001330:	4618      	mov	r0, r3
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	200004dc 	.word	0x200004dc
 8001340:	200004e4 	.word	0x200004e4

08001344 <checkDestination>:

// checks if the mouse has reached its target
void checkDestination()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
    if (target) {
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <checkDestination+0x60>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d018      	beq.n	8001384 <checkDestination+0x40>
        if (mouseInGoal()) {
 8001352:	f7ff fce7 	bl	8000d24 <mouseInGoal>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01e      	beq.n	800139a <checkDestination+0x56>
            if (RESET_AT_CENTER) {
 800135c:	2300      	movs	r3, #0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <checkDestination+0x32>
                //API_ackReset();
                currentXY = (coord){0,0};
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <checkDestination+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <checkDestination+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
                currentHeading = NORTH;
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <checkDestination+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
            else if (!STAY_AT_CENTER)
                target = 0;       
        }
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y)
        target = 1;
}
 8001374:	e011      	b.n	800139a <checkDestination+0x56>
            else if (!STAY_AT_CENTER)
 8001376:	2300      	movs	r3, #0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10e      	bne.n	800139a <checkDestination+0x56>
                target = 0;       
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <checkDestination+0x60>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	e00a      	b.n	800139a <checkDestination+0x56>
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y)
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <checkDestination+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <checkDestination+0x56>
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <checkDestination+0x64>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <checkDestination+0x56>
        target = 1;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <checkDestination+0x60>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	200004dc 	.word	0x200004dc
 80013ac:	200004e4 	.word	0x200004e4

080013b0 <highlightPath>:

// highlights the optimal path for the mouse
void highlightPath()
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
    //API_clearAllColor();
    if (target) {
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <highlightPath+0x104>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d035      	beq.n	800142a <highlightPath+0x7a>
        int x = STARTING_X;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
        int y = STARTING_Y;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
        while (!(x >= LOWER_X_GOAL && x <= UPPER_X_GOAL && y >= LOWER_Y_GOAL && y <= UPPER_Y_GOAL)) {
 80013c6:	e023      	b.n	8001410 <highlightPath+0x60>
            //API_setColor(x,y,'w');
            switch (pathArray[x][y]) {
 80013c8:	4a3b      	ldr	r2, [pc, #236]	@ (80014b8 <highlightPath+0x108>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	441a      	add	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d81a      	bhi.n	8001410 <highlightPath+0x60>
 80013da:	a201      	add	r2, pc, #4	@ (adr r2, 80013e0 <highlightPath+0x30>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	080013f1 	.word	0x080013f1
 80013e4:	080013f9 	.word	0x080013f9
 80013e8:	08001401 	.word	0x08001401
 80013ec:	08001409 	.word	0x08001409
                case NORTH: y++; break;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3301      	adds	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	e00b      	b.n	8001410 <highlightPath+0x60>
                case WEST: x--; break;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e007      	b.n	8001410 <highlightPath+0x60>
                case SOUTH: y--; break;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	3b01      	subs	r3, #1
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	e003      	b.n	8001410 <highlightPath+0x60>
                case EAST: x++; break;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	bf00      	nop
        while (!(x >= LOWER_X_GOAL && x <= UPPER_X_GOAL && y >= LOWER_Y_GOAL && y <= UPPER_Y_GOAL)) {
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b06      	cmp	r3, #6
 8001414:	ddd8      	ble.n	80013c8 <highlightPath+0x18>
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b08      	cmp	r3, #8
 800141a:	dcd5      	bgt.n	80013c8 <highlightPath+0x18>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b06      	cmp	r3, #6
 8001420:	ddd2      	ble.n	80013c8 <highlightPath+0x18>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b08      	cmp	r3, #8
 8001426:	dccf      	bgt.n	80013c8 <highlightPath+0x18>
 8001428:	e02e      	b.n	8001488 <highlightPath+0xd8>
            }
        }
    } else {
        int x = LOWER_X_GOAL;
 800142a:	2307      	movs	r3, #7
 800142c:	60fb      	str	r3, [r7, #12]
        int y = LOWER_Y_GOAL;
 800142e:	2307      	movs	r3, #7
 8001430:	60bb      	str	r3, [r7, #8]
        while (!(x == STARTING_X && y == STARTING_Y)) {
 8001432:	e023      	b.n	800147c <highlightPath+0xcc>
            //API_setColor(x,y,'w');
            switch (pathArray[x][y]) {
 8001434:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <highlightPath+0x108>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	441a      	add	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d81a      	bhi.n	800147c <highlightPath+0xcc>
 8001446:	a201      	add	r2, pc, #4	@ (adr r2, 800144c <highlightPath+0x9c>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	0800145d 	.word	0x0800145d
 8001450:	08001465 	.word	0x08001465
 8001454:	0800146d 	.word	0x0800146d
 8001458:	08001475 	.word	0x08001475
                case NORTH: y++; break;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3301      	adds	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	e00b      	b.n	800147c <highlightPath+0xcc>
                case WEST: x--; break;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3b01      	subs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e007      	b.n	800147c <highlightPath+0xcc>
                case SOUTH: y--; break;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3b01      	subs	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	e003      	b.n	800147c <highlightPath+0xcc>
                case EAST: x++; break;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	bf00      	nop
        while (!(x == STARTING_X && y == STARTING_Y)) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1d8      	bne.n	8001434 <highlightPath+0x84>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1d5      	bne.n	8001434 <highlightPath+0x84>
            }
        }
    }  
    // highlight start and goal values
    for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8001488:	2307      	movs	r3, #7
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	e007      	b.n	800149e <highlightPath+0xee>
        for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)  
 800148e:	2307      	movs	r3, #7
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	bf00      	nop
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b08      	cmp	r3, #8
    for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3301      	adds	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	ddf4      	ble.n	800148e <highlightPath+0xde>
        	break;
            //API_setColor(x,y,'w');
    //API_setColor(STARTING_X,STARTING_Y,'w');
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20001168 	.word	0x20001168

080014bc <solver>:

// sends the mouse's recommended next action back to main
Action solver() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    checkDestination();
 80014c0:	f7ff ff40 	bl	8001344 <checkDestination>
    updateWalls();    
 80014c4:	f7ff fea3 	bl	800120e <updateWalls>
    floodFill();
 80014c8:	f7ff fd2e 	bl	8000f28 <floodFill>
    if (HIGHLIGHT_PATH) highlightPath();
 80014cc:	2301      	movs	r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <solver+0x1a>
 80014d2:	f7ff ff6d 	bl	80013b0 <highlightPath>
    return nextAction();
 80014d6:	f7ff fea1 	bl	800121c <nextAction>
 80014da:	4603      	mov	r3, r0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ce      	sub	sp, #312	@ 0x138
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001514:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001518:	4618      	mov	r0, r3
 800151a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800151e:	461a      	mov	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f00a fc83 	bl	800be2c <memset>
  if(hi2c->Instance==I2C1)
 8001526:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800152a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a68      	ldr	r2, [pc, #416]	@ (80016d4 <HAL_I2C_MspInit+0x1e4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d15f      	bne.n	80015f8 <HAL_I2C_MspInit+0x108>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001538:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800153c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800154c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001550:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001554:	2200      	movs	r2, #0
 8001556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	4618      	mov	r0, r3
 8001560:	f002 f9ba 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800156a:	f7ff f95f 	bl	800082c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b5a      	ldr	r3, [pc, #360]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 8001570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001574:	4a58      	ldr	r2, [pc, #352]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800157e:	4b56      	ldr	r3, [pc, #344]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 8001580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001584:	f003 0202 	and.w	r2, r3, #2
 8001588:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800158c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001596:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800159a:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800159c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a4:	2312      	movs	r3, #18
 80015a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b6:	2304      	movs	r3, #4
 80015b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80015c0:	4619      	mov	r1, r3
 80015c2:	4846      	ldr	r0, [pc, #280]	@ (80016dc <HAL_I2C_MspInit+0x1ec>)
 80015c4:	f000 fe02 	bl	80021cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c8:	4b43      	ldr	r3, [pc, #268]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 80015ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015ce:	4a42      	ldr	r2, [pc, #264]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 80015d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015d8:	4b3f      	ldr	r3, [pc, #252]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 80015da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015de:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80015e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015f4:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015f6:	e067      	b.n	80016c8 <HAL_I2C_MspInit+0x1d8>
  else if(hi2c->Instance==I2C2)
 80015f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80015fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a36      	ldr	r2, [pc, #216]	@ (80016e0 <HAL_I2C_MspInit+0x1f0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d15e      	bne.n	80016c8 <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800160a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800160e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001612:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800161e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001622:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001626:	2200      	movs	r2, #0
 8001628:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	4618      	mov	r0, r3
 8001632:	f002 f951 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_I2C_MspInit+0x150>
      Error_Handler();
 800163c:	f7ff f8f6 	bl	800082c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001646:	4a24      	ldr	r2, [pc, #144]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 8001652:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001656:	f003 0202 	and.w	r2, r3, #2
 800165a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800165e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800166c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800166e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001672:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001676:	2312      	movs	r3, #18
 8001678:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001688:	2304      	movs	r3, #4
 800168a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001692:	4619      	mov	r1, r3
 8001694:	4811      	ldr	r0, [pc, #68]	@ (80016dc <HAL_I2C_MspInit+0x1ec>)
 8001696:	f000 fd99 	bl	80021cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 800169c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 80016a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_I2C_MspInit+0x1e8>)
 80016ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	44020c00 	.word	0x44020c00
 80016dc:	42020400 	.word	0x42020400
 80016e0:	40005800 	.word	0x40005800

080016e4 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0ce      	sub	sp, #312	@ 0x138
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016f2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001704:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001708:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800170c:	4618      	mov	r0, r3
 800170e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001712:	461a      	mov	r2, r3
 8001714:	2100      	movs	r1, #0
 8001716:	f00a fb89 	bl	800be2c <memset>
  if(hsd->Instance==SDMMC1)
 800171a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800171e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a4a      	ldr	r2, [pc, #296]	@ (8001850 <HAL_SD_MspInit+0x16c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	f040 808b 	bne.w	8001844 <HAL_SD_MspInit+0x160>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800172e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001732:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001736:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL1Q;
 8001742:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001746:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800174a:	2200      	movs	r2, #0
 800174c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	4618      	mov	r0, r3
 8001756:	f002 f8bf 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_SD_MspInit+0x80>
    {
      Error_Handler();
 8001760:	f7ff f864 	bl	800082c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001764:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <HAL_SD_MspInit+0x170>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176a:	4a3a      	ldr	r2, [pc, #232]	@ (8001854 <HAL_SD_MspInit+0x170>)
 800176c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <HAL_SD_MspInit+0x170>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800177a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800177e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001782:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800178c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001790:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <HAL_SD_MspInit+0x170>)
 8001794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001798:	4a2e      	ldr	r2, [pc, #184]	@ (8001854 <HAL_SD_MspInit+0x170>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <HAL_SD_MspInit+0x170>)
 80017a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a8:	f003 0204 	and.w	r2, r3, #4
 80017ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017be:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c0:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_SD_MspInit+0x170>)
 80017c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c6:	4a23      	ldr	r2, [pc, #140]	@ (8001854 <HAL_SD_MspInit+0x170>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d0:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_SD_MspInit+0x170>)
 80017d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d6:	f003 0208 	and.w	r2, r3, #8
 80017da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017ec:	681b      	ldr	r3, [r3, #0]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017ee:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80017f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001808:	230c      	movs	r3, #12
 800180a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001812:	4619      	mov	r1, r3
 8001814:	4810      	ldr	r0, [pc, #64]	@ (8001858 <HAL_SD_MspInit+0x174>)
 8001816:	f000 fcd9 	bl	80021cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800181a:	2304      	movs	r3, #4
 800181c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001832:	230c      	movs	r3, #12
 8001834:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001838:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	@ (800185c <HAL_SD_MspInit+0x178>)
 8001840:	f000 fcc4 	bl	80021cc <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001844:	bf00      	nop
 8001846:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	46008000 	.word	0x46008000
 8001854:	44020c00 	.word	0x44020c00
 8001858:	42020800 	.word	0x42020800
 800185c:	42020c00 	.word	0x42020c00

08001860 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001870:	d10e      	bne.n	8001890 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_TIM_Base_MspInit+0x3c>)
 8001874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001878:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_TIM_Base_MspInit+0x3c>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_TIM_Base_MspInit+0x3c>)
 8001884:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	44020c00 	.word	0x44020c00

080018a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c0:	d13e      	bne.n	8001940 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <HAL_TIM_MspPostInit+0xa8>)
 80018c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_TIM_MspPostInit+0xa8>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <HAL_TIM_MspPostInit+0xa8>)
 80018d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_TIM_MspPostInit+0xa8>)
 80018e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e6:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <HAL_TIM_MspPostInit+0xa8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_TIM_MspPostInit+0xa8>)
 80018f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PC4     ------> TIM2_CH4
    PA15(JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM2_Pin;
 80018fe:	2310      	movs	r3, #16
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800190e:	2301      	movs	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <HAL_TIM_MspPostInit+0xac>)
 800191a:	f000 fc57 	bl	80021cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM1_Pin;
 800191e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001930:	2301      	movs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <HAL_TIM_MspPostInit+0xb0>)
 800193c:	f000 fc46 	bl	80021cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	44020c00 	.word	0x44020c00
 800194c:	42020800 	.word	0x42020800
 8001950:	42020000 	.word	0x42020000

08001954 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b0c6      	sub	sp, #280	@ 0x118
 8001958:	af00      	add	r7, sp, #0
 800195a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800195e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001962:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001964:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800196c:	4618      	mov	r0, r3
 800196e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001972:	461a      	mov	r2, r3
 8001974:	2100      	movs	r1, #0
 8001976:	f00a fa59 	bl	800be2c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800197a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800197e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1e      	ldr	r2, [pc, #120]	@ (8001a00 <HAL_PCD_MspInit+0xac>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d133      	bne.n	80019f4 <HAL_PCD_MspInit+0xa0>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800198c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001990:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0310 	mov.w	r3, #16
 800199c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80019a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019a8:	2230      	movs	r2, #48	@ 0x30
 80019aa:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 ff90 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80019be:	f7fe ff35 	bl	800082c <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80019c2:	f000 ffff 	bl	80029c4 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_PCD_MspInit+0xb0>)
 80019d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019dc:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80019e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019f2:	681b      	ldr	r3, [r3, #0]

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80019f4:	bf00      	nop
 80019f6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40016000 	.word	0x40016000
 8001a04:	44020c00 	.word	0x44020c00

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <NMI_Handler+0x4>

08001a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <MemManage_Handler+0x4>

08001a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5e:	f000 fa0d 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  return 1;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_kill>:

int _kill(int pid, int sig)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a80:	f00a fa76 	bl	800bf70 <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2216      	movs	r2, #22
 8001a88:	601a      	str	r2, [r3, #0]
  return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_exit>:

void _exit (int status)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffe7 	bl	8001a76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <_exit+0x12>

08001aac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e00a      	b.n	8001ad4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001abe:	f3af 8000 	nop.w
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	b2ca      	uxtb	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf0      	blt.n	8001abe <_read+0x12>
  }

  return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e009      	b.n	8001b0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf1      	blt.n	8001af8 <_write+0x12>
  }
  return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_close>:

int _close(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b46:	605a      	str	r2, [r3, #4]
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_isatty>:

int _isatty(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f00a f9da 	bl	800bf70 <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	@ (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200a0000 	.word	0x200a0000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	20001668 	.word	0x20001668
 8001bf0:	200017c0 	.word	0x200017c0

08001bf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bfa:	4b35      	ldr	r3, [pc, #212]	@ (8001cd0 <SystemInit+0xdc>)
 8001bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c00:	4a33      	ldr	r2, [pc, #204]	@ (8001cd0 <SystemInit+0xdc>)
 8001c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001c0a:	4b32      	ldr	r3, [pc, #200]	@ (8001cd4 <SystemInit+0xe0>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c10:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <SystemInit+0xe0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c16:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <SystemInit+0xe0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd4 <SystemInit+0xe0>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	492c      	ldr	r1, [pc, #176]	@ (8001cd4 <SystemInit+0xe0>)
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <SystemInit+0xe4>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c28:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <SystemInit+0xe0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <SystemInit+0xe0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001c34:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <SystemInit+0xe0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <SystemInit+0xe0>)
 8001c3c:	4a27      	ldr	r2, [pc, #156]	@ (8001cdc <SystemInit+0xe8>)
 8001c3e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001c40:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <SystemInit+0xe0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <SystemInit+0xe0>)
 8001c48:	4a24      	ldr	r2, [pc, #144]	@ (8001cdc <SystemInit+0xe8>)
 8001c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <SystemInit+0xe0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <SystemInit+0xe0>)
 8001c54:	4a21      	ldr	r2, [pc, #132]	@ (8001cdc <SystemInit+0xe8>)
 8001c56:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <SystemInit+0xe0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <SystemInit+0xe0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <SystemInit+0xe0>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <SystemInit+0xe0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <SystemInit+0xdc>)
 8001c72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c76:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001c78:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <SystemInit+0xec>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001c80:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001c88:	d003      	beq.n	8001c92 <SystemInit+0x9e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c90:	d117      	bne.n	8001cc2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <SystemInit+0xec>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <SystemInit+0xec>)
 8001ca0:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <SystemInit+0xf0>)
 8001ca2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <SystemInit+0xec>)
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <SystemInit+0xf4>)
 8001ca8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001caa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <SystemInit+0xec>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <SystemInit+0xec>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <SystemInit+0xec>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <SystemInit+0xec>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	61d3      	str	r3, [r2, #28]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	44020c00 	.word	0x44020c00
 8001cd8:	eae2eae3 	.word	0xeae2eae3
 8001cdc:	01010280 	.word	0x01010280
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	08192a3b 	.word	0x08192a3b
 8001ce8:	4c5d6e7f 	.word	0x4c5d6e7f

08001cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cf0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cf2:	e003      	b.n	8001cfc <LoopCopyDataInit>

08001cf4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cf6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cf8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cfa:	3104      	adds	r1, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cfc:	480b      	ldr	r0, [pc, #44]	@ (8001d2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d04:	d3f6      	bcc.n	8001cf4 <CopyDataInit>
	ldr	r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d08:	e002      	b.n	8001d10 <LoopFillZerobss>

08001d0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d0c:	f842 3b04 	str.w	r3, [r2], #4

08001d10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <LoopForever+0x16>)
	cmp	r2, r3
 8001d12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d14:	d3f9      	bcc.n	8001d0a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d16:	f7ff ff6d 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f00a f92f 	bl	800bf7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d1e:	f7fe fab5 	bl	800028c <main>

08001d22 <LoopForever>:

LoopForever:
    b LoopForever
 8001d22:	e7fe      	b.n	8001d22 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d24:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001d28:	0800c2ac 	.word	0x0800c2ac
	ldr	r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d30:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8001d34:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8001d38:	200017bc 	.word	0x200017bc

08001d3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC1_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 f96c 	bl	8002022 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d4a:	f001 fc3b 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <HAL_Init+0x44>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	490b      	ldr	r1, [pc, #44]	@ (8001d88 <HAL_Init+0x48>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_Init+0x4c>)
 8001d62:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d64:	2004      	movs	r0, #4
 8001d66:	f000 f9a3 	bl	80020b0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f000 f810 	bl	8001d90 <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e002      	b.n	8001d80 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7a:	f7ff fbb1 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	44020c00 	.word	0x44020c00
 8001d88:	0800c28c 	.word	0x0800c28c
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d9c:	4b33      	ldr	r3, [pc, #204]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e05c      	b.n	8001e62 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001da8:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HAL_InitTick+0xe0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d10c      	bne.n	8001dce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001db4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <HAL_InitTick+0xe4>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e037      	b.n	8001e3e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001dce:	f000 f9c7 	bl	8002160 <HAL_SYSTICK_GetCLKSourceConfig>
 8001dd2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d023      	beq.n	8001e22 <HAL_InitTick+0x92>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d82d      	bhi.n	8001e3c <HAL_InitTick+0xac>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_InitTick+0x5e>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d00d      	beq.n	8001e08 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001dec:	e026      	b.n	8001e3c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001dee:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <HAL_InitTick+0xe4>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001dfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]
        break;
 8001e06:	e01a      	b.n	8001e3e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	60fb      	str	r3, [r7, #12]
        break;
 8001e20:	e00d      	b.n	8001e3e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_InitTick+0xdc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	60fb      	str	r3, [r7, #12]
        break;
 8001e3a:	e000      	b.n	8001e3e <HAL_InitTick+0xae>
        break;
 8001e3c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f914 	bl	800206c <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e009      	b.n	8001e62 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
 8001e56:	f000 f8ef 	bl	8002038 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001e5a:	4a07      	ldr	r2, [pc, #28]	@ (8001e78 <HAL_InitTick+0xe8>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000000c 	.word	0x2000000c
 8001e70:	e000e010 	.word	0xe000e010
 8001e74:	20000004 	.word	0x20000004
 8001e78:	20000008 	.word	0x20000008

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c
 8001ea0:	2000166c 	.word	0x2000166c

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	2000166c 	.word	0x2000166c

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff6a 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002046:	f7ff ff81 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 800204a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff ffb3 	bl	8001fbc <NVIC_EncodePriority>
 8002056:	4602      	mov	r2, r0
 8002058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff82 	bl	8001f68 <__NVIC_SetPriority>
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800207c:	d301      	bcc.n	8002082 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800207e:	2301      	movs	r3, #1
 8002080:	e00d      	b.n	800209e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <HAL_SYSTICK_Config+0x40>)
 8002096:	f043 0303 	orr.w	r3, r3, #3
 800209a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d844      	bhi.n	8002148 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020e7 	.word	0x080020e7
 80020c8:	08002105 	.word	0x08002105
 80020cc:	08002127 	.word	0x08002127
 80020d0:	08002149 	.word	0x08002149
 80020d4:	080020d9 	.word	0x080020d9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6013      	str	r3, [r2, #0]
      break;
 80020e4:	e031      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80020f8:	4a18      	ldr	r2, [pc, #96]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020fa:	f023 030c 	bic.w	r3, r3, #12
 80020fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002102:	e022      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a13      	ldr	r2, [pc, #76]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002112:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002116:	f023 030c 	bic.w	r3, r3, #12
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002124:	e011      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002138:	f023 030c 	bic.w	r3, r3, #12
 800213c:	4a07      	ldr	r2, [pc, #28]	@ (800215c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002146:	e000      	b.n	800214a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002148:	bf00      	nop
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010
 800215c:	44020c00 	.word	0x44020c00

08002160 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002172:	2304      	movs	r3, #4
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	e01e      	b.n	80021b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800217a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b08      	cmp	r3, #8
 8002188:	d00f      	beq.n	80021aa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d80f      	bhi.n	80021b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d003      	beq.n	80021a4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800219c:	e008      	b.n	80021b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
        break;
 80021a2:	e008      	b.n	80021b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80021a4:	2301      	movs	r3, #1
 80021a6:	607b      	str	r3, [r7, #4]
        break;
 80021a8:	e005      	b.n	80021b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80021aa:	2302      	movs	r3, #2
 80021ac:	607b      	str	r3, [r7, #4]
        break;
 80021ae:	e002      	b.n	80021b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
        break;
 80021b4:	bf00      	nop
    }
  }
  return systick_source;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e010 	.word	0xe000e010
 80021c8:	44020c00 	.word	0x44020c00

080021cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021da:	e142      	b.n	8002462 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8134 	beq.w	800245c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x38>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d125      	bne.n	8002250 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f003 020f 	and.w	r2, r3, #15
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	6979      	ldr	r1, [r7, #20]
 800224c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0203 	and.w	r2, r3, #3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d00b      	beq.n	80022a4 <HAL_GPIO_Init+0xd8>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d007      	beq.n	80022a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002298:	2b11      	cmp	r3, #17
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b12      	cmp	r3, #18
 80022a2:	d130      	bne.n	8002306 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022da:	2201      	movs	r2, #1
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4013      	ands	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 0201 	and.w	r2, r3, #1
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b03      	cmp	r3, #3
 8002310:	d109      	bne.n	8002326 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800231a:	2b03      	cmp	r3, #3
 800231c:	d11b      	bne.n	8002356 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d017      	beq.n	8002356 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4013      	ands	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d07c      	beq.n	800245c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002362:	4a47      	ldr	r2, [pc, #284]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3318      	adds	r3, #24
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4013      	ands	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0a9a      	lsrs	r2, r3, #10
 800238a:	4b3e      	ldr	r3, [pc, #248]	@ (8002484 <HAL_GPIO_Init+0x2b8>)
 800238c:	4013      	ands	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	f002 0203 	and.w	r2, r2, #3
 8002394:	00d2      	lsls	r2, r2, #3
 8002396:	4093      	lsls	r3, r2
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800239e:	4938      	ldr	r1, [pc, #224]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3318      	adds	r3, #24
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80023ac:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4013      	ands	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80023d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	4013      	ands	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002400:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002406:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4013      	ands	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002426:	4a16      	ldr	r2, [pc, #88]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 8002430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002434:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <HAL_GPIO_Init+0x2b4>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3301      	adds	r3, #1
 8002460:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f aeb5 	bne.w	80021dc <HAL_GPIO_Init+0x10>
  }
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	44022000 	.word	0x44022000
 8002484:	002f7f7f 	.word	0x002f7f7f

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a4:	e002      	b.n	80024ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e08d      	b.n	80025e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff f806 	bl	80014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	@ 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800253e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d108      	bne.n	800255a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	e007      	b.n	800256a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800257c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800258c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69d9      	ldr	r1, [r3, #28]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b20      	cmp	r3, #32
 8002602:	d138      	bne.n	8002676 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800260e:	2302      	movs	r3, #2
 8002610:	e032      	b.n	8002678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2224      	movs	r2, #36	@ 0x24
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002640:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	d139      	bne.n	800270e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e033      	b.n	8002710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2224      	movs	r2, #36	@ 0x24
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e007      	b.n	800274a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0204 	bic.w	r2, r3, #4
 8002742:	4905      	ldr	r1, [pc, #20]	@ (8002758 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
  }

  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40030400 	.word	0x40030400

0800275c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_ICACHE_Enable+0x1c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <HAL_ICACHE_Enable+0x1c>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40030400 	.word	0x40030400

0800277c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af02      	add	r7, sp, #8
 8002782:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0f3      	b.n	8002976 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff f8d6 	bl	8001954 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f008 ff68 	bl	800b68a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7c1a      	ldrb	r2, [r3, #16]
 80027c2:	f88d 2000 	strb.w	r2, [sp]
 80027c6:	3304      	adds	r3, #4
 80027c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ca:	f008 ff40 	bl	800b64e <USB_CoreInit>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0ca      	b.n	8002976 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f008 ff64 	bl	800b6b4 <USB_SetCurrentMode>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0bb      	b.n	8002976 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e03f      	b.n	8002884 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3315      	adds	r3, #21
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3314      	adds	r3, #20
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	3317      	adds	r3, #23
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3324      	adds	r3, #36	@ 0x24
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	3328      	adds	r3, #40	@ 0x28
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	3304      	adds	r3, #4
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	3301      	adds	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	429a      	cmp	r2, r3
 800288c:	d3ba      	bcc.n	8002804 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e044      	b.n	800291e <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	3301      	adds	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	791b      	ldrb	r3, [r3, #4]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3b5      	bcc.n	8002894 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7c1a      	ldrb	r2, [r3, #16]
 8002930:	f88d 2000 	strb.w	r2, [sp]
 8002934:	3304      	adds	r3, #4
 8002936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002938:	f008 fedf 	bl	800b6fa <USB_DevInit>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e013      	b.n	8002976 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7b1b      	ldrb	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f80a 	bl	800297e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f008 fee6 	bl	800b740 <USB_DevDisconnect>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ac:	f043 0202 	orr.w	r2, r3, #2
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	44020800 	.word	0x44020800

080029e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f000 bc28 	b.w	8003248 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f8:	4b94      	ldr	r3, [pc, #592]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0318 	and.w	r3, r3, #24
 8002a00:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002a02:	4b92      	ldr	r3, [pc, #584]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d005      	beq.n	8002a2a <HAL_RCC_OscConfig+0x46>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b18      	cmp	r3, #24
 8002a22:	d114      	bne.n	8002a4e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d111      	bne.n	8002a4e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f000 bc08 	b.w	8003248 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002a38:	4b84      	ldr	r3, [pc, #528]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	4981      	ldr	r1, [pc, #516]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002a4c:	e040      	b.n	8002ad0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d023      	beq.n	8002a9e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a56:	4b7d      	ldr	r3, [pc, #500]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7ff fa1f 	bl	8001ea4 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002a6a:	f7ff fa1b 	bl	8001ea4 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e3e5      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a7c:	4b73      	ldr	r3, [pc, #460]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002a88:	4b70      	ldr	r3, [pc, #448]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	496d      	ldr	r1, [pc, #436]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	618b      	str	r3, [r1, #24]
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6a      	ldr	r2, [pc, #424]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7ff f9fb 	bl	8001ea4 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002ab2:	f7ff f9f7 	bl	8001ea4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e3c1      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002ac4:	4b61      	ldr	r3, [pc, #388]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a0 	beq.w	8002c1e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_OscConfig+0x10c>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b18      	cmp	r3, #24
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 8092 	bne.w	8002c1e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e3a4      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x132>
 8002b08:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e058      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1e4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d112      	bne.n	8002b44 <HAL_RCC_OscConfig+0x160>
 8002b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4a      	ldr	r2, [pc, #296]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b48      	ldr	r3, [pc, #288]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a47      	ldr	r2, [pc, #284]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b45      	ldr	r3, [pc, #276]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a44      	ldr	r2, [pc, #272]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e041      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1e4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b4c:	d112      	bne.n	8002b74 <HAL_RCC_OscConfig+0x190>
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3e      	ldr	r2, [pc, #248]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b39      	ldr	r3, [pc, #228]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a38      	ldr	r2, [pc, #224]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e029      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1e4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b7c:	d112      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1c0>
 8002b7e:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a32      	ldr	r2, [pc, #200]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e011      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1e4>
 8002ba4:	4b29      	ldr	r3, [pc, #164]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a28      	ldr	r2, [pc, #160]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a25      	ldr	r2, [pc, #148]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002bc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f968 	bl	8001ea4 <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f964 	bl	8001ea4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	@ 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e32e      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bea:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x1f4>
 8002bf6:	e012      	b.n	8002c1e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7ff f954 	bl	8001ea4 <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c00:	f7ff f950 	bl	8001ea4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e31a      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_RCC_OscConfig+0x268>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 809a 	beq.w	8002d60 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x25a>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	2b18      	cmp	r3, #24
 8002c36:	d149      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d146      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d104      	bne.n	8002c50 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e2fe      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
 8002c4a:	bf00      	nop
 8002c4c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002c56:	4b9a      	ldr	r3, [pc, #616]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0218 	and.w	r2, r3, #24
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d014      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002c66:	4b96      	ldr	r3, [pc, #600]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0218 	bic.w	r2, r3, #24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	4993      	ldr	r1, [pc, #588]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002c78:	f000 fdd0 	bl	800381c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c7c:	4b91      	ldr	r3, [pc, #580]	@ (8002ec4 <HAL_RCC_OscConfig+0x4e0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f885 	bl	8001d90 <HAL_InitTick>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e2db      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7ff f908 	bl	8001ea4 <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002c98:	f7ff f904 	bl	8001ea4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e2ce      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002caa:	4b85      	ldr	r3, [pc, #532]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002cb6:	4b82      	ldr	r3, [pc, #520]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	497e      	ldr	r1, [pc, #504]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002cca:	e049      	b.n	8002d60 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d02c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002cd4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 0218 	bic.w	r2, r3, #24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	4977      	ldr	r1, [pc, #476]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7ff f8d7 	bl	8001ea4 <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002cfa:	f7ff f8d3 	bl	8001ea4 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e29d      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002d18:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	4966      	ldr	r1, [pc, #408]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	610b      	str	r3, [r1, #16]
 8002d2c:	e018      	b.n	8002d60 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b64      	ldr	r3, [pc, #400]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a63      	ldr	r2, [pc, #396]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7ff f8b3 	bl	8001ea4 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d42:	f7ff f8af 	bl	8001ea4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e279      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d54:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d74:	4b52      	ldr	r3, [pc, #328]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d7a:	4a51      	ldr	r2, [pc, #324]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7ff f88e 	bl	8001ea4 <HAL_GetTick>
 8002d88:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002d8c:	f7ff f88a 	bl	8001ea4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e254      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d9e:	4b48      	ldr	r3, [pc, #288]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3a8>
 8002dac:	e01b      	b.n	8002de6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dae:	4b44      	ldr	r3, [pc, #272]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002db4:	4a42      	ldr	r2, [pc, #264]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002db6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7ff f871 	bl	8001ea4 <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002dc6:	f7ff f86d 	bl	8001ea4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e237      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80d2 	beq.w	8002f98 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002df4:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <HAL_RCC_OscConfig+0x4e4>)
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d118      	bne.n	8002e32 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002e00:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <HAL_RCC_OscConfig+0x4e4>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	4a30      	ldr	r2, [pc, #192]	@ (8002ec8 <HAL_RCC_OscConfig+0x4e4>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0c:	f7ff f84a 	bl	8001ea4 <HAL_GetTick>
 8002e10:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7ff f846 	bl	8001ea4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e210      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002e26:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_RCC_OscConfig+0x4e4>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x468>
 8002e3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e40:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e4a:	e074      	b.n	8002f36 <HAL_RCC_OscConfig+0x552>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d118      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4a2>
 8002e54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e64:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e74:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e7a:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e84:	e057      	b.n	8002f36 <HAL_RCC_OscConfig+0x552>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d11e      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4e8>
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ea4:	4a06      	ldr	r2, [pc, #24]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eb4:	4a02      	ldr	r2, [pc, #8]	@ (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ebe:	e03a      	b.n	8002f36 <HAL_RCC_OscConfig+0x552>
 8002ec0:	44020c00 	.word	0x44020c00
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	44020800 	.word	0x44020800
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b85      	cmp	r3, #133	@ 0x85
 8002ed2:	d118      	bne.n	8002f06 <HAL_RCC_OscConfig+0x522>
 8002ed4:	4ba2      	ldr	r3, [pc, #648]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eda:	4aa1      	ldr	r2, [pc, #644]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ee4:	4b9e      	ldr	r3, [pc, #632]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eea:	4a9d      	ldr	r2, [pc, #628]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ef4:	4b9a      	ldr	r3, [pc, #616]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002efa:	4a99      	ldr	r2, [pc, #612]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f04:	e017      	b.n	8002f36 <HAL_RCC_OscConfig+0x552>
 8002f06:	4b96      	ldr	r3, [pc, #600]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f0c:	4a94      	ldr	r2, [pc, #592]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f16:	4b92      	ldr	r3, [pc, #584]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f1c:	4a90      	ldr	r2, [pc, #576]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f1e:	f023 0304 	bic.w	r3, r3, #4
 8002f22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f26:	4b8e      	ldr	r3, [pc, #568]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f2c:	4a8c      	ldr	r2, [pc, #560]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fe ffb1 	bl	8001ea4 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe ffad 	bl	8001ea4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e175      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5c:	4b80      	ldr	r3, [pc, #512]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ed      	beq.n	8002f46 <HAL_RCC_OscConfig+0x562>
 8002f6a:	e015      	b.n	8002f98 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe ff9a 	bl	8001ea4 <HAL_GetTick>
 8002f70:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fe ff96 	bl	8001ea4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e15e      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f8a:	4b75      	ldr	r3, [pc, #468]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ed      	bne.n	8002f74 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d036      	beq.n	8003012 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d019      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fac:	4b6c      	ldr	r3, [pc, #432]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6b      	ldr	r2, [pc, #428]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002fb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe ff74 	bl	8001ea4 <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002fc0:	f7fe ff70 	bl	8001ea4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e13a      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002fd2:	4b63      	ldr	r3, [pc, #396]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x5dc>
 8002fde:	e018      	b.n	8003012 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fe0:	4b5f      	ldr	r3, [pc, #380]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5e      	ldr	r2, [pc, #376]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8002fe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe ff5a 	bl	8001ea4 <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002ff4:	f7fe ff56 	bl	8001ea4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e120      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003006:	4b56      	ldr	r3, [pc, #344]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8115 	beq.w	8003246 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b18      	cmp	r3, #24
 8003020:	f000 80af 	beq.w	8003182 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	2b02      	cmp	r3, #2
 800302a:	f040 8086 	bne.w	800313a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800302e:	4b4c      	ldr	r3, [pc, #304]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4b      	ldr	r2, [pc, #300]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003034:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe ff33 	bl	8001ea4 <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003042:	f7fe ff2f 	bl	8001ea4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0f9      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003054:	4b42      	ldr	r3, [pc, #264]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003060:	4b3f      	ldr	r3, [pc, #252]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003068:	f023 0303 	bic.w	r3, r3, #3
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003074:	0212      	lsls	r2, r2, #8
 8003076:	430a      	orrs	r2, r1
 8003078:	4939      	ldr	r1, [pc, #228]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	628b      	str	r3, [r1, #40]	@ 0x28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003082:	3b01      	subs	r3, #1
 8003084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	3b01      	subs	r3, #1
 800308e:	025b      	lsls	r3, r3, #9
 8003090:	b29b      	uxth	r3, r3
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	3b01      	subs	r3, #1
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	3b01      	subs	r3, #1
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030ae:	492c      	ldr	r1, [pc, #176]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80030b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	4a29      	ldr	r2, [pc, #164]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	4a26      	ldr	r2, [pc, #152]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80030ca:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	4a24      	ldr	r2, [pc, #144]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030d0:	f043 0310 	orr.w	r3, r3, #16
 80030d4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80030d6:	4b22      	ldr	r3, [pc, #136]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	f023 020c 	bic.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	491f      	ldr	r1, [pc, #124]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	f023 0220 	bic.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f4:	491a      	ldr	r1, [pc, #104]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030fa:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	4a18      	ldr	r2, [pc, #96]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 800310c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe fec7 	bl	8001ea4 <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800311a:	f7fe fec3 	bl	8001ea4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e08d      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x736>
 8003138:	e085      	b.n	8003246 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <HAL_RCC_OscConfig+0x77c>)
 8003140:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fead 	bl	8001ea4 <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800314e:	f7fe fea9 	bl	8001ea4 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d903      	bls.n	8003164 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e073      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
 8003160:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003164:	4b3a      	ldr	r3, [pc, #232]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ee      	bne.n	800314e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003170:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	4a36      	ldr	r2, [pc, #216]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003176:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	6293      	str	r3, [r2, #40]	@ 0x28
 8003180:	e061      	b.n	8003246 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003182:	4b33      	ldr	r3, [pc, #204]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003188:	4b31      	ldr	r3, [pc, #196]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	2b01      	cmp	r3, #1
 8003194:	d031      	beq.n	80031fa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f003 0203 	and.w	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d12a      	bne.n	80031fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d122      	bne.n	80031fa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031be:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d11a      	bne.n	80031fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	0a5b      	lsrs	r3, r3, #9
 80031c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d111      	bne.n	80031fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d108      	bne.n	80031fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	0e1b      	lsrs	r3, r3, #24
 80031ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e024      	b.n	8003248 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031fe:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003202:	08db      	lsrs	r3, r3, #3
 8003204:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800320c:	429a      	cmp	r2, r3
 800320e:	d01a      	beq.n	8003246 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003210:	4b0f      	ldr	r3, [pc, #60]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	4a0e      	ldr	r2, [pc, #56]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fe42 	bl	8001ea4 <HAL_GetTick>
 8003220:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003222:	bf00      	nop
 8003224:	f7fe fe3e 	bl	8001ea4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4293      	cmp	r3, r2
 800322e:	d0f9      	beq.n	8003224 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003234:	4a06      	ldr	r2, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800323a:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <HAL_RCC_OscConfig+0x86c>)
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	44020c00 	.word	0x44020c00

08003254 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e19e      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b83      	ldr	r3, [pc, #524]	@ (8003478 <HAL_RCC_ClockConfig+0x224>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b80      	ldr	r3, [pc, #512]	@ (8003478 <HAL_RCC_ClockConfig+0x224>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 020f 	bic.w	r2, r3, #15
 800327e:	497e      	ldr	r1, [pc, #504]	@ (8003478 <HAL_RCC_ClockConfig+0x224>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b7c      	ldr	r3, [pc, #496]	@ (8003478 <HAL_RCC_ClockConfig+0x224>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e186      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	4b74      	ldr	r3, [pc, #464]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d909      	bls.n	80032ca <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80032b6:	4b71      	ldr	r3, [pc, #452]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	496d      	ldr	r1, [pc, #436]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	4b68      	ldr	r3, [pc, #416]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d909      	bls.n	80032fc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80032e8:	4b64      	ldr	r3, [pc, #400]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4961      	ldr	r1, [pc, #388]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	4b5b      	ldr	r3, [pc, #364]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003314:	429a      	cmp	r2, r3
 8003316:	d908      	bls.n	800332a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003318:	4b58      	ldr	r3, [pc, #352]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4955      	ldr	r1, [pc, #340]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 8003326:	4313      	orrs	r3, r2
 8003328:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	4b50      	ldr	r3, [pc, #320]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	429a      	cmp	r2, r3
 8003344:	d908      	bls.n	8003358 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003346:	4b4d      	ldr	r3, [pc, #308]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 020f 	bic.w	r2, r3, #15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	494a      	ldr	r1, [pc, #296]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 8003354:	4313      	orrs	r3, r2
 8003356:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8093 	beq.w	800348c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800336e:	4b43      	ldr	r3, [pc, #268]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d121      	bne.n	80033be <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e113      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003386:	4b3d      	ldr	r3, [pc, #244]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d115      	bne.n	80033be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e107      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800339e:	4b37      	ldr	r3, [pc, #220]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0fb      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ae:	4b33      	ldr	r3, [pc, #204]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0f3      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80033be:	4b2f      	ldr	r3, [pc, #188]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f023 0203 	bic.w	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	492c      	ldr	r1, [pc, #176]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7fe fd68 	bl	8001ea4 <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fe fd60 	bl	8001ea4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0d7      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f6:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0318 	and.w	r3, r3, #24
 80033fe:	2b18      	cmp	r3, #24
 8003400:	d1ee      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x18c>
 8003402:	e043      	b.n	800348c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d112      	bne.n	8003432 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800340e:	f7fe fd49 	bl	8001ea4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0c0      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003424:	4b15      	ldr	r3, [pc, #84]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 0318 	and.w	r3, r3, #24
 800342c:	2b10      	cmp	r3, #16
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_ClockConfig+0x1ba>
 8003430:	e02c      	b.n	800348c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d122      	bne.n	8003480 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe fd32 	bl	8001ea4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0a9      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003452:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <HAL_RCC_ClockConfig+0x228>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 0318 	and.w	r3, r3, #24
 800345a:	2b08      	cmp	r3, #8
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_ClockConfig+0x1e8>
 800345e:	e015      	b.n	800348c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fe fd20 	bl	8001ea4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d906      	bls.n	8003480 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e097      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
 8003476:	bf00      	nop
 8003478:	40022000 	.word	0x40022000
 800347c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003480:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 0318 	and.w	r3, r3, #24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e9      	bne.n	8003460 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d010      	beq.n	80034ba <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	4b44      	ldr	r3, [pc, #272]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d208      	bcs.n	80034ba <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80034a8:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 020f 	bic.w	r2, r3, #15
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	493e      	ldr	r1, [pc, #248]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ba:	4b3e      	ldr	r3, [pc, #248]	@ (80035b4 <HAL_RCC_ClockConfig+0x360>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d210      	bcs.n	80034ea <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c8:	4b3a      	ldr	r3, [pc, #232]	@ (80035b4 <HAL_RCC_ClockConfig+0x360>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 020f 	bic.w	r2, r3, #15
 80034d0:	4938      	ldr	r1, [pc, #224]	@ (80035b4 <HAL_RCC_ClockConfig+0x360>)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d8:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <HAL_RCC_ClockConfig+0x360>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e05d      	b.n	80035a6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	4b2d      	ldr	r3, [pc, #180]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003502:	429a      	cmp	r2, r3
 8003504:	d208      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003506:	4b2a      	ldr	r3, [pc, #168]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4927      	ldr	r1, [pc, #156]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	4b21      	ldr	r3, [pc, #132]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003532:	429a      	cmp	r2, r3
 8003534:	d209      	bcs.n	800354a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003536:	4b1e      	ldr	r3, [pc, #120]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	491a      	ldr	r1, [pc, #104]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d012      	beq.n	800357c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003564:	429a      	cmp	r2, r3
 8003566:	d209      	bcs.n	800357c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	490e      	ldr	r1, [pc, #56]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800357c:	f000 f822 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_ClockConfig+0x35c>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490b      	ldr	r1, [pc, #44]	@ (80035b8 <HAL_RCC_ClockConfig+0x364>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <HAL_RCC_ClockConfig+0x368>)
 8003594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003596:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <HAL_RCC_ClockConfig+0x36c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fbf8 	bl	8001d90 <HAL_InitTick>
 80035a0:	4603      	mov	r3, r0
 80035a2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80035a4:	7afb      	ldrb	r3, [r7, #11]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	44020c00 	.word	0x44020c00
 80035b4:	40022000 	.word	0x40022000
 80035b8:	0800c28c 	.word	0x0800c28c
 80035bc:	20000004 	.word	0x20000004
 80035c0:	20000008 	.word	0x20000008

080035c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80035ca:	4b8c      	ldr	r3, [pc, #560]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0318 	and.w	r3, r3, #24
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80035d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x23c>)
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e107      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035dc:	4b87      	ldr	r3, [pc, #540]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f003 0318 	and.w	r3, r3, #24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d112      	bne.n	800360e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80035e8:	4b84      	ldr	r3, [pc, #528]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80035f4:	4b81      	ldr	r3, [pc, #516]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	4a81      	ldr	r2, [pc, #516]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x240>)
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e0f1      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003608:	4b7e      	ldr	r3, [pc, #504]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x240>)
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e0ee      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800360e:	4b7b      	ldr	r3, [pc, #492]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 0318 	and.w	r3, r3, #24
 8003616:	2b10      	cmp	r3, #16
 8003618:	d102      	bne.n	8003620 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800361a:	4b7b      	ldr	r3, [pc, #492]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x244>)
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e0e5      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003620:	4b76      	ldr	r3, [pc, #472]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f003 0318 	and.w	r3, r3, #24
 8003628:	2b18      	cmp	r3, #24
 800362a:	f040 80dd 	bne.w	80037e8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800362e:	4b73      	ldr	r3, [pc, #460]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003638:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003642:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003644:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003650:	4b6a      	ldr	r3, [pc, #424]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003668:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b7 	beq.w	80037e2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0xbe>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d056      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x16a>
 8003680:	e077      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003682:	4b5e      	ldr	r3, [pc, #376]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02d      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800368e:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	08db      	lsrs	r3, r3, #3
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	4a5a      	ldr	r2, [pc, #360]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x240>)
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b8:	4b50      	ldr	r3, [pc, #320]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 80036ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80036c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80036cc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800380c <HAL_RCC_GetSysClockFreq+0x248>
 80036d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80036d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80036e8:	e065      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003810 <HAL_RCC_GetSysClockFreq+0x24c>
 80036f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fc:	4b3f      	ldr	r3, [pc, #252]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 80036fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800370c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003710:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800380c <HAL_RCC_GetSysClockFreq+0x248>
 8003714:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003718:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800371c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003720:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003728:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800372c:	e043      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003738:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003814 <HAL_RCC_GetSysClockFreq+0x250>
 800373c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003750:	ed97 6a02 	vldr	s12, [r7, #8]
 8003754:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800380c <HAL_RCC_GetSysClockFreq+0x248>
 8003758:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800375c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003760:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003764:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003770:	e021      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003818 <HAL_RCC_GetSysClockFreq+0x254>
 8003780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003784:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 8003786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003794:	ed97 6a02 	vldr	s12, [r7, #8]
 8003798:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800380c <HAL_RCC_GetSysClockFreq+0x248>
 800379c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80037b4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x238>)
 80037b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ba:	0a5b      	lsrs	r3, r3, #9
 80037bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037c0:	3301      	adds	r3, #1
 80037c2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80037d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037da:	ee17 3a90 	vmov	r3, s15
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e004      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e001      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x240>)
 80037ea:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80037ec:	69fb      	ldr	r3, [r7, #28]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	@ 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	44020c00 	.word	0x44020c00
 8003800:	003d0900 	.word	0x003d0900
 8003804:	03d09000 	.word	0x03d09000
 8003808:	007a1200 	.word	0x007a1200
 800380c:	46000000 	.word	0x46000000
 8003810:	4c742400 	.word	0x4c742400
 8003814:	4af42400 	.word	0x4af42400
 8003818:	4a742400 	.word	0x4a742400

0800381c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003820:	f7ff fed0 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800382a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800382e:	4907      	ldr	r1, [pc, #28]	@ (800384c <HAL_RCC_GetHCLKFreq+0x30>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003832:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a05      	ldr	r2, [pc, #20]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x34>)
 800383c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800383e:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x34>)
 8003840:	681b      	ldr	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	44020c00 	.word	0x44020c00
 800384c:	0800c28c 	.word	0x0800c28c
 8003850:	20000004 	.word	0x20000004

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003858:	f7ff ffe0 	bl	800381c <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	@ (800387c <HAL_RCC_GetPCLK1Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	44020c00 	.word	0x44020c00
 800387c:	0800c29c 	.word	0x0800c29c

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003884:	f7ff ffca 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4904      	ldr	r1, [pc, #16]	@ (80038a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	44020c00 	.word	0x44020c00
 80038a8:	0800c29c 	.word	0x0800c29c

080038ac <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80038b0:	f7ff ffb4 	bl	800381c <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	0b1b      	lsrs	r3, r3, #12
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCC_GetPCLK3Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	44020c00 	.word	0x44020c00
 80038d4:	0800c29c 	.word	0x0800c29c

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b0d6      	sub	sp, #344	@ 0x158
 80038de:	af00      	add	r7, sp, #0
 80038e0:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80038fc:	2500      	movs	r5, #0
 80038fe:	ea54 0305 	orrs.w	r3, r4, r5
 8003902:	d00b      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003904:	4bcd      	ldr	r3, [pc, #820]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800390a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800390e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	4ac9      	ldr	r2, [pc, #804]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003916:	430b      	orrs	r3, r1
 8003918:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f002 0801 	and.w	r8, r2, #1
 8003928:	f04f 0900 	mov.w	r9, #0
 800392c:	ea58 0309 	orrs.w	r3, r8, r9
 8003930:	d042      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003932:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	2b05      	cmp	r3, #5
 800393a:	d823      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800393c:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	0800398d 	.word	0x0800398d
 8003948:	0800395d 	.word	0x0800395d
 800394c:	08003971 	.word	0x08003971
 8003950:	0800398d 	.word	0x0800398d
 8003954:	0800398d 	.word	0x0800398d
 8003958:	0800398d 	.word	0x0800398d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800395c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003960:	3308      	adds	r3, #8
 8003962:	4618      	mov	r0, r3
 8003964:	f004 fe68 	bl	8008638 <RCCEx_PLL2_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 800396e:	e00e      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003970:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003974:	3330      	adds	r3, #48	@ 0x30
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fef6 	bl	8008768 <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8003982:	e004      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800398c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10c      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003996:	4ba9      	ldr	r3, [pc, #676]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800399c:	f023 0107 	bic.w	r1, r3, #7
 80039a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	4aa5      	ldr	r2, [pc, #660]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80039b4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f002 0a02 	and.w	sl, r2, #2
 80039c4:	f04f 0b00 	mov.w	fp, #0
 80039c8:	ea5a 030b 	orrs.w	r3, sl, fp
 80039cc:	f000 8088 	beq.w	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80039d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	2b28      	cmp	r3, #40	@ 0x28
 80039d8:	d868      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003ab5 	.word	0x08003ab5
 80039e4:	08003aad 	.word	0x08003aad
 80039e8:	08003aad 	.word	0x08003aad
 80039ec:	08003aad 	.word	0x08003aad
 80039f0:	08003aad 	.word	0x08003aad
 80039f4:	08003aad 	.word	0x08003aad
 80039f8:	08003aad 	.word	0x08003aad
 80039fc:	08003aad 	.word	0x08003aad
 8003a00:	08003a85 	.word	0x08003a85
 8003a04:	08003aad 	.word	0x08003aad
 8003a08:	08003aad 	.word	0x08003aad
 8003a0c:	08003aad 	.word	0x08003aad
 8003a10:	08003aad 	.word	0x08003aad
 8003a14:	08003aad 	.word	0x08003aad
 8003a18:	08003aad 	.word	0x08003aad
 8003a1c:	08003aad 	.word	0x08003aad
 8003a20:	08003a99 	.word	0x08003a99
 8003a24:	08003aad 	.word	0x08003aad
 8003a28:	08003aad 	.word	0x08003aad
 8003a2c:	08003aad 	.word	0x08003aad
 8003a30:	08003aad 	.word	0x08003aad
 8003a34:	08003aad 	.word	0x08003aad
 8003a38:	08003aad 	.word	0x08003aad
 8003a3c:	08003aad 	.word	0x08003aad
 8003a40:	08003ab5 	.word	0x08003ab5
 8003a44:	08003aad 	.word	0x08003aad
 8003a48:	08003aad 	.word	0x08003aad
 8003a4c:	08003aad 	.word	0x08003aad
 8003a50:	08003aad 	.word	0x08003aad
 8003a54:	08003aad 	.word	0x08003aad
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	08003aad 	.word	0x08003aad
 8003a60:	08003ab5 	.word	0x08003ab5
 8003a64:	08003aad 	.word	0x08003aad
 8003a68:	08003aad 	.word	0x08003aad
 8003a6c:	08003aad 	.word	0x08003aad
 8003a70:	08003aad 	.word	0x08003aad
 8003a74:	08003aad 	.word	0x08003aad
 8003a78:	08003aad 	.word	0x08003aad
 8003a7c:	08003aad 	.word	0x08003aad
 8003a80:	08003ab5 	.word	0x08003ab5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a84:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a88:	3308      	adds	r3, #8
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 fdd4 	bl	8008638 <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8003a96:	e00e      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a98:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a9c:	3330      	adds	r3, #48	@ 0x30
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f004 fe62 	bl	8008768 <RCCEx_PLL3_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003abe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ac4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ac8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	4a5b      	ldr	r2, [pc, #364]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003adc:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f002 0304 	and.w	r3, r2, #4
 8003aec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003af6:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d04e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003b00:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b06:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b0a:	d02c      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003b0c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b10:	d825      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b16:	d028      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b1c:	d81f      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b20:	d025      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b24:	d81b      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003b26:	2b80      	cmp	r3, #128	@ 0x80
 8003b28:	d00f      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003b2a:	2b80      	cmp	r3, #128	@ 0x80
 8003b2c:	d817      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01f      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d113      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b36:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f004 fd7b 	bl	8008638 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8003b48:	e014      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b4e:	3330      	adds	r3, #48	@ 0x30
 8003b50:	4618      	mov	r0, r3
 8003b52:	f004 fe09 	bl	8008768 <RCCEx_PLL3_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003b64:	e006      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b66:	bf00      	nop
 8003b68:	e004      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b74:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b82:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b94:	e003      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b96:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003b9a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f002 0308 	and.w	r3, r2, #8
 8003baa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003bb4:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d056      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003bbe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003bc8:	d031      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003bca:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003bce:	d82a      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd4:	d02d      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bda:	d824      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003bdc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003be0:	d029      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003be2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003be6:	d81e      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bec:	d011      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf2:	d818      	bhi.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d023      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d113      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bfe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c02:	3308      	adds	r3, #8
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 fd17 	bl	8008638 <RCCEx_PLL2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003c10:	e017      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c12:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c16:	3330      	adds	r3, #48	@ 0x30
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 fda5 	bl	8008768 <RCCEx_PLL3_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003c24:	e00d      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003c2c:	e009      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003c2e:	bf00      	nop
 8003c30:	e007      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003c32:	bf00      	nop
 8003c34:	e005      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003c36:	bf00      	nop
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003c3a:	bf00      	nop
 8003c3c:	44020c00 	.word	0x44020c00
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003c4a:	4bbb      	ldr	r3, [pc, #748]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c50:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003c54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c5a:	4ab7      	ldr	r2, [pc, #732]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003c68:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 0310 	and.w	r3, r2, #16
 8003c78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003c82:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d053      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003c8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c92:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c96:	d031      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003c98:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c9c:	d82a      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca2:	d02d      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003ca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca8:	d824      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003caa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cae:	d029      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003cb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cb4:	d81e      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cba:	d011      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc0:	d818      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d020      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cca:	d113      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ccc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fcb0 	bl	8008638 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8003cde:	e014      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ce0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ce4:	3330      	adds	r3, #48	@ 0x30
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fd3e 	bl	8008768 <RCCEx_PLL3_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003cfa:	e006      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003d00:	bf00      	nop
 8003d02:	e002      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003d12:	4b89      	ldr	r3, [pc, #548]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d22:	4a85      	ldr	r2, [pc, #532]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003d30:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d34:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 0320 	and.w	r3, r2, #32
 8003d40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d4a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d053      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003d54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003d5e:	d031      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003d60:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003d64:	d82a      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d6a:	d02d      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d70:	d824      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d72:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003d76:	d029      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003d78:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003d7c:	d81e      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d82:	d011      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d818      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d020      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d92:	d113      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d94:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d98:	3308      	adds	r3, #8
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 fc4c 	bl	8008638 <RCCEx_PLL2_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8003da6:	e014      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003da8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003dac:	3330      	adds	r3, #48	@ 0x30
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fcda 	bl	8008768 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003dc2:	e006      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003dc4:	bf00      	nop
 8003dc6:	e004      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003dda:	4b57      	ldr	r3, [pc, #348]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003de0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003de4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a53      	ldr	r2, [pc, #332]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003df8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dfc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e08:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003e12:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d053      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003e1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e22:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003e26:	d031      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003e28:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003e2c:	d82a      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e32:	d02d      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e38:	d824      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003e3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e3e:	d029      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e44:	d81e      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003e46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e4a:	d011      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003e4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e50:	d818      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d020      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e5a:	d113      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e60:	3308      	adds	r3, #8
 8003e62:	4618      	mov	r0, r3
 8003e64:	f004 fbe8 	bl	8008638 <RCCEx_PLL2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8003e6e:	e014      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e70:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e74:	3330      	adds	r3, #48	@ 0x30
 8003e76:	4618      	mov	r0, r3
 8003e78:	f004 fc76 	bl	8008768 <RCCEx_PLL3_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8003e82:	e00a      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003e8a:	e006      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e8c:	bf00      	nop
 8003e8e:	e004      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e90:	bf00      	nop
 8003e92:	e002      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003ea2:	4b25      	ldr	r3, [pc, #148]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ea8:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003eac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	4a21      	ldr	r2, [pc, #132]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003eba:	e003      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003ec0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ec4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ed0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003eda:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	d055      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003ee4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003eee:	d033      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003ef0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003ef4:	d82c      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003ef6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003efa:	d02f      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003efc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f00:	d826      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003f02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f06:	d02b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003f08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f0c:	d820      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f12:	d013      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f18:	d81a      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d022      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003f1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f22:	d115      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f24:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f28:	3308      	adds	r3, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f004 fb84 	bl	8008638 <RCCEx_PLL2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 8003f36:	e016      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003f38:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f40:	3330      	adds	r3, #48	@ 0x30
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 fc10 	bl	8008768 <RCCEx_PLL3_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003f56:	e006      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e002      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003f6e:	4bbb      	ldr	r3, [pc, #748]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f74:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003f78:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f7e:	4ab7      	ldr	r2, [pc, #732]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003f8c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003f90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003f9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003fa6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d053      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003fb0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fb6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003fba:	d031      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003fbc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003fc0:	d82a      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003fc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fc6:	d02d      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003fc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fcc:	d824      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003fce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fd2:	d029      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003fd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fd8:	d81e      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fde:	d011      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fe4:	d818      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d020      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fee:	d113      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ff0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 fb1e 	bl	8008638 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8004002:	e014      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004004:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004008:	3330      	adds	r3, #48	@ 0x30
 800400a:	4618      	mov	r0, r3
 800400c:	f004 fbac 	bl	8008768 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8004016:	e00a      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800401e:	e006      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004020:	bf00      	nop
 8004022:	e004      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004024:	bf00      	nop
 8004026:	e002      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800402c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004036:	4b89      	ldr	r3, [pc, #548]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800403c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004040:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004044:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004046:	4a85      	ldr	r2, [pc, #532]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004048:	430b      	orrs	r3, r1
 800404a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004054:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004058:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004064:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800406e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d055      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004078:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800407c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004080:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004084:	d031      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004086:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800408a:	d82a      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800408c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004090:	d02d      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004096:	d824      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004098:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800409c:	d029      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800409e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80040a2:	d81e      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80040a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a8:	d011      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80040aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040ae:	d818      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80040b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040b8:	d113      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80040be:	3308      	adds	r3, #8
 80040c0:	4618      	mov	r0, r3
 80040c2:	f004 fab9 	bl	8008638 <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 80040cc:	e014      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80040d2:	3330      	adds	r3, #48	@ 0x30
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 fb47 	bl	8008768 <RCCEx_PLL3_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 80040e0:	e00a      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80040e8:	e006      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80040ea:	bf00      	nop
 80040ec:	e004      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80040f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10d      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004100:	4b56      	ldr	r3, [pc, #344]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004106:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800410a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004112:	4a52      	ldr	r2, [pc, #328]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004114:	430b      	orrs	r3, r1
 8004116:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800411a:	e003      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004120:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004124:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800413a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d044      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004144:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800414c:	2b05      	cmp	r3, #5
 800414e:	d823      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004150:	a201      	add	r2, pc, #4	@ (adr r2, 8004158 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	080041a1 	.word	0x080041a1
 800415c:	08004171 	.word	0x08004171
 8004160:	08004185 	.word	0x08004185
 8004164:	080041a1 	.word	0x080041a1
 8004168:	080041a1 	.word	0x080041a1
 800416c:	080041a1 	.word	0x080041a1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004170:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004174:	3308      	adds	r3, #8
 8004176:	4618      	mov	r0, r3
 8004178:	f004 fa5e 	bl	8008638 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8004182:	e00e      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004184:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004188:	3330      	adds	r3, #48	@ 0x30
 800418a:	4618      	mov	r0, r3
 800418c:	f004 faec 	bl	8008768 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80041aa:	4b2c      	ldr	r3, [pc, #176]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80041ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80041b0:	f023 0107 	bic.w	r1, r3, #7
 80041b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80041b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041bc:	4a27      	ldr	r2, [pc, #156]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80041be:	430b      	orrs	r3, r1
 80041c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80041ca:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80041ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80041da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80041e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d04f      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80041ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	2b50      	cmp	r3, #80	@ 0x50
 80041f8:	d029      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80041fa:	2b50      	cmp	r3, #80	@ 0x50
 80041fc:	d823      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d027      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d81f      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004206:	2b30      	cmp	r3, #48	@ 0x30
 8004208:	d025      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800420a:	2b30      	cmp	r3, #48	@ 0x30
 800420c:	d81b      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800420e:	2b20      	cmp	r3, #32
 8004210:	d00f      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004212:	2b20      	cmp	r3, #32
 8004214:	d817      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d022      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800421a:	2b10      	cmp	r3, #16
 800421c:	d113      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800421e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004222:	3308      	adds	r3, #8
 8004224:	4618      	mov	r0, r3
 8004226:	f004 fa07 	bl	8008638 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8004230:	e017      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004232:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004236:	3330      	adds	r3, #48	@ 0x30
 8004238:	4618      	mov	r0, r3
 800423a:	f004 fa95 	bl	8008768 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8004244:	e00d      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800424c:	e009      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800424e:	bf00      	nop
 8004250:	e007      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004252:	bf00      	nop
 8004254:	e005      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004256:	bf00      	nop
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800425a:	bf00      	nop
 800425c:	44020c00 	.word	0x44020c00
        break;
 8004260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004262:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800426a:	4baf      	ldr	r3, [pc, #700]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800426c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004270:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004274:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427c:	4aaa      	ldr	r2, [pc, #680]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800427e:	430b      	orrs	r3, r1
 8004280:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800428a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800428e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800429a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80042a8:	460b      	mov	r3, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	d055      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80042ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80042ba:	d031      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80042bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80042c0:	d82a      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80042c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042c6:	d02d      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80042c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042cc:	d824      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80042ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042d2:	d029      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80042d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042d8:	d81e      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80042da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042de:	d011      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80042e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042e4:	d818      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d020      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80042ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042ee:	d113      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042f4:	3308      	adds	r3, #8
 80042f6:	4618      	mov	r0, r3
 80042f8:	f004 f99e 	bl	8008638 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004302:	e014      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004304:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004308:	3330      	adds	r3, #48	@ 0x30
 800430a:	4618      	mov	r0, r3
 800430c:	f004 fa2c 	bl	8008768 <RCCEx_PLL3_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004316:	e00a      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800431e:	e006      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004320:	bf00      	nop
 8004322:	e004      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800432c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10d      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004336:	4b7c      	ldr	r3, [pc, #496]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800433c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004340:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004348:	4a77      	ldr	r2, [pc, #476]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800434a:	430b      	orrs	r3, r1
 800434c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004350:	e003      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004356:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004366:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800436a:	2300      	movs	r3, #0
 800436c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004370:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d03d      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800437a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004382:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004386:	d01b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004388:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800438c:	d814      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800438e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004392:	d017      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004398:	d80e      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d014      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a2:	d109      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043a8:	3330      	adds	r3, #48	@ 0x30
 80043aa:	4618      	mov	r0, r3
 80043ac:	f004 f9dc 	bl	8008768 <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80043b6:	e008      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80043be:	e004      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80043c0:	bf00      	nop
 80043c2:	e002      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80043c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ca:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80043d2:	4b55      	ldr	r3, [pc, #340]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80043d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043d8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e4:	4a50      	ldr	r2, [pc, #320]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80043ec:	e003      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80043f2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800440c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d03d      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004416:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004422:	d01b      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004424:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004428:	d814      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800442a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800442e:	d017      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004430:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004434:	d80e      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d014      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800443a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800443e:	d109      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004440:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004444:	3330      	adds	r3, #48	@ 0x30
 8004446:	4618      	mov	r0, r3
 8004448:	f004 f98e 	bl	8008768 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004452:	e008      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800445c:	bf00      	nop
 800445e:	e002      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004466:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800446e:	4b2e      	ldr	r3, [pc, #184]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004474:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004478:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800447c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004480:	4a29      	ldr	r2, [pc, #164]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004482:	430b      	orrs	r3, r1
 8004484:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800448e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004492:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800449e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a2:	2300      	movs	r3, #0
 80044a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80044a8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d040      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80044b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80044b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044be:	d01b      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80044c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044c4:	d814      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80044c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044ca:	d017      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80044cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044d0:	d80e      	bhi.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d014      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80044d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044da:	d109      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80044e0:	3330      	adds	r3, #48	@ 0x30
 80044e2:	4618      	mov	r0, r3
 80044e4:	f004 f940 	bl	8008768 <RCCEx_PLL3_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004506:	2b00      	cmp	r3, #0
 8004508:	d110      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800450a:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800450c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004510:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004514:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004518:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800451c:	4a02      	ldr	r2, [pc, #8]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800451e:	430b      	orrs	r3, r1
 8004520:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004526:	bf00      	nop
 8004528:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004530:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004534:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	2100      	movs	r1, #0
 800453e:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8004542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004546:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800454a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d03d      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004554:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004558:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800455c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004560:	d01b      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004562:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004566:	d814      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004568:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800456c:	d017      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800456e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004572:	d80e      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800457c:	d109      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800457e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004582:	3330      	adds	r3, #48	@ 0x30
 8004584:	4618      	mov	r0, r3
 8004586:	f004 f8ef 	bl	8008768 <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004598:	e004      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800459a:	bf00      	nop
 800459c:	e002      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800459e:	bf00      	nop
 80045a0:	e000      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80045a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80045ac:	4bbe      	ldr	r3, [pc, #760]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80045ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045b2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045be:	4aba      	ldr	r2, [pc, #744]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80045cc:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80045d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d035      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80045f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045fc:	d015      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80045fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004602:	d80e      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d012      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800460c:	d109      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800460e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004612:	3330      	adds	r3, #48	@ 0x30
 8004614:	4618      	mov	r0, r3
 8004616:	f004 f8a7 	bl	8008768 <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004620:	e006      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004628:	e002      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800462e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004630:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10d      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004638:	4b9b      	ldr	r3, [pc, #620]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800463a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800463e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004642:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800464a:	4a97      	ldr	r2, [pc, #604]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800464c:	430b      	orrs	r3, r1
 800464e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004652:	e003      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004658:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800465c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	2100      	movs	r1, #0
 8004666:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800466a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800466e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004672:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004676:	460b      	mov	r3, r1
 8004678:	4313      	orrs	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800467c:	4b8a      	ldr	r3, [pc, #552]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	4a89      	ldr	r2, [pc, #548]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004682:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004686:	61d3      	str	r3, [r2, #28]
 8004688:	4b87      	ldr	r3, [pc, #540]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004690:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004694:	4a84      	ldr	r2, [pc, #528]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004696:	430b      	orrs	r3, r1
 8004698:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800469a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d055      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80046ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046c2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80046c6:	d031      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80046c8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80046cc:	d82a      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d2:	d02d      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d8:	d824      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80046da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046de:	d029      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80046e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e4:	d81e      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80046e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ea:	d011      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f0:	d818      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fa:	d113      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004700:	3308      	adds	r3, #8
 8004702:	4618      	mov	r0, r3
 8004704:	f003 ff98 	bl	8008638 <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800470e:	e014      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004710:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004714:	3330      	adds	r3, #48	@ 0x30
 8004716:	4618      	mov	r0, r3
 8004718:	f004 f826 	bl	8008768 <RCCEx_PLL3_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004722:	e00a      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800472a:	e006      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800472c:	bf00      	nop
 800472e:	e004      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004730:	bf00      	nop
 8004732:	e002      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004734:	bf00      	nop
 8004736:	e000      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004742:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004744:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004748:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800474c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004754:	4a54      	ldr	r2, [pc, #336]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004756:	430b      	orrs	r3, r1
 8004758:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800475c:	e003      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004762:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004766:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800477c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d055      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004786:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800478a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800478e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004792:	d031      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004794:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004798:	d82a      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800479a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800479e:	d02d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047a4:	d824      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80047a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047aa:	d029      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80047ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047b0:	d81e      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b6:	d011      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047bc:	d818      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d020      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c6:	d113      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047cc:	3308      	adds	r3, #8
 80047ce:	4618      	mov	r0, r3
 80047d0:	f003 ff32 	bl	8008638 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80047da:	e014      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047e0:	3330      	adds	r3, #48	@ 0x30
 80047e2:	4618      	mov	r0, r3
 80047e4:	f003 ffc0 	bl	8008768 <RCCEx_PLL3_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80047ee:	e00a      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80047f6:	e006      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80047f8:	bf00      	nop
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80047fc:	bf00      	nop
 80047fe:	e002      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004800:	bf00      	nop
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004806:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800480e:	4b26      	ldr	r3, [pc, #152]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004810:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004814:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004818:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800481c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004820:	4a21      	ldr	r2, [pc, #132]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004822:	430b      	orrs	r3, r1
 8004824:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004828:	e003      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800482e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004832:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	2100      	movs	r1, #0
 800483c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004848:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d057      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004852:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800485a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800485e:	d033      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004864:	d82c      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004866:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800486a:	d02f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800486c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004870:	d826      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004872:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004876:	d02b      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004878:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800487c:	d820      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800487e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004882:	d013      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004888:	d81a      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d022      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800488e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004892:	d115      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004894:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004898:	3308      	adds	r3, #8
 800489a:	4618      	mov	r0, r3
 800489c:	f003 fecc 	bl	8008638 <RCCEx_PLL2_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80048a6:	e016      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80048a8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80048b0:	3330      	adds	r3, #48	@ 0x30
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 ff58 	bl	8008768 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80048be:	e00a      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80048c6:	e006      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80048c8:	bf00      	nop
 80048ca:	e004      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80048d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10d      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80048de:	4bbb      	ldr	r3, [pc, #748]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80048e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80048e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80048ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048f0:	4ab6      	ldr	r2, [pc, #728]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80048f2:	430b      	orrs	r3, r1
 80048f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80048f8:	e003      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80048fe:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004902:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	2100      	movs	r1, #0
 800490c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004918:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800491c:	460b      	mov	r3, r1
 800491e:	4313      	orrs	r3, r2
 8004920:	d055      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004922:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800492a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800492e:	d031      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004930:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004934:	d82a      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800493a:	d02d      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800493c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004940:	d824      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004946:	d029      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800494c:	d81e      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800494e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004952:	d011      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004958:	d818      	bhi.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004962:	d113      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004964:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004968:	3308      	adds	r3, #8
 800496a:	4618      	mov	r0, r3
 800496c:	f003 fe64 	bl	8008638 <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004976:	e014      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004978:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800497c:	3330      	adds	r3, #48	@ 0x30
 800497e:	4618      	mov	r0, r3
 8004980:	f003 fef2 	bl	8008768 <RCCEx_PLL3_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800498a:	e00a      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004992:	e006      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004994:	bf00      	nop
 8004996:	e004      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004998:	bf00      	nop
 800499a:	e002      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80049a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10d      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80049aa:	4b88      	ldr	r3, [pc, #544]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80049ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80049b0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80049b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80049b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049bc:	4a83      	ldr	r2, [pc, #524]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80049be:	430b      	orrs	r3, r1
 80049c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80049c4:	e003      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80049ca:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80049ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	2100      	movs	r1, #0
 80049d8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80049dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049e4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049e8:	460b      	mov	r3, r1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	d055      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80049ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80049f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049fa:	d031      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80049fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a00:	d82a      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004a02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a06:	d02d      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a0c:	d824      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004a0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a12:	d029      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004a14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a18:	d81e      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004a1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a1e:	d011      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004a20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a24:	d818      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004a2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a2e:	d113      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a30:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a34:	3308      	adds	r3, #8
 8004a36:	4618      	mov	r0, r3
 8004a38:	f003 fdfe 	bl	8008638 <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004a42:	e014      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a48:	3330      	adds	r3, #48	@ 0x30
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 fe8c 	bl	8008768 <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004a56:	e00a      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004a5e:	e006      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004a60:	bf00      	nop
 8004a62:	e004      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004a64:	bf00      	nop
 8004a66:	e002      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004a76:	4b55      	ldr	r3, [pc, #340]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004a78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004a80:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a88:	4a50      	ldr	r2, [pc, #320]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004a96:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004a9a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ab0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	d055      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004aba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004abe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ac6:	d031      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004acc:	d82a      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad2:	d02d      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad8:	d824      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004ada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ade:	d029      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004ae0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ae4:	d81e      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aea:	d011      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af0:	d818      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004af6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004afa:	d113      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004afc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b00:	3308      	adds	r3, #8
 8004b02:	4618      	mov	r0, r3
 8004b04:	f003 fd98 	bl	8008638 <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004b0e:	e014      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b10:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b14:	3330      	adds	r3, #48	@ 0x30
 8004b16:	4618      	mov	r0, r3
 8004b18:	f003 fe26 	bl	8008768 <RCCEx_PLL3_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004b22:	e00a      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004b2a:	e006      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004b2c:	bf00      	nop
 8004b2e:	e004      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004b30:	bf00      	nop
 8004b32:	e002      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004b34:	bf00      	nop
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004b42:	4b22      	ldr	r3, [pc, #136]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004b44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b48:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b4c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004b56:	430b      	orrs	r3, r1
 8004b58:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004b62:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b66:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004b72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b76:	2300      	movs	r3, #0
 8004b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b80:	460b      	mov	r3, r1
 8004b82:	4313      	orrs	r3, r2
 8004b84:	d055      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004b86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b92:	d035      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004b94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b98:	d82e      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004b9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b9e:	d031      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004ba0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ba4:	d828      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004baa:	d01b      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bb0:	d822      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bba:	d009      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004bbc:	e01c      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bbe:	4b03      	ldr	r3, [pc, #12]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	4a02      	ldr	r2, [pc, #8]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004bca:	e01c      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004bcc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f003 fd2e 	bl	8008638 <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004be2:	e010      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004be4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004be8:	3330      	adds	r3, #48	@ 0x30
 8004bea:	4618      	mov	r0, r3
 8004bec:	f003 fdbc 	bl	8008768 <RCCEx_PLL3_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004bf6:	e006      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004bfe:	e002      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c06:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10d      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004c0e:	4bc2      	ldr	r3, [pc, #776]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c18:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c20:	4abd      	ldr	r2, [pc, #756]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c28:	e003      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004c2e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004c32:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004c3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c40:	2300      	movs	r3, #0
 8004c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	d051      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004c4e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004c56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c5a:	d033      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8004c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c60:	d82c      	bhi.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004c62:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c66:	d02d      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8004c68:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c6c:	d826      	bhi.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c72:	d019      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8004c74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c78:	d820      	bhi.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 8004c7e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c82:	d007      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8004c84:	e01a      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c86:	4ba4      	ldr	r3, [pc, #656]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	4aa3      	ldr	r2, [pc, #652]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c90:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c92:	e018      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c94:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c98:	3308      	adds	r3, #8
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f003 fccc 	bl	8008638 <RCCEx_PLL2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ca6:	e00e      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ca8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004cac:	3330      	adds	r3, #48	@ 0x30
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 fd5a 	bl	8008768 <RCCEx_PLL3_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 8004cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10d      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004cce:	4b92      	ldr	r3, [pc, #584]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cd4:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004cd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004cdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004ce0:	4a8d      	ldr	r2, [pc, #564]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cea:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004cee:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004cf2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004cfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d00:	2300      	movs	r3, #0
 8004d02:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	d032      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004d0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d12:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d80f      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1462>
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d211      	bcs.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x146a>
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d911      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d109      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d26:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 fc83 	bl	8008638 <RCCEx_PLL2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004d50:	4b71      	ldr	r3, [pc, #452]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d56:	f023 0107 	bic.w	r1, r3, #7
 8004d5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d5e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004d62:	4a6d      	ldr	r2, [pc, #436]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004d64:	430b      	orrs	r3, r1
 8004d66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d6a:	e003      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004d70:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004d74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8004d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d024      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004d90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d005      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004da6:	e002      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8004dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dae:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004db6:	4b58      	ldr	r3, [pc, #352]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dbc:	f023 0108 	bic.w	r1, r3, #8
 8004dc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004dc8:	4a53      	ldr	r2, [pc, #332]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004dd6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dda:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de8:	2300      	movs	r3, #0
 8004dea:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004df0:	460b      	mov	r3, r1
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f000 80b9 	beq.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004df8:	4b48      	ldr	r3, [pc, #288]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	4a47      	ldr	r2, [pc, #284]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e04:	f7fd f84e 	bl	8001ea4 <HAL_GetTick>
 8004e08:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004e0c:	e00b      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0e:	f7fd f849 	bl	8001ea4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d903      	bls.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004e24:	e005      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004e26:	4b3d      	ldr	r3, [pc, #244]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ed      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 8004e32:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 8093 	bne.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e3c:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004e4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d023      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 8004e52:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e56:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8004e5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01b      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e62:	4b2d      	ldr	r3, [pc, #180]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e6c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e70:	4b29      	ldr	r3, [pc, #164]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e76:	4a28      	ldr	r2, [pc, #160]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e80:	4b25      	ldr	r3, [pc, #148]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e86:	4a24      	ldr	r2, [pc, #144]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e90:	4a21      	ldr	r2, [pc, #132]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004e92:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004e96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d019      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fc fffd 	bl	8001ea4 <HAL_GetTick>
 8004eaa:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eae:	e00d      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fc fff8 	bl	8001ea4 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d903      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
            break;
 8004eca:	e006      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ecc:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ea      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 8004eda:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d13a      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004ee2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef2:	d115      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1648>
 8004ef4:	4b08      	ldr	r3, [pc, #32]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004efc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004f0e:	4a02      	ldr	r2, [pc, #8]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004f10:	430b      	orrs	r3, r1
 8004f12:	61d3      	str	r3, [r2, #28]
 8004f14:	e00a      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1654>
 8004f16:	bf00      	nop
 8004f18:	44020c00 	.word	0x44020c00
 8004f1c:	44020800 	.word	0x44020800
 8004f20:	4bc6      	ldr	r3, [pc, #792]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4ac5      	ldr	r2, [pc, #788]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004f26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f2a:	61d3      	str	r3, [r2, #28]
 8004f2c:	4bc3      	ldr	r3, [pc, #780]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f32:	4ac2      	ldr	r2, [pc, #776]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f3c:	4bbf      	ldr	r3, [pc, #764]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004f3e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004f42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4e:	4abb      	ldr	r2, [pc, #748]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004f50:	430b      	orrs	r3, r1
 8004f52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f56:	e008      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f58:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004f5c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
 8004f60:	e003      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004f66:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f78:	2300      	movs	r3, #0
 8004f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f80:	460b      	mov	r3, r1
 8004f82:	4313      	orrs	r3, r2
 8004f84:	d035      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004f86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004f8e:	2b30      	cmp	r3, #48	@ 0x30
 8004f90:	d014      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 8004f92:	2b30      	cmp	r3, #48	@ 0x30
 8004f94:	d80e      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d012      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d80a      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa6:	4ba5      	ldr	r3, [pc, #660]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	4aa4      	ldr	r2, [pc, #656]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004fba:	e004      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8004fbc:	bf00      	nop
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8004fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004fce:	4b9b      	ldr	r3, [pc, #620]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004fd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004fdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004fe0:	4a96      	ldr	r2, [pc, #600]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004fe8:	e003      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fea:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004fee:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ff2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005000:	2300      	movs	r3, #0
 8005002:	657b      	str	r3, [r7, #84]	@ 0x54
 8005004:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005008:	460b      	mov	r3, r1
 800500a:	4313      	orrs	r3, r2
 800500c:	d033      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800500e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005012:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1748>
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	d007      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1756>
 800501e:	e010      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005020:	4b86      	ldr	r3, [pc, #536]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	4a85      	ldr	r2, [pc, #532]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800502c:	e00d      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800502e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005032:	3308      	adds	r3, #8
 8005034:	4618      	mov	r0, r3
 8005036:	f003 faff 	bl	8008638 <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005040:	e003      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005052:	4b7a      	ldr	r3, [pc, #488]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005058:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800505c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005060:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005064:	4a75      	ldr	r2, [pc, #468]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005066:	430b      	orrs	r3, r1
 8005068:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005072:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005076:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005084:	2300      	movs	r3, #0
 8005086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005088:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800508c:	460b      	mov	r3, r1
 800508e:	4313      	orrs	r3, r2
 8005090:	d048      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005092:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005096:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800509a:	2b04      	cmp	r3, #4
 800509c:	d827      	bhi.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1816>
 800509e:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050b9 	.word	0x080050b9
 80050a8:	080050c7 	.word	0x080050c7
 80050ac:	080050db 	.word	0x080050db
 80050b0:	080050f7 	.word	0x080050f7
 80050b4:	080050f7 	.word	0x080050f7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b8:	4b60      	ldr	r3, [pc, #384]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	4a5f      	ldr	r2, [pc, #380]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80050be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80050c4:	e018      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050ca:	3308      	adds	r3, #8
 80050cc:	4618      	mov	r0, r3
 80050ce:	f003 fab3 	bl	8008638 <RCCEx_PLL2_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80050d8:	e00e      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050da:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050de:	3330      	adds	r3, #48	@ 0x30
 80050e0:	4618      	mov	r0, r3
 80050e2:	f003 fb41 	bl	8008768 <RCCEx_PLL3_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80050ec:	e004      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 80050f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005100:	4b4e      	ldr	r3, [pc, #312]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005106:	f023 0107 	bic.w	r1, r3, #7
 800510a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800510e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005112:	4a4a      	ldr	r2, [pc, #296]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005114:	430b      	orrs	r3, r1
 8005116:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005120:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005124:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005130:	643b      	str	r3, [r7, #64]	@ 0x40
 8005132:	2300      	movs	r3, #0
 8005134:	647b      	str	r3, [r7, #68]	@ 0x44
 8005136:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	f000 8083 	beq.w	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005142:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800514a:	2b20      	cmp	r3, #32
 800514c:	d85f      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1936>
 800514e:	a201      	add	r2, pc, #4	@ (adr r2, 8005154 <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	080051d9 	.word	0x080051d9
 8005158:	0800520f 	.word	0x0800520f
 800515c:	0800520f 	.word	0x0800520f
 8005160:	0800520f 	.word	0x0800520f
 8005164:	0800520f 	.word	0x0800520f
 8005168:	0800520f 	.word	0x0800520f
 800516c:	0800520f 	.word	0x0800520f
 8005170:	0800520f 	.word	0x0800520f
 8005174:	080051e7 	.word	0x080051e7
 8005178:	0800520f 	.word	0x0800520f
 800517c:	0800520f 	.word	0x0800520f
 8005180:	0800520f 	.word	0x0800520f
 8005184:	0800520f 	.word	0x0800520f
 8005188:	0800520f 	.word	0x0800520f
 800518c:	0800520f 	.word	0x0800520f
 8005190:	0800520f 	.word	0x0800520f
 8005194:	080051fb 	.word	0x080051fb
 8005198:	0800520f 	.word	0x0800520f
 800519c:	0800520f 	.word	0x0800520f
 80051a0:	0800520f 	.word	0x0800520f
 80051a4:	0800520f 	.word	0x0800520f
 80051a8:	0800520f 	.word	0x0800520f
 80051ac:	0800520f 	.word	0x0800520f
 80051b0:	0800520f 	.word	0x0800520f
 80051b4:	08005217 	.word	0x08005217
 80051b8:	0800520f 	.word	0x0800520f
 80051bc:	0800520f 	.word	0x0800520f
 80051c0:	0800520f 	.word	0x0800520f
 80051c4:	0800520f 	.word	0x0800520f
 80051c8:	0800520f 	.word	0x0800520f
 80051cc:	0800520f 	.word	0x0800520f
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	08005217 	.word	0x08005217
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d8:	4b18      	ldr	r3, [pc, #96]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	4a17      	ldr	r2, [pc, #92]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80051de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80051e4:	e018      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80051ea:	3308      	adds	r3, #8
 80051ec:	4618      	mov	r0, r3
 80051ee:	f003 fa23 	bl	8008638 <RCCEx_PLL2_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80051f8:	e00e      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80051fe:	3330      	adds	r3, #48	@ 0x30
 8005200:	4618      	mov	r0, r3
 8005202:	f003 fab1 	bl	8008768 <RCCEx_PLL3_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 8005216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005218:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10f      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005220:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005226:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800522a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800522e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005232:	4a02      	ldr	r2, [pc, #8]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8005234:	430b      	orrs	r3, r1
 8005236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800523a:	e005      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1970>
 800523c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005244:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005248:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005254:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800525a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800525e:	460b      	mov	r3, r1
 8005260:	4313      	orrs	r3, r2
 8005262:	d04e      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005264:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800526c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005270:	d02e      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 8005272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005276:	d827      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8005278:	2bc0      	cmp	r3, #192	@ 0xc0
 800527a:	d02b      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 800527c:	2bc0      	cmp	r3, #192	@ 0xc0
 800527e:	d823      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8005280:	2b80      	cmp	r3, #128	@ 0x80
 8005282:	d017      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 8005284:	2b80      	cmp	r3, #128	@ 0x80
 8005286:	d81f      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 800528c:	2b40      	cmp	r3, #64	@ 0x40
 800528e:	d007      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 8005290:	e01a      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005292:	4bb0      	ldr	r3, [pc, #704]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005296:	4aaf      	ldr	r2, [pc, #700]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800529c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800529e:	e01a      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80052a4:	3308      	adds	r3, #8
 80052a6:	4618      	mov	r0, r3
 80052a8:	f003 f9c6 	bl	8008638 <RCCEx_PLL2_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80052b2:	e010      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80052b8:	3330      	adds	r3, #48	@ 0x30
 80052ba:	4618      	mov	r0, r3
 80052bc:	f003 fa54 	bl	8008768 <RCCEx_PLL3_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80052c6:	e006      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80052ce:	e002      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 80052d0:	bf00      	nop
 80052d2:	e000      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 80052d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80052de:	4b9d      	ldr	r3, [pc, #628]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80052e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80052e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80052ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052f0:	4a98      	ldr	r2, [pc, #608]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052f8:	e003      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80052fe:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005302:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800530e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005310:	2300      	movs	r3, #0
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
 8005314:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005318:	460b      	mov	r3, r1
 800531a:	4313      	orrs	r3, r2
 800531c:	d055      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800531e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005326:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800532a:	d031      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 800532c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005330:	d82a      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8005332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005336:	d02d      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533c:	d824      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 800533e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005342:	d029      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 8005344:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005348:	d81e      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534e:	d011      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005354:	d818      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d020      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 800535a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800535e:	d113      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005360:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005364:	3308      	adds	r3, #8
 8005366:	4618      	mov	r0, r3
 8005368:	f003 f966 	bl	8008638 <RCCEx_PLL2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005372:	e014      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005374:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005378:	3330      	adds	r3, #48	@ 0x30
 800537a:	4618      	mov	r0, r3
 800537c:	f003 f9f4 	bl	8008768 <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005386:	e00a      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800538e:	e006      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8005390:	bf00      	nop
 8005392:	e004      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8005394:	bf00      	nop
 8005396:	e002      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8005398:	bf00      	nop
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80053a6:	4b6b      	ldr	r3, [pc, #428]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80053a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80053b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053b8:	4a66      	ldr	r2, [pc, #408]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053c0:	e003      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80053c6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80053ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d8:	2300      	movs	r3, #0
 80053da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053e0:	460b      	mov	r3, r1
 80053e2:	4313      	orrs	r3, r2
 80053e4:	d055      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80053e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80053ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80053f2:	d031      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 80053f4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80053f8:	d82a      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 80053fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053fe:	d02d      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 8005400:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005404:	d824      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8005406:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800540a:	d029      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 800540c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005410:	d81e      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005416:	d011      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 8005418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800541c:	d818      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005426:	d113      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005428:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800542c:	3308      	adds	r3, #8
 800542e:	4618      	mov	r0, r3
 8005430:	f003 f902 	bl	8008638 <RCCEx_PLL2_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800543a:	e014      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800543c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005440:	3330      	adds	r3, #48	@ 0x30
 8005442:	4618      	mov	r0, r3
 8005444:	f003 f990 	bl	8008768 <RCCEx_PLL3_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800544e:	e00a      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005456:	e006      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8005458:	bf00      	nop
 800545a:	e004      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 800545c:	bf00      	nop
 800545e:	e002      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8005464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005466:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10d      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800546e:	4b39      	ldr	r3, [pc, #228]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005474:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005478:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800547c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005480:	4934      	ldr	r1, [pc, #208]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005488:	e003      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800548e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005492:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	2100      	movs	r1, #0
 800549c:	6239      	str	r1, [r7, #32]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054a8:	460b      	mov	r3, r1
 80054aa:	4313      	orrs	r3, r2
 80054ac:	d058      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80054ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80054b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80054ba:	d031      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80054bc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80054c0:	d82a      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 80054c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054c6:	d02d      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 80054c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054cc:	d824      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 80054ce:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80054d2:	d029      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 80054d4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80054d8:	d81e      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054de:	d011      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e4:	d818      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ee:	d113      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80054f4:	3308      	adds	r3, #8
 80054f6:	4618      	mov	r0, r3
 80054f8:	f003 f89e 	bl	8008638 <RCCEx_PLL2_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005502:	e014      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005504:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005508:	3330      	adds	r3, #48	@ 0x30
 800550a:	4618      	mov	r0, r3
 800550c:	f003 f92c 	bl	8008768 <RCCEx_PLL3_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005516:	e00a      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800551e:	e006      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8005520:	bf00      	nop
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8005524:	bf00      	nop
 8005526:	e002      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005532:	2b00      	cmp	r3, #0
 8005534:	d110      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8005538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800553c:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8005540:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005548:	4902      	ldr	r1, [pc, #8]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 8005552:	bf00      	nop
 8005554:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800555c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005560:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	2100      	movs	r1, #0
 800556a:	61b9      	str	r1, [r7, #24]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005576:	460b      	mov	r3, r1
 8005578:	4313      	orrs	r3, r2
 800557a:	d03d      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800557c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005584:	2b03      	cmp	r3, #3
 8005586:	d81c      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 8005588:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055cb 	.word	0x080055cb
 8005594:	080055a1 	.word	0x080055a1
 8005598:	080055af 	.word	0x080055af
 800559c:	080055cb 	.word	0x080055cb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80055a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80055ac:	e00e      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055b2:	3308      	adds	r3, #8
 80055b4:	4618      	mov	r0, r3
 80055b6:	f003 f83f 	bl	8008638 <RCCEx_PLL2_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80055c0:	e004      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 80055ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055cc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10d      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80055d4:	4b62      	ldr	r3, [pc, #392]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80055d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055da:	f023 0203 	bic.w	r2, r3, #3
 80055de:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80055e6:	495e      	ldr	r1, [pc, #376]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80055ee:	e003      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80055f4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	2100      	movs	r1, #0
 8005602:	6139      	str	r1, [r7, #16]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800560e:	460b      	mov	r3, r1
 8005610:	4313      	orrs	r3, r2
 8005612:	d03a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005614:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005618:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800561c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005620:	d00e      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 8005622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005626:	d815      	bhi.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d017      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 800562c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005630:	d110      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005632:	4b4b      	ldr	r3, [pc, #300]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	4a4a      	ldr	r2, [pc, #296]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800563c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800563e:	e00e      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005640:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005644:	3308      	adds	r3, #8
 8005646:	4618      	mov	r0, r3
 8005648:	f002 fff6 	bl	8008638 <RCCEx_PLL2_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005652:	e004      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 800565c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005666:	4b3e      	ldr	r3, [pc, #248]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800566c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005670:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005674:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005678:	4939      	ldr	r1, [pc, #228]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005680:	e003      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005682:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005686:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800568a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	2100      	movs	r1, #0
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056a0:	460b      	mov	r3, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	d038      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80056a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80056ae:	2b30      	cmp	r3, #48	@ 0x30
 80056b0:	d01b      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 80056b2:	2b30      	cmp	r3, #48	@ 0x30
 80056b4:	d815      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d002      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d007      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 80056be:	e010      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c0:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	4a26      	ldr	r2, [pc, #152]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80056c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80056cc:	e00e      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056d2:	3330      	adds	r3, #48	@ 0x30
 80056d4:	4618      	mov	r0, r3
 80056d6:	f003 f847 	bl	8008768 <RCCEx_PLL3_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80056e0:	e004      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 80056ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ec:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10d      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80056f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80056f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056fa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005702:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005706:	4916      	ldr	r1, [pc, #88]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005714:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005718:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	2100      	movs	r1, #0
 8005722:	6039      	str	r1, [r7, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d00c      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005734:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800573a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800573e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005742:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005746:	4906      	ldr	r1, [pc, #24]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800574e:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
}
 8005752:	4618      	mov	r0, r3
 8005754:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8005758:	46bd      	mov	sp, r7
 800575a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800575e:	bf00      	nop
 8005760:	44020c00 	.word	0x44020c00

08005764 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005764:	b480      	push	{r7}
 8005766:	b08b      	sub	sp, #44	@ 0x2c
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800576c:	4bae      	ldr	r3, [pc, #696]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800576e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005774:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005776:	4bac      	ldr	r3, [pc, #688]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005780:	4ba9      	ldr	r3, [pc, #676]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800578a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800578c:	4ba6      	ldr	r3, [pc, #664]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005798:	4ba3      	ldr	r3, [pc, #652]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	08db      	lsrs	r3, r3, #3
 800579e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8126 	beq.w	8005a08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d053      	beq.n	800586a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d86f      	bhi.n	80058a8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d003      	beq.n	80057d6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d02b      	beq.n	800582c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80057d4:	e068      	b.n	80058a8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057d6:	4b94      	ldr	r3, [pc, #592]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	08db      	lsrs	r3, r3, #3
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	4a92      	ldr	r2, [pc, #584]	@ (8005a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80057e2:	fa22 f303 	lsr.w	r3, r2, r3
 80057e6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a04 	vldr	s12, [r7, #16]
 800580e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005a30 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800582a:	e068      	b.n	80058fe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	ee07 3a90 	vmov	s15, r3
 8005844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005848:	ed97 6a04 	vldr	s12, [r7, #16]
 800584c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005a30 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005864:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005868:	e049      	b.n	80058fe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	ee07 3a90 	vmov	s15, r3
 8005870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005874:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8005878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a04 	vldr	s12, [r7, #16]
 800588a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005a30 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80058a6:	e02a      	b.n	80058fe <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	08db      	lsrs	r3, r3, #3
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	4a5e      	ldr	r2, [pc, #376]	@ (8005a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	ee07 3a90 	vmov	s15, r3
 80058c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	ee07 3a90 	vmov	s15, r3
 80058d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80058e0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005a30 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80058e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80058fc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800590a:	d121      	bne.n	8005950 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800590c:	4b46      	ldr	r3, [pc, #280]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005918:	4b43      	ldr	r3, [pc, #268]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800591a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591c:	0a5b      	lsrs	r3, r3, #9
 800591e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005932:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e006      	b.n	8005956 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e002      	b.n	8005956 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005956:	4b34      	ldr	r3, [pc, #208]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005962:	d121      	bne.n	80059a8 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005964:	4b30      	ldr	r3, [pc, #192]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005970:	4b2d      	ldr	r3, [pc, #180]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005986:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800598a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800598e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005996:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e006      	b.n	80059ae <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	e002      	b.n	80059ae <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ba:	d121      	bne.n	8005a00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80059bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059c8:	4b17      	ldr	r3, [pc, #92]	@ (8005a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80059ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059cc:	0e1b      	lsrs	r3, r3, #24
 80059ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80059da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80059e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80059f6:	e010      	b.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	609a      	str	r2, [r3, #8]
}
 80059fe:	e00c      	b.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]
}
 8005a06:	e008      	b.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
}
 8005a1a:	bf00      	nop
 8005a1c:	372c      	adds	r7, #44	@ 0x2c
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	44020c00 	.word	0x44020c00
 8005a2c:	03d09000 	.word	0x03d09000
 8005a30:	46000000 	.word	0x46000000
 8005a34:	4a742400 	.word	0x4a742400
 8005a38:	4af42400 	.word	0x4af42400

08005a3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b08b      	sub	sp, #44	@ 0x2c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005a44:	4bae      	ldr	r3, [pc, #696]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005a4e:	4bac      	ldr	r3, [pc, #688]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005a58:	4ba9      	ldr	r3, [pc, #676]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a62:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005a64:	4ba6      	ldr	r3, [pc, #664]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005a70:	4ba3      	ldr	r3, [pc, #652]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	fb02 f303 	mul.w	r3, r2, r3
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a88:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8126 	beq.w	8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d053      	beq.n	8005b42 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d86f      	bhi.n	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d02b      	beq.n	8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005aac:	e068      	b.n	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005aae:	4b94      	ldr	r3, [pc, #592]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	08db      	lsrs	r3, r3, #3
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	4a92      	ldr	r2, [pc, #584]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005aba:	fa22 f303 	lsr.w	r3, r2, r3
 8005abe:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae2:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ae6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005b02:	e068      	b.n	8005bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b20:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b24:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005b40:	e049      	b.n	8005bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b62:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005b7e:	e02a      	b.n	8005bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b80:	4b5f      	ldr	r3, [pc, #380]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	08db      	lsrs	r3, r3, #3
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	ee07 3a90 	vmov	s15, r3
 8005b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb4:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bb8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005bd4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005be2:	d121      	bne.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005be4:	4b46      	ldr	r3, [pc, #280]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d017      	beq.n	8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005bf0:	4b43      	ldr	r3, [pc, #268]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	0a5b      	lsrs	r3, r3, #9
 8005bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c06:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005c0a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c16:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e006      	b.n	8005c2e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c2e:	4b34      	ldr	r3, [pc, #208]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3a:	d121      	bne.n	8005c80 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005c3c:	4b30      	ldr	r3, [pc, #192]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c48:	4b2d      	ldr	r3, [pc, #180]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005c62:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c6e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	e006      	b.n	8005c86 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e002      	b.n	8005c86 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c86:	4b1e      	ldr	r3, [pc, #120]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c92:	d121      	bne.n	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005c94:	4b1a      	ldr	r3, [pc, #104]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d017      	beq.n	8005cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ca0:	4b17      	ldr	r3, [pc, #92]	@ (8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca4:	0e1b      	lsrs	r3, r3, #24
 8005ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005cba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cce:	e010      	b.n	8005cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	609a      	str	r2, [r3, #8]
}
 8005cd6:	e00c      	b.n	8005cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
}
 8005cde:	e008      	b.n	8005cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
}
 8005cf2:	bf00      	nop
 8005cf4:	372c      	adds	r7, #44	@ 0x2c
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	44020c00 	.word	0x44020c00
 8005d04:	03d09000 	.word	0x03d09000
 8005d08:	46000000 	.word	0x46000000
 8005d0c:	4a742400 	.word	0x4a742400
 8005d10:	4af42400 	.word	0x4af42400

08005d14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b08b      	sub	sp, #44	@ 0x2c
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005d1c:	4bae      	ldr	r3, [pc, #696]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005d26:	4bac      	ldr	r3, [pc, #688]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005d30:	4ba9      	ldr	r3, [pc, #676]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d3a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005d3c:	4ba6      	ldr	r3, [pc, #664]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d48:	4ba3      	ldr	r3, [pc, #652]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d4c:	08db      	lsrs	r3, r3, #3
 8005d4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d60:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8126 	beq.w	8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d053      	beq.n	8005e1a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d86f      	bhi.n	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d003      	beq.n	8005d86 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d02b      	beq.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005d84:	e068      	b.n	8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d86:	4b94      	ldr	r3, [pc, #592]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	08db      	lsrs	r3, r3, #3
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	4a92      	ldr	r2, [pc, #584]	@ (8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005d92:	fa22 f303 	lsr.w	r3, r2, r3
 8005d96:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	ed97 6a04 	vldr	s12, [r7, #16]
 8005dbe:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005dda:	e068      	b.n	8005eae <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005dfc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005e18:	e049      	b.n	8005eae <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e24:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8005e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e36:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e3a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005e56:	e02a      	b.n	8005eae <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e58:	4b5f      	ldr	r3, [pc, #380]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	08db      	lsrs	r3, r3, #3
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	4a5e      	ldr	r2, [pc, #376]	@ (8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	ee07 3a90 	vmov	s15, r3
 8005e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e90:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005eac:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005eae:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eba:	d121      	bne.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005ebc:	4b46      	ldr	r3, [pc, #280]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d017      	beq.n	8005ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ec8:	4b43      	ldr	r3, [pc, #268]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ecc:	0a5b      	lsrs	r3, r3, #9
 8005ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ede:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005ee2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eee:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e006      	b.n	8005f06 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f06:	4b34      	ldr	r3, [pc, #208]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f12:	d121      	bne.n	8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f14:	4b30      	ldr	r3, [pc, #192]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d017      	beq.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f20:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f36:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005f3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f46:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	e006      	b.n	8005f5e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	e002      	b.n	8005f5e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f6a:	d121      	bne.n	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d017      	beq.n	8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f78:	4b17      	ldr	r3, [pc, #92]	@ (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7c:	0e1b      	lsrs	r3, r3, #24
 8005f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005f92:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005fa6:	e010      	b.n	8005fca <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	609a      	str	r2, [r3, #8]
}
 8005fae:	e00c      	b.n	8005fca <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	609a      	str	r2, [r3, #8]
}
 8005fb6:	e008      	b.n	8005fca <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]
}
 8005fca:	bf00      	nop
 8005fcc:	372c      	adds	r7, #44	@ 0x2c
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	44020c00 	.word	0x44020c00
 8005fdc:	03d09000 	.word	0x03d09000
 8005fe0:	46000000 	.word	0x46000000
 8005fe4:	4a742400 	.word	0x4a742400
 8005fe8:	4af42400 	.word	0x4af42400

08005fec <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b08f      	sub	sp, #60	@ 0x3c
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ffa:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005ffe:	4321      	orrs	r1, r4
 8006000:	d150      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006002:	4b26      	ldr	r3, [pc, #152]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800600c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800600e:	4b23      	ldr	r3, [pc, #140]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b02      	cmp	r3, #2
 800601a:	d108      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006022:	d104      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006028:	637b      	str	r3, [r7, #52]	@ 0x34
 800602a:	f002 baf6 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800602e:	4b1b      	ldr	r3, [pc, #108]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006038:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800603c:	d108      	bne.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006044:	d104      	bne.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006046:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800604a:	637b      	str	r3, [r7, #52]	@ 0x34
 800604c:	f002 bae5 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006050:	4b12      	ldr	r3, [pc, #72]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800605c:	d119      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006064:	d115      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006066:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800606e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006072:	d30a      	bcc.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006074:	4b09      	ldr	r3, [pc, #36]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	0a1b      	lsrs	r3, r3, #8
 800607a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800607e:	4a08      	ldr	r2, [pc, #32]	@ (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006086:	f002 bac8 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800608e:	f002 bac4 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
 8006096:	f002 bac0 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800609a:	bf00      	nop
 800609c:	44020c00 	.word	0x44020c00
 80060a0:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80060a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80060ac:	ea50 0104 	orrs.w	r1, r0, r4
 80060b0:	f001 8242 	beq.w	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 80060b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060b8:	2801      	cmp	r0, #1
 80060ba:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80060be:	f082 82a9 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80060c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060c6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80060ca:	ea50 0104 	orrs.w	r1, r0, r4
 80060ce:	f001 8139 	beq.w	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 80060d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060d6:	2801      	cmp	r0, #1
 80060d8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80060dc:	f082 829a 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80060e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060e4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80060e8:	ea50 0104 	orrs.w	r1, r0, r4
 80060ec:	f001 85ce 	beq.w	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 80060f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060f4:	2801      	cmp	r0, #1
 80060f6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80060fa:	f082 828b 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80060fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006102:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8006106:	ea50 0104 	orrs.w	r1, r0, r4
 800610a:	f001 8518 	beq.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 800610e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006112:	2801      	cmp	r0, #1
 8006114:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8006118:	f082 827c 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800611c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006120:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8006124:	ea50 0104 	orrs.w	r1, r0, r4
 8006128:	f001 846a 	beq.w	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 800612c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006130:	2801      	cmp	r0, #1
 8006132:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8006136:	f082 826d 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800613a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800613e:	f1a1 0420 	sub.w	r4, r1, #32
 8006142:	ea50 0104 	orrs.w	r1, r0, r4
 8006146:	f001 83b4 	beq.w	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 800614a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614e:	2801      	cmp	r0, #1
 8006150:	f171 0120 	sbcs.w	r1, r1, #32
 8006154:	f082 825e 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800615c:	f1a1 0410 	sub.w	r4, r1, #16
 8006160:	ea50 0104 	orrs.w	r1, r0, r4
 8006164:	f002 8222 	beq.w	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 8006168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800616c:	2801      	cmp	r0, #1
 800616e:	f171 0110 	sbcs.w	r1, r1, #16
 8006172:	f082 824f 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800617a:	f1a1 0408 	sub.w	r4, r1, #8
 800617e:	ea50 0104 	orrs.w	r1, r0, r4
 8006182:	f002 8198 	beq.w	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 8006186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800618a:	2801      	cmp	r0, #1
 800618c:	f171 0108 	sbcs.w	r1, r1, #8
 8006190:	f082 8240 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006198:	1f0c      	subs	r4, r1, #4
 800619a:	ea50 0104 	orrs.w	r1, r0, r4
 800619e:	f001 8614 	beq.w	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 80061a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a6:	2801      	cmp	r0, #1
 80061a8:	f171 0104 	sbcs.w	r1, r1, #4
 80061ac:	f082 8232 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80061b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061b4:	1e8c      	subs	r4, r1, #2
 80061b6:	ea50 0104 	orrs.w	r1, r0, r4
 80061ba:	f002 810f 	beq.w	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80061be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061c2:	2801      	cmp	r0, #1
 80061c4:	f171 0102 	sbcs.w	r1, r1, #2
 80061c8:	f082 8224 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80061cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061d0:	1e4c      	subs	r4, r1, #1
 80061d2:	ea50 0104 	orrs.w	r1, r0, r4
 80061d6:	f002 809a 	beq.w	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80061da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061de:	2801      	cmp	r0, #1
 80061e0:	f171 0101 	sbcs.w	r1, r1, #1
 80061e4:	f082 8216 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80061e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061ec:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80061f0:	4321      	orrs	r1, r4
 80061f2:	f002 8025 	beq.w	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80061f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061fa:	4cd6      	ldr	r4, [pc, #856]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	f171 0100 	sbcs.w	r1, r1, #0
 8006202:	f082 8207 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800620a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800620e:	4321      	orrs	r1, r4
 8006210:	f001 87a5 	beq.w	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 8006214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006218:	4ccf      	ldr	r4, [pc, #828]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800621a:	42a0      	cmp	r0, r4
 800621c:	f171 0100 	sbcs.w	r1, r1, #0
 8006220:	f082 81f8 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006228:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800622c:	4321      	orrs	r1, r4
 800622e:	f001 871d 	beq.w	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 8006232:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006236:	4cc9      	ldr	r4, [pc, #804]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006238:	42a0      	cmp	r0, r4
 800623a:	f171 0100 	sbcs.w	r1, r1, #0
 800623e:	f082 81e9 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006242:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006246:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800624a:	4321      	orrs	r1, r4
 800624c:	f001 8666 	beq.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 8006250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006254:	4cc2      	ldr	r4, [pc, #776]	@ (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006256:	42a0      	cmp	r0, r4
 8006258:	f171 0100 	sbcs.w	r1, r1, #0
 800625c:	f082 81da 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006264:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006268:	4321      	orrs	r1, r4
 800626a:	f001 85de 	beq.w	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 800626e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006272:	4cbc      	ldr	r4, [pc, #752]	@ (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006274:	42a0      	cmp	r0, r4
 8006276:	f171 0100 	sbcs.w	r1, r1, #0
 800627a:	f082 81cb 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800627e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006282:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006286:	4321      	orrs	r1, r4
 8006288:	f002 814a 	beq.w	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 800628c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006290:	4cb5      	ldr	r4, [pc, #724]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006292:	42a0      	cmp	r0, r4
 8006294:	f171 0100 	sbcs.w	r1, r1, #0
 8006298:	f082 81bc 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800629c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062a0:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80062a4:	4321      	orrs	r1, r4
 80062a6:	f000 826b 	beq.w	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80062aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ae:	4caf      	ldr	r4, [pc, #700]	@ (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80062b0:	42a0      	cmp	r0, r4
 80062b2:	f171 0100 	sbcs.w	r1, r1, #0
 80062b6:	f082 81ad 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80062ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062be:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80062c2:	4321      	orrs	r1, r4
 80062c4:	f000 87e9 	beq.w	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 80062c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062cc:	4ca8      	ldr	r4, [pc, #672]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80062ce:	42a0      	cmp	r0, r4
 80062d0:	f171 0100 	sbcs.w	r1, r1, #0
 80062d4:	f082 819e 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80062d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062dc:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80062e0:	4321      	orrs	r1, r4
 80062e2:	f000 81ce 	beq.w	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80062e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ea:	4ca2      	ldr	r4, [pc, #648]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	f171 0100 	sbcs.w	r1, r1, #0
 80062f2:	f082 818f 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80062f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062fa:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80062fe:	4321      	orrs	r1, r4
 8006300:	f000 8140 	beq.w	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006308:	4c9b      	ldr	r4, [pc, #620]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800630a:	42a0      	cmp	r0, r4
 800630c:	f171 0100 	sbcs.w	r1, r1, #0
 8006310:	f082 8180 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006318:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800631c:	4321      	orrs	r1, r4
 800631e:	f001 8229 	beq.w	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 8006322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006326:	4c95      	ldr	r4, [pc, #596]	@ (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006328:	42a0      	cmp	r0, r4
 800632a:	f171 0100 	sbcs.w	r1, r1, #0
 800632e:	f082 8171 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006336:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800633a:	4321      	orrs	r1, r4
 800633c:	f001 8173 	beq.w	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 8006340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006344:	4c8e      	ldr	r4, [pc, #568]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006346:	42a0      	cmp	r0, r4
 8006348:	f171 0100 	sbcs.w	r1, r1, #0
 800634c:	f082 8162 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006354:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8006358:	4321      	orrs	r1, r4
 800635a:	f001 8130 	beq.w	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 800635e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006362:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8006366:	f171 0100 	sbcs.w	r1, r1, #0
 800636a:	f082 8153 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800636e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006372:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8006376:	4321      	orrs	r1, r4
 8006378:	f001 8093 	beq.w	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 800637c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006380:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006384:	42a0      	cmp	r0, r4
 8006386:	f171 0100 	sbcs.w	r1, r1, #0
 800638a:	f082 8143 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800638e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006392:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006396:	4321      	orrs	r1, r4
 8006398:	f001 8040 	beq.w	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 800639c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063a0:	f244 0401 	movw	r4, #16385	@ 0x4001
 80063a4:	42a0      	cmp	r0, r4
 80063a6:	f171 0100 	sbcs.w	r1, r1, #0
 80063aa:	f082 8133 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80063ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063b2:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80063b6:	4321      	orrs	r1, r4
 80063b8:	f000 87ed 	beq.w	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 80063bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063c0:	f242 0401 	movw	r4, #8193	@ 0x2001
 80063c4:	42a0      	cmp	r0, r4
 80063c6:	f171 0100 	sbcs.w	r1, r1, #0
 80063ca:	f082 8123 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80063ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063d2:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80063d6:	4321      	orrs	r1, r4
 80063d8:	f000 86f9 	beq.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80063dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063e0:	f241 0401 	movw	r4, #4097	@ 0x1001
 80063e4:	42a0      	cmp	r0, r4
 80063e6:	f171 0100 	sbcs.w	r1, r1, #0
 80063ea:	f082 8113 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80063ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063f2:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80063f6:	4321      	orrs	r1, r4
 80063f8:	f000 8683 	beq.w	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80063fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006400:	f640 0401 	movw	r4, #2049	@ 0x801
 8006404:	42a0      	cmp	r0, r4
 8006406:	f171 0100 	sbcs.w	r1, r1, #0
 800640a:	f082 8103 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800640e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006412:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8006416:	4321      	orrs	r1, r4
 8006418:	f000 860d 	beq.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 800641c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006420:	f240 4401 	movw	r4, #1025	@ 0x401
 8006424:	42a0      	cmp	r0, r4
 8006426:	f171 0100 	sbcs.w	r1, r1, #0
 800642a:	f082 80f3 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800642e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006432:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8006436:	4321      	orrs	r1, r4
 8006438:	f000 858b 	beq.w	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800643c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006440:	f240 2401 	movw	r4, #513	@ 0x201
 8006444:	42a0      	cmp	r0, r4
 8006446:	f171 0100 	sbcs.w	r1, r1, #0
 800644a:	f082 80e3 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800644e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006452:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8006456:	4321      	orrs	r1, r4
 8006458:	f000 8510 	beq.w	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800645c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006460:	f240 1401 	movw	r4, #257	@ 0x101
 8006464:	42a0      	cmp	r0, r4
 8006466:	f171 0100 	sbcs.w	r1, r1, #0
 800646a:	f082 80d3 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800646e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006472:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8006476:	4321      	orrs	r1, r4
 8006478:	f000 8495 	beq.w	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800647c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006480:	2881      	cmp	r0, #129	@ 0x81
 8006482:	f171 0100 	sbcs.w	r1, r1, #0
 8006486:	f082 80c5 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800648a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800648e:	2821      	cmp	r0, #33	@ 0x21
 8006490:	f171 0100 	sbcs.w	r1, r1, #0
 8006494:	d254      	bcs.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8006496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800649a:	4301      	orrs	r1, r0
 800649c:	f002 80ba 	beq.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80064a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064a4:	1e42      	subs	r2, r0, #1
 80064a6:	f141 33ff 	adc.w	r3, r1, #4294967295
 80064aa:	2a20      	cmp	r2, #32
 80064ac:	f173 0100 	sbcs.w	r1, r3, #0
 80064b0:	f082 80b0 	bcs.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80064b4:	2a1f      	cmp	r2, #31
 80064b6:	f202 80ad 	bhi.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80064ba:	a101      	add	r1, pc, #4	@ (adr r1, 80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80064bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064c0:	080067c5 	.word	0x080067c5
 80064c4:	080068a5 	.word	0x080068a5
 80064c8:	08008615 	.word	0x08008615
 80064cc:	08006965 	.word	0x08006965
 80064d0:	08008615 	.word	0x08008615
 80064d4:	08008615 	.word	0x08008615
 80064d8:	08008615 	.word	0x08008615
 80064dc:	08006a35 	.word	0x08006a35
 80064e0:	08008615 	.word	0x08008615
 80064e4:	08008615 	.word	0x08008615
 80064e8:	08008615 	.word	0x08008615
 80064ec:	08008615 	.word	0x08008615
 80064f0:	08008615 	.word	0x08008615
 80064f4:	08008615 	.word	0x08008615
 80064f8:	08008615 	.word	0x08008615
 80064fc:	08006b17 	.word	0x08006b17
 8006500:	08008615 	.word	0x08008615
 8006504:	08008615 	.word	0x08008615
 8006508:	08008615 	.word	0x08008615
 800650c:	08008615 	.word	0x08008615
 8006510:	08008615 	.word	0x08008615
 8006514:	08008615 	.word	0x08008615
 8006518:	08008615 	.word	0x08008615
 800651c:	08008615 	.word	0x08008615
 8006520:	08008615 	.word	0x08008615
 8006524:	08008615 	.word	0x08008615
 8006528:	08008615 	.word	0x08008615
 800652c:	08008615 	.word	0x08008615
 8006530:	08008615 	.word	0x08008615
 8006534:	08008615 	.word	0x08008615
 8006538:	08008615 	.word	0x08008615
 800653c:	08006bed 	.word	0x08006bed
 8006540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006544:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006548:	430b      	orrs	r3, r1
 800654a:	f000 83ba 	beq.w	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 800654e:	f002 b861 	b.w	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006552:	bf00      	nop
 8006554:	80000001 	.word	0x80000001
 8006558:	40000001 	.word	0x40000001
 800655c:	20000001 	.word	0x20000001
 8006560:	10000001 	.word	0x10000001
 8006564:	08000001 	.word	0x08000001
 8006568:	04000001 	.word	0x04000001
 800656c:	00400001 	.word	0x00400001
 8006570:	00200001 	.word	0x00200001
 8006574:	00100001 	.word	0x00100001
 8006578:	00080001 	.word	0x00080001
 800657c:	00040001 	.word	0x00040001
 8006580:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006584:	4b9f      	ldr	r3, [pc, #636]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800658a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800658e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006596:	d036      	beq.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800659e:	d86b      	bhi.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065a6:	d02b      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065ae:	d863      	bhi.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065b6:	d01b      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065be:	d85b      	bhi.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065cc:	d008      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 80065ce:	e053      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065d0:	f107 0320 	add.w	r3, r7, #32
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff f8c5 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80065de:	e04e      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff fa29 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80065ee:	e046      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065f0:	f107 0308 	add.w	r3, r7, #8
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fb8d 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80065fe:	e03e      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006600:	4b81      	ldr	r3, [pc, #516]	@ (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006604:	e03b      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006606:	4b7f      	ldr	r3, [pc, #508]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800660c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006610:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006612:	4b7c      	ldr	r3, [pc, #496]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d10c      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006624:	4b77      	ldr	r3, [pc, #476]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	4a77      	ldr	r2, [pc, #476]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
 8006634:	637b      	str	r3, [r7, #52]	@ 0x34
 8006636:	e01e      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006638:	4b72      	ldr	r3, [pc, #456]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006644:	d106      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664c:	d102      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800664e:	4b70      	ldr	r3, [pc, #448]	@ (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
 8006652:	e010      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006654:	4b6b      	ldr	r3, [pc, #428]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006660:	d106      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800666a:	4b6a      	ldr	r3, [pc, #424]	@ (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
 800666e:	e002      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006674:	e003      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006676:	e002      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800667c:	bf00      	nop
          }
        }
        break;
 800667e:	f001 bfcc 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006682:	4b60      	ldr	r3, [pc, #384]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006688:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800668c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006694:	d036      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800669c:	d86b      	bhi.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80066a4:	d02b      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80066ac:	d863      	bhi.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066b4:	d01b      	beq.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066bc:	d85b      	bhi.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80066c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80066ca:	d008      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 80066cc:	e053      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066ce:	f107 0320 	add.w	r3, r7, #32
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff f846 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80066dc:	e04e      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066de:	f107 0314 	add.w	r3, r7, #20
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff f9aa 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80066ec:	e046      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ee:	f107 0308 	add.w	r3, r7, #8
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff fb0e 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80066fc:	e03e      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80066fe:	4b42      	ldr	r3, [pc, #264]	@ (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006702:	e03b      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006704:	4b3f      	ldr	r3, [pc, #252]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800670a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800670e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006710:	4b3c      	ldr	r3, [pc, #240]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b02      	cmp	r3, #2
 800671a:	d10c      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006722:	4b38      	ldr	r3, [pc, #224]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	08db      	lsrs	r3, r3, #3
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	4a37      	ldr	r2, [pc, #220]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800672e:	fa22 f303 	lsr.w	r3, r2, r3
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
 8006734:	e01e      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006736:	4b33      	ldr	r3, [pc, #204]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800673e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006742:	d106      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800674a:	d102      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800674c:	4b30      	ldr	r3, [pc, #192]	@ (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006750:	e010      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006752:	4b2c      	ldr	r3, [pc, #176]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800675e:	d106      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006766:	d102      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006768:	4b2a      	ldr	r3, [pc, #168]	@ (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800676a:	637b      	str	r3, [r7, #52]	@ 0x34
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006772:	e003      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 8006774:	e002      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800677a:	bf00      	nop
          }
        }
        break;
 800677c:	f001 bf4d 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006780:	4b20      	ldr	r3, [pc, #128]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006782:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d108      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006792:	f107 0320 	add.w	r3, r7, #32
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe ffe4 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067a0:	f001 bf3b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	2b40      	cmp	r3, #64	@ 0x40
 80067a8:	d108      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067aa:	f107 0314 	add.w	r3, r7, #20
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff f944 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067b8:	f001 bf2f 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067c0:	f001 bf2b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80067c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80067d6:	f7fd f853 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80067da:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80067dc:	f001 bf1d 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80067e0:	4b08      	ldr	r3, [pc, #32]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ec:	d114      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d111      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff f91f 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
 8006802:	e04d      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 8006804:	44020c00 	.word	0x44020c00
 8006808:	00bb8000 	.word	0x00bb8000
 800680c:	03d09000 	.word	0x03d09000
 8006810:	003d0900 	.word	0x003d0900
 8006814:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006818:	4ba0      	ldr	r3, [pc, #640]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006824:	d10a      	bne.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	2b02      	cmp	r3, #2
 800682a:	d107      	bne.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800682c:	f107 0308 	add.w	r3, r7, #8
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fa6f 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
 800683a:	e031      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800683c:	4b97      	ldr	r3, [pc, #604]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d10c      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	2b03      	cmp	r3, #3
 800684c:	d109      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800684e:	4b93      	ldr	r3, [pc, #588]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	08db      	lsrs	r3, r3, #3
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	4a91      	ldr	r2, [pc, #580]	@ (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800685a:	fa22 f303 	lsr.w	r3, r2, r3
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006860:	e01e      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006862:	4b8e      	ldr	r3, [pc, #568]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800686a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800686e:	d105      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	2b04      	cmp	r3, #4
 8006874:	d102      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 8006876:	4b8b      	ldr	r3, [pc, #556]	@ (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
 800687a:	e011      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800687c:	4b87      	ldr	r3, [pc, #540]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800687e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d106      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	2b05      	cmp	r3, #5
 800688e:	d103      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 8006890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
 8006896:	e003      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800689c:	f001 bebd 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80068a0:	f001 bebb 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80068a4:	4b7d      	ldr	r3, [pc, #500]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80068a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80068aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d104      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068b6:	f7fc ffcd 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80068ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80068bc:	f001 bead 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80068c0:	4b76      	ldr	r3, [pc, #472]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068cc:	d10a      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d107      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d4:	f107 0314 	add.w	r3, r7, #20
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff f8af 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e2:	e03d      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d108      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ea:	f107 0308 	add.w	r3, r7, #8
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fa10 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068f8:	f001 be8f 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80068fc:	4b67      	ldr	r3, [pc, #412]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d10c      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	2b18      	cmp	r3, #24
 800690c:	d109      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800690e:	4b63      	ldr	r3, [pc, #396]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	4a61      	ldr	r2, [pc, #388]	@ (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006920:	e01e      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006922:	4b5e      	ldr	r3, [pc, #376]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800692a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800692e:	d105      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	2b20      	cmp	r3, #32
 8006934:	d102      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 8006936:	4b5b      	ldr	r3, [pc, #364]	@ (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006938:	637b      	str	r3, [r7, #52]	@ 0x34
 800693a:	e011      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800693c:	4b57      	ldr	r3, [pc, #348]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800693e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d106      	bne.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	2b28      	cmp	r3, #40	@ 0x28
 800694e:	d103      	bne.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 8006950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
 8006956:	e003      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800695c:	f001 be5d 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006960:	f001 be5b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006964:	4b4d      	ldr	r3, [pc, #308]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800696a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800696e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	2b00      	cmp	r3, #0
 8006974:	d104      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006976:	f7fc ff6d 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 800697a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800697c:	f001 be4d 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006980:	4b46      	ldr	r3, [pc, #280]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800698c:	d10a      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	2b40      	cmp	r3, #64	@ 0x40
 8006992:	d107      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006994:	f107 0314 	add.w	r3, r7, #20
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff f84f 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a2:	e045      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80069a4:	4b3d      	ldr	r3, [pc, #244]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069b0:	d10a      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	2b80      	cmp	r3, #128	@ 0x80
 80069b6:	d107      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff f9a9 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c6:	e033      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80069c8:	4b34      	ldr	r3, [pc, #208]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d10c      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d8:	d109      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069da:	4b30      	ldr	r3, [pc, #192]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	08db      	lsrs	r3, r3, #3
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	4a2e      	ldr	r2, [pc, #184]	@ (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80069e6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ec:	e020      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80069ee:	4b2b      	ldr	r3, [pc, #172]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069fa:	d106      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a02:	d102      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 8006a04:	4b27      	ldr	r3, [pc, #156]	@ (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a08:	e012      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006a0a:	4b24      	ldr	r3, [pc, #144]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d107      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006a1e:	d103      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 8006a20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a2c:	f001 bdf5 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006a30:	f001 bdf3 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006a34:	4b19      	ldr	r3, [pc, #100]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a3a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a46:	f7fc ff05 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006a4a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a4c:	f001 bde5 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006a50:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a5c:	d10b      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a64:	d107      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a66:	f107 0314 	add.w	r3, r7, #20
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe ffe6 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	e04d      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006a76:	4b09      	ldr	r3, [pc, #36]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a82:	d111      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8a:	d10d      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8c:	f107 0308 	add.w	r3, r7, #8
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff f93f 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a9a:	e03a      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8006a9c:	44020c00 	.word	0x44020c00
 8006aa0:	03d09000 	.word	0x03d09000
 8006aa4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006aa8:	4ba0      	ldr	r3, [pc, #640]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006aba:	d109      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006abc:	4b9b      	ldr	r3, [pc, #620]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	08db      	lsrs	r3, r3, #3
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	4a9a      	ldr	r2, [pc, #616]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ace:	e020      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006ad0:	4b96      	ldr	r3, [pc, #600]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006adc:	d106      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ae4:	d102      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 8006ae6:	4b93      	ldr	r3, [pc, #588]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aea:	e012      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006aec:	4b8f      	ldr	r3, [pc, #572]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d107      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006b00:	d103      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 8006b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b08:	e003      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b0e:	f001 bd84 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006b12:	f001 bd82 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006b16:	4b85      	ldr	r3, [pc, #532]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b28:	f7fc fe94 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006b2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b2e:	f001 bd74 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006b32:	4b7e      	ldr	r3, [pc, #504]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b3e:	d10b      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b46:	d107      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b48:	f107 0314 	add.w	r3, r7, #20
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe ff75 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b56:	e047      	b.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006b58:	4b74      	ldr	r3, [pc, #464]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b64:	d10b      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b6c:	d107      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b6e:	f107 0308 	add.w	r3, r7, #8
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff f8ce 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7c:	e034      	b.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006b7e:	4b6b      	ldr	r3, [pc, #428]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d10d      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b90:	d109      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b92:	4b66      	ldr	r3, [pc, #408]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	4a64      	ldr	r2, [pc, #400]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba4:	e020      	b.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006ba6:	4b61      	ldr	r3, [pc, #388]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bba:	d102      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 8006bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc0:	e012      	b.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d107      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bd6:	d103      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 8006bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006be4:	f001 bd19 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006be8:	f001 bd17 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006bec:	4b4f      	ldr	r3, [pc, #316]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006bf2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8006bf6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bfe:	f7fc fe29 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006c02:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c04:	f001 bd09 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006c08:	4b48      	ldr	r3, [pc, #288]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c14:	d10b      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c1e:	f107 0314 	add.w	r3, r7, #20
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe ff0a 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2c:	e047      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c3a:	d10b      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c42:	d107      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c44:	f107 0308 	add.w	r3, r7, #8
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff f863 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c52:	e034      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006c54:	4b35      	ldr	r3, [pc, #212]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d10d      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006c66:	d109      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c68:	4b30      	ldr	r3, [pc, #192]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	08db      	lsrs	r3, r3, #3
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	4a2f      	ldr	r2, [pc, #188]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	e020      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c88:	d106      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c90:	d102      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 8006c92:	4b28      	ldr	r3, [pc, #160]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	e012      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006c98:	4b24      	ldr	r3, [pc, #144]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006cac:	d103      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 8006cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cba:	f001 bcae 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006cbe:	f001 bcac 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006cc8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8006ccc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cd4:	f7fc fdbe 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006cd8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006cda:	f001 bc9e 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006cde:	4b13      	ldr	r3, [pc, #76]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cea:	d10b      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cf2:	d107      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe fe9f 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d02:	e04e      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006d04:	4b09      	ldr	r3, [pc, #36]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d10:	d112      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d18:	d10e      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fff8 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d28:	e03b      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 8006d2a:	bf00      	nop
 8006d2c:	44020c00 	.word	0x44020c00
 8006d30:	03d09000 	.word	0x03d09000
 8006d34:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8006d38:	4ba0      	ldr	r3, [pc, #640]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d10d      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006d4a:	d109      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d4c:	4b9b      	ldr	r3, [pc, #620]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	4a9a      	ldr	r2, [pc, #616]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5e:	e020      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8006d60:	4b96      	ldr	r3, [pc, #600]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d74:	d102      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 8006d76:	4b93      	ldr	r3, [pc, #588]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7a:	e012      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d107      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006d90:	d103      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d98:	e003      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d9e:	f001 bc3c 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006da2:	f001 bc3a 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8006da6:	4b85      	ldr	r3, [pc, #532]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006dac:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006db0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006db8:	f7fc fd4c 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006dbe:	f001 bc2c 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006dc2:	4b7e      	ldr	r3, [pc, #504]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dce:	d10b      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fe2d 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de6:	e047      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006de8:	4b74      	ldr	r3, [pc, #464]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df4:	d10b      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dfc:	d107      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfe:	f107 0308 	add.w	r3, r7, #8
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe ff86 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0c:	e034      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006e0e:	4b6b      	ldr	r3, [pc, #428]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d10d      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e20:	d109      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e22:	4b66      	ldr	r3, [pc, #408]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	08db      	lsrs	r3, r3, #3
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	4a64      	ldr	r2, [pc, #400]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8006e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e34:	e020      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8006e36:	4b61      	ldr	r3, [pc, #388]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e42:	d106      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e4a:	d102      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 8006e4c:	4b5d      	ldr	r3, [pc, #372]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e50:	e012      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8006e52:	4b5a      	ldr	r3, [pc, #360]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006e66:	d103      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 8006e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e6e:	e003      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e74:	f001 bbd1 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006e78:	f001 bbcf 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e82:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006e86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d104      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e8e:	f7fc fce1 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006e92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e94:	f001 bbc1 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006e98:	4b48      	ldr	r3, [pc, #288]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ea4:	d10b      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eac:	d107      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eae:	f107 0314 	add.w	r3, r7, #20
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fdc2 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ebc:	e047      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eca:	d10b      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ed4:	f107 0308 	add.w	r3, r7, #8
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe ff1b 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee2:	e034      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006ee4:	4b35      	ldr	r3, [pc, #212]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d10d      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ef6:	d109      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ef8:	4b30      	ldr	r3, [pc, #192]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	08db      	lsrs	r3, r3, #3
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	4a2f      	ldr	r2, [pc, #188]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
 8006f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f0a:	e020      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f18:	d106      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f20:	d102      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 8006f22:	4b28      	ldr	r3, [pc, #160]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f26:	e012      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006f28:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d107      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006f3c:	d103      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f44:	e003      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f4a:	f001 bb66 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006f4e:	f001 bb64 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8006f52:	4b1a      	ldr	r3, [pc, #104]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f58:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8006f5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f64:	f7fc fc76 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8006f68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f6a:	f001 bb56 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006f6e:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f7a:	d10b      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f82:	d107      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fd57 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f92:	e04e      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006f94:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fa0:	d112      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fa8:	d10e      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006faa:	f107 0308 	add.w	r3, r7, #8
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe feb0 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb8:	e03b      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 8006fba:	bf00      	nop
 8006fbc:	44020c00 	.word	0x44020c00
 8006fc0:	03d09000 	.word	0x03d09000
 8006fc4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006fc8:	4b9f      	ldr	r3, [pc, #636]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d10d      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006fda:	d109      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fdc:	4b9a      	ldr	r3, [pc, #616]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	08db      	lsrs	r3, r3, #3
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	4a99      	ldr	r2, [pc, #612]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fee:	e020      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006ff0:	4b95      	ldr	r3, [pc, #596]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ffc:	d106      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007004:	d102      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 8007006:	4b92      	ldr	r3, [pc, #584]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
 800700a:	e012      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800700c:	4b8e      	ldr	r3, [pc, #568]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800700e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b02      	cmp	r3, #2
 8007018:	d107      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007020:	d103      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 8007022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
 8007028:	e003      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800702e:	f001 baf4 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007032:	f001 baf2 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007036:	4b84      	ldr	r3, [pc, #528]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007038:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007048:	f7fc fc04 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 800704c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800704e:	f001 bae4 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007052:	4b7d      	ldr	r3, [pc, #500]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800705a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800705e:	d10a      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2b01      	cmp	r3, #1
 8007064:	d107      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007066:	f107 0314 	add.w	r3, r7, #20
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fce6 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
 8007074:	e043      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007076:	4b74      	ldr	r3, [pc, #464]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007082:	d10a      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	2b02      	cmp	r3, #2
 8007088:	d107      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fe40 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	637b      	str	r3, [r7, #52]	@ 0x34
 8007098:	e031      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800709a:	4b6b      	ldr	r3, [pc, #428]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d10c      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d109      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070ac:	4b66      	ldr	r3, [pc, #408]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	08db      	lsrs	r3, r3, #3
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	4a65      	ldr	r2, [pc, #404]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070be:	e01e      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80070c0:	4b61      	ldr	r3, [pc, #388]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070cc:	d105      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 80070ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d102      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 80070d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d8:	e011      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80070da:	4b5b      	ldr	r3, [pc, #364]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80070dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d106      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d103      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 80070ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f4:	e003      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070fa:	f001 ba8e 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80070fe:	f001 ba8c 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007102:	4b51      	ldr	r3, [pc, #324]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007104:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007108:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800710c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007114:	f7fc fb9e 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8007118:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800711a:	f001 ba7e 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800711e:	4b4a      	ldr	r3, [pc, #296]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800712a:	d10a      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	2b10      	cmp	r3, #16
 8007130:	d107      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007132:	f107 0314 	add.w	r3, r7, #20
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe fc80 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007140:	e043      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007142:	4b41      	ldr	r3, [pc, #260]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800714e:	d10a      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	2b20      	cmp	r3, #32
 8007154:	d107      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007156:	f107 0308 	add.w	r3, r7, #8
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fdda 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
 8007164:	e031      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007166:	4b38      	ldr	r3, [pc, #224]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b02      	cmp	r3, #2
 8007170:	d10c      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	2b30      	cmp	r3, #48	@ 0x30
 8007176:	d109      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007178:	4b33      	ldr	r3, [pc, #204]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a32      	ldr	r2, [pc, #200]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
 800718a:	e01e      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800718c:	4b2e      	ldr	r3, [pc, #184]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007198:	d105      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	2b40      	cmp	r3, #64	@ 0x40
 800719e:	d102      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 80071a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 80071a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a4:	e011      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80071a6:	4b28      	ldr	r3, [pc, #160]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80071a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d106      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	2b50      	cmp	r3, #80	@ 0x50
 80071b8:	d103      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 80071ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c0:	e003      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071c6:	f001 ba28 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80071ca:	f001 ba26 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80071ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80071d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071d4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80071d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80071e0:	f7fc fb64 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 80071e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80071e6:	f001 ba18 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071f0:	d108      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f2:	f107 0314 	add.w	r3, r7, #20
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fc20 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007200:	f001 ba0b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800720a:	d108      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720c:	f107 0308 	add.w	r3, r7, #8
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fd7f 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800721a:	f001 b9fe 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800721e:	4b0a      	ldr	r3, [pc, #40]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b02      	cmp	r3, #2
 8007228:	d114      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007230:	d110      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007232:	4b05      	ldr	r3, [pc, #20]	@ (8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	08db      	lsrs	r3, r3, #3
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	4a03      	ldr	r2, [pc, #12]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800723e:	fa22 f303 	lsr.w	r3, r2, r3
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
 8007244:	e027      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 8007246:	bf00      	nop
 8007248:	44020c00 	.word	0x44020c00
 800724c:	03d09000 	.word	0x03d09000
 8007250:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007254:	4ba0      	ldr	r3, [pc, #640]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800725c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007260:	d106      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007268:	d102      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 800726a:	4b9c      	ldr	r3, [pc, #624]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34
 800726e:	e012      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007270:	4b99      	ldr	r3, [pc, #612]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b02      	cmp	r3, #2
 800727c:	d107      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007284:	d103      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34
 800728c:	e003      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007292:	f001 b9c2 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007296:	f001 b9c0 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800729a:	4b8f      	ldr	r3, [pc, #572]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800729c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80072ac:	f7fc fab6 	bl	800381c <HAL_RCC_GetHCLKFreq>
 80072b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80072b2:	f001 b9b2 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d104      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 80072bc:	f7fc f982 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 80072c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072c2:	f001 b9aa 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d108      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072cc:	f107 0314 	add.w	r3, r7, #20
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fbb3 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072da:	f001 b99e 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80072de:	4b7e      	ldr	r3, [pc, #504]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ea:	d105      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d102      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 80072f2:	4b7b      	ldr	r3, [pc, #492]	@ (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	e023      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80072f8:	4b77      	ldr	r3, [pc, #476]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b02      	cmp	r3, #2
 8007302:	d10c      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	2b04      	cmp	r3, #4
 8007308:	d109      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800730a:	4b73      	ldr	r3, [pc, #460]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	08db      	lsrs	r3, r3, #3
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	4a73      	ldr	r2, [pc, #460]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8007316:	fa22 f303 	lsr.w	r3, r2, r3
 800731a:	637b      	str	r3, [r7, #52]	@ 0x34
 800731c:	e010      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800731e:	4b6e      	ldr	r3, [pc, #440]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800732a:	d105      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	2b05      	cmp	r3, #5
 8007330:	d102      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 8007332:	4b6a      	ldr	r3, [pc, #424]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34
 8007336:	e003      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800733c:	f001 b96d 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007340:	f001 b96b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007344:	4b64      	ldr	r3, [pc, #400]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007350:	4b61      	ldr	r3, [pc, #388]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b02      	cmp	r3, #2
 800735c:	d106      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	2b00      	cmp	r3, #0
 8007362:	d103      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 8007364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
 800736a:	e012      	b.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800736c:	4b5a      	ldr	r3, [pc, #360]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800736e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800737a:	d106      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	2b08      	cmp	r3, #8
 8007380:	d103      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 8007382:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
 8007388:	e003      	b.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800738e:	f001 b944 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007392:	f001 b942 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007396:	4b50      	ldr	r3, [pc, #320]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007398:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800739c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073a8:	f7fc fa54 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80073ac:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80073ae:	f001 b934 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b8:	d108      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fca8 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073c8:	f001 b927 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80073cc:	4b42      	ldr	r3, [pc, #264]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d10d      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073de:	d109      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073e0:	4b3d      	ldr	r3, [pc, #244]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	4a3e      	ldr	r2, [pc, #248]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f2:	e011      	b.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80073f4:	4b38      	ldr	r3, [pc, #224]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007400:	d106      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007408:	d102      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 800740a:	4b34      	ldr	r3, [pc, #208]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
 800740e:	e003      	b.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007414:	f001 b901 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007418:	f001 b8ff 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800741c:	4b2e      	ldr	r3, [pc, #184]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800741e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007422:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007426:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800742e:	f7fc fa11 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8007432:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007434:	f001 b8f1 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800743e:	d108      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fc65 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800744e:	f001 b8e4 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007452:	4b21      	ldr	r3, [pc, #132]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b02      	cmp	r3, #2
 800745c:	d10d      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007464:	d109      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007466:	4b1c      	ldr	r3, [pc, #112]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	08db      	lsrs	r3, r3, #3
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	4a1c      	ldr	r2, [pc, #112]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8007472:	fa22 f303 	lsr.w	r3, r2, r3
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
 8007478:	e011      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800747a:	4b17      	ldr	r3, [pc, #92]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007486:	d106      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800748e:	d102      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 8007490:	4b12      	ldr	r3, [pc, #72]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
 8007494:	e003      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800749a:	f001 b8be 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800749e:	f001 b8bc 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80074a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80074ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80074b4:	f7fc f9fa 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 80074b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80074ba:	f001 b8ae 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074c4:	d110      	bne.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c6:	f107 0308 	add.w	r3, r7, #8
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fc22 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074d4:	f001 b8a1 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80074d8:	44020c00 	.word	0x44020c00
 80074dc:	003d0900 	.word	0x003d0900
 80074e0:	007a1200 	.word	0x007a1200
 80074e4:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80074e8:	4b9e      	ldr	r3, [pc, #632]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d10d      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074fa:	d109      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074fc:	4b99      	ldr	r3, [pc, #612]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	08db      	lsrs	r3, r3, #3
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	4a98      	ldr	r2, [pc, #608]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
 800750c:	637b      	str	r3, [r7, #52]	@ 0x34
 800750e:	e011      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007510:	4b94      	ldr	r3, [pc, #592]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800751c:	d106      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007524:	d102      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 8007526:	4b91      	ldr	r3, [pc, #580]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
 800752a:	e003      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007530:	f001 b873 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007534:	f001 b871 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007538:	4b8a      	ldr	r3, [pc, #552]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800753a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800753e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007542:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800754a:	f7fc f9af 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 800754e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007550:	f001 b863 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800755a:	d108      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800755c:	f107 0308 	add.w	r3, r7, #8
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe fbd7 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800756a:	f001 b856 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800756e:	4b7d      	ldr	r3, [pc, #500]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d10d      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007580:	d109      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007582:	4b78      	ldr	r3, [pc, #480]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	08db      	lsrs	r3, r3, #3
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	4a76      	ldr	r2, [pc, #472]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800758e:	fa22 f303 	lsr.w	r3, r2, r3
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
 8007594:	e011      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007596:	4b73      	ldr	r3, [pc, #460]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800759e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a2:	d106      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075aa:	d102      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 80075ac:	4b6f      	ldr	r3, [pc, #444]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b0:	e003      	b.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075b6:	f001 b830 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80075ba:	f001 b82e 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80075be:	4b69      	ldr	r3, [pc, #420]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80075c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075c4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80075c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075d0:	f7fc f940 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80075d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80075d6:	f001 b820 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075e0:	d108      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e2:	f107 0308 	add.w	r3, r7, #8
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fb94 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f0:	f001 b813 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80075f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d10e      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 8007600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007606:	d10a      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007608:	4b56      	ldr	r3, [pc, #344]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	08db      	lsrs	r3, r3, #3
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	4a55      	ldr	r2, [pc, #340]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800761a:	f000 bffe 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007622:	f000 bffa 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007626:	4b4f      	ldr	r3, [pc, #316]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007628:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800762c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007630:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007638:	d056      	beq.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007640:	f200 808b 	bhi.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800764a:	d03e      	beq.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007652:	f200 8082 	bhi.w	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800765c:	d027      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 800765e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007664:	d879      	bhi.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766c:	d017      	beq.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007674:	d871      	bhi.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007682:	d004      	beq.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 8007684:	e069      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007686:	f7fc f911 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 800768a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800768c:	e068      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800768e:	f107 0314 	add.w	r3, r7, #20
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe f9d2 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800769c:	e060      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fb36 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076ac:	e058      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80076b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d103      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 80076bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80076c2:	e04d      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076c8:	e04a      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80076ca:	4b26      	ldr	r3, [pc, #152]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80076cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d8:	d103      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 80076da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076de:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80076e0:	e03e      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076e6:	e03b      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80076ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80076f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d10c      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 8007700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d109      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007706:	4b17      	ldr	r3, [pc, #92]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	08db      	lsrs	r3, r3, #3
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	4a15      	ldr	r2, [pc, #84]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
 8007718:	e01e      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800771a:	4b12      	ldr	r3, [pc, #72]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007726:	d106      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 8007728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772e:	d102      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007730:	4b0e      	ldr	r3, [pc, #56]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
 8007734:	e010      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007736:	4b0b      	ldr	r3, [pc, #44]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800773e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007742:	d106      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 8007744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800774a:	d102      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800774c:	4b08      	ldr	r3, [pc, #32]	@ (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007750:	e002      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007756:	e003      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 8007758:	e002      	b.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800775e:	bf00      	nop
          }
        }
        break;
 8007760:	f000 bf5b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007764:	44020c00 	.word	0x44020c00
 8007768:	03d09000 	.word	0x03d09000
 800776c:	003d0900 	.word	0x003d0900
 8007770:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007774:	4b9e      	ldr	r3, [pc, #632]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007776:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800777a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800777e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007786:	d056      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800778e:	f200 808b 	bhi.w	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007798:	d03e      	beq.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077a0:	f200 8082 	bhi.w	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077aa:	d027      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b2:	d879      	bhi.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 80077b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ba:	d017      	beq.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c2:	d871      	bhi.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d0:	d004      	beq.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80077d2:	e069      	b.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80077d4:	f7fc f83e 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80077d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80077da:	e068      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077dc:	f107 0314 	add.w	r3, r7, #20
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe f92b 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077ea:	e060      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ec:	f107 0308 	add.w	r3, r7, #8
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe fa8f 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077fa:	e058      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80077fc:	4b7c      	ldr	r3, [pc, #496]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80077fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d103      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 800780a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007810:	e04d      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007816:	e04a      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007818:	4b75      	ldr	r3, [pc, #468]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800781a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800781e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007826:	d103      	bne.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 8007828:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800782e:	e03e      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007834:	e03b      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007836:	4b6e      	ldr	r3, [pc, #440]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800783c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007840:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007842:	4b6b      	ldr	r3, [pc, #428]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b02      	cmp	r3, #2
 800784c:	d10c      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 800784e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007854:	4b66      	ldr	r3, [pc, #408]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	08db      	lsrs	r3, r3, #3
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	4a65      	ldr	r2, [pc, #404]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	e01e      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007868:	4b61      	ldr	r3, [pc, #388]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007874:	d106      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 8007876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787c:	d102      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800787e:	4b5e      	ldr	r3, [pc, #376]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8007880:	637b      	str	r3, [r7, #52]	@ 0x34
 8007882:	e010      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007884:	4b5a      	ldr	r3, [pc, #360]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007890:	d106      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 8007892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007898:	d102      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800789a:	4b58      	ldr	r3, [pc, #352]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 800789c:	637b      	str	r3, [r7, #52]	@ 0x34
 800789e:	e002      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80078a4:	e003      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 80078a6:	e002      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078ac:	bf00      	nop
          }
        }
        break;
 80078ae:	f000 beb4 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80078b2:	4b4f      	ldr	r3, [pc, #316]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80078b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80078b8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80078bc:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078c4:	d056      	beq.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078cc:	f200 808b 	bhi.w	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078d6:	d03e      	beq.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078de:	f200 8082 	bhi.w	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078e8:	d027      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078f0:	d879      	bhi.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f8:	d017      	beq.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007900:	d871      	bhi.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800790e:	d004      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007910:	e069      	b.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007912:	f7fb ffcb 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 8007916:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007918:	e068      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800791a:	f107 0314 	add.w	r3, r7, #20
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe f88c 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007928:	e060      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe f9f0 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007938:	e058      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800793a:	4b2d      	ldr	r3, [pc, #180]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800793c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b02      	cmp	r3, #2
 8007946:	d103      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 8007948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800794c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800794e:	e04d      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007954:	e04a      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007956:	4b26      	ldr	r3, [pc, #152]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800795c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007964:	d103      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 8007966:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800796a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800796c:	e03e      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007972:	e03b      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007974:	4b1e      	ldr	r3, [pc, #120]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800797a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800797e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007980:	4b1b      	ldr	r3, [pc, #108]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b02      	cmp	r3, #2
 800798a:	d10c      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007992:	4b17      	ldr	r3, [pc, #92]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	08db      	lsrs	r3, r3, #3
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	4a15      	ldr	r2, [pc, #84]	@ (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 800799e:	fa22 f303 	lsr.w	r3, r2, r3
 80079a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a4:	e01e      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079a6:	4b12      	ldr	r3, [pc, #72]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b2:	d106      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 80079b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ba:	d102      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80079bc:	4b0e      	ldr	r3, [pc, #56]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c0:	e010      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079c2:	4b0b      	ldr	r3, [pc, #44]	@ (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ce:	d106      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 80079d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079d6:	d102      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80079d8:	4b08      	ldr	r3, [pc, #32]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
 80079dc:	e002      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80079e2:	e003      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 80079e4:	e002      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079ea:	bf00      	nop
          }
        }
        break;
 80079ec:	f000 be15 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80079f0:	44020c00 	.word	0x44020c00
 80079f4:	03d09000 	.word	0x03d09000
 80079f8:	003d0900 	.word	0x003d0900
 80079fc:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007a00:	4b9e      	ldr	r3, [pc, #632]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007a02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a06:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8007a0a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007a12:	d056      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007a1a:	f200 808b 	bhi.w	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a24:	d03e      	beq.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a2c:	f200 8082 	bhi.w	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a36:	d027      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a3e:	d879      	bhi.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a46:	d017      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a4e:	d871      	bhi.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d004      	beq.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a5c:	d004      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007a5e:	e069      	b.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007a60:	f7fb ff24 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 8007a64:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007a66:	e068      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a68:	f107 0314 	add.w	r3, r7, #20
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fd ffe5 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a76:	e060      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a78:	f107 0308 	add.w	r3, r7, #8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe f949 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a86:	e058      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a88:	4b7c      	ldr	r3, [pc, #496]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d103      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 8007a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007a9c:	e04d      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007aa2:	e04a      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007aa4:	4b75      	ldr	r3, [pc, #468]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007aaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ab2:	d103      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 8007ab4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ab8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007aba:	e03e      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ac0:	e03b      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ac8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ace:	4b6b      	ldr	r3, [pc, #428]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 8007ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ae0:	4b66      	ldr	r3, [pc, #408]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	08db      	lsrs	r3, r3, #3
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	4a65      	ldr	r2, [pc, #404]	@ (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8007aec:	fa22 f303 	lsr.w	r3, r2, r3
 8007af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af2:	e01e      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007af4:	4b61      	ldr	r3, [pc, #388]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b00:	d106      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b08:	d102      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0e:	e010      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b10:	4b5a      	ldr	r3, [pc, #360]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b1c:	d106      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 8007b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b24:	d102      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b26:	4b58      	ldr	r3, [pc, #352]	@ (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b2a:	e002      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007b30:	e003      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 8007b32:	e002      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b38:	bf00      	nop
          }
        }
        break;
 8007b3a:	f000 bd6e 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007b40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b44:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007b48:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b50:	d056      	beq.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 8007b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b58:	f200 808b 	bhi.w	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b62:	d03e      	beq.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b6a:	f200 8082 	bhi.w	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b74:	d027      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b7c:	d879      	bhi.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b84:	d017      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b8c:	d871      	bhi.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 8007b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b9a:	d004      	beq.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007b9c:	e069      	b.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007b9e:	f7fb fe85 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 8007ba2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007ba4:	e068      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba6:	f107 0314 	add.w	r3, r7, #20
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fd ff46 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bb4:	e060      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb6:	f107 0308 	add.w	r3, r7, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe f8aa 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bc4:	e058      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d103      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 8007bd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007bda:	e04d      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007be0:	e04a      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007be2:	4b26      	ldr	r3, [pc, #152]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bf0:	d103      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 8007bf2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007bf6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007bf8:	e03e      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bfe:	e03b      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c00:	4b1e      	ldr	r3, [pc, #120]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c06:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d10c      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 8007c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c1e:	4b17      	ldr	r3, [pc, #92]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	08db      	lsrs	r3, r3, #3
 8007c24:	f003 0303 	and.w	r3, r3, #3
 8007c28:	4a15      	ldr	r2, [pc, #84]	@ (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8007c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c30:	e01e      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c32:	4b12      	ldr	r3, [pc, #72]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 8007c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c46:	d102      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007c48:	4b0e      	ldr	r3, [pc, #56]	@ (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8007c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4c:	e010      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c5a:	d106      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c62:	d102      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007c64:	4b08      	ldr	r3, [pc, #32]	@ (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c68:	e002      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007c6e:	e003      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 8007c70:	e002      	b.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c76:	bf00      	nop
          }
        }
        break;
 8007c78:	f000 bccf 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007c7c:	44020c00 	.word	0x44020c00
 8007c80:	03d09000 	.word	0x03d09000
 8007c84:	003d0900 	.word	0x003d0900
 8007c88:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007c8c:	4b9e      	ldr	r3, [pc, #632]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007c8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007c96:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8007c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c9e:	d056      	beq.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ca6:	f200 808b 	bhi.w	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb0:	d03e      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb8:	f200 8082 	bhi.w	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cc2:	d027      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cca:	d879      	bhi.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cd2:	d017      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cda:	d871      	bhi.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ce8:	d004      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007cea:	e069      	b.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007cec:	f7fb fdde 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 8007cf0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007cf2:	e068      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf4:	f107 0314 	add.w	r3, r7, #20
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fd fe9f 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d02:	e060      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d04:	f107 0308 	add.w	r3, r7, #8
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe f803 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d12:	e058      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d14:	4b7c      	ldr	r3, [pc, #496]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d103      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 8007d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007d28:	e04d      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d2e:	e04a      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007d30:	4b75      	ldr	r3, [pc, #468]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d3e:	d103      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 8007d40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007d46:	e03e      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d4c:	e03b      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d10c      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 8007d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d109      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d6c:	4b66      	ldr	r3, [pc, #408]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	08db      	lsrs	r3, r3, #3
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	4a65      	ldr	r2, [pc, #404]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 8007d78:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7e:	e01e      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d80:	4b61      	ldr	r3, [pc, #388]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 8007d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d94:	d102      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d96:	4b5e      	ldr	r3, [pc, #376]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 8007d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9a:	e010      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da8:	d106      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 8007daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db0:	d102      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007db2:	4b58      	ldr	r3, [pc, #352]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007dbc:	e003      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 8007dbe:	e002      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dc4:	bf00      	nop
          }
        }
        break;
 8007dc6:	f000 bc28 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007dca:	4b4f      	ldr	r3, [pc, #316]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dd4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de2:	d106      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 8007dea:	4b4a      	ldr	r3, [pc, #296]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8007dec:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007dee:	f000 bc14 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007df8:	d108      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dfa:	f107 0320 	add.w	r3, r7, #32
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fd fcb0 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e08:	f000 bc07 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e12:	d107      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e14:	f107 0314 	add.w	r3, r7, #20
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fd fe0f 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e22:	e3fa      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e28:	e3f7      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007e2a:	4b37      	ldr	r3, [pc, #220]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8007e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d861      	bhi.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 8007e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 8007e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e42:	bf00      	nop
 8007e44:	08007e59 	.word	0x08007e59
 8007e48:	08007e69 	.word	0x08007e69
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	08007e89 	.word	0x08007e89
 8007e54:	08007e8f 	.word	0x08007e8f
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e58:	f107 0320 	add.w	r3, r7, #32
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fd fc81 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e66:	e04e      	b.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fd fde5 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e76:	e046      	b.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e78:	f107 0308 	add.w	r3, r7, #8
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fd ff49 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e86:	e03e      	b.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007e88:	4b23      	ldr	r3, [pc, #140]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e8c:	e03b      	b.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e94:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d10c      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d109      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007eac:	4b16      	ldr	r3, [pc, #88]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	08db      	lsrs	r3, r3, #3
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	4a15      	ldr	r2, [pc, #84]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 8007eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebe:	e01e      	b.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ec0:	4b11      	ldr	r3, [pc, #68]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ecc:	d106      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 8007ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed4:	d102      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eda:	e010      	b.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007edc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ee8:	d106      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 8007eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ef0:	d102      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ef2:	4b08      	ldr	r3, [pc, #32]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8007ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef6:	e002      	b.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007efc:	e003      	b.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 8007efe:	e002      	b.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f04:	bf00      	nop
          }
        }
        break;
 8007f06:	e388      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007f08:	44020c00 	.word	0x44020c00
 8007f0c:	03d09000 	.word	0x03d09000
 8007f10:	003d0900 	.word	0x003d0900
 8007f14:	007a1200 	.word	0x007a1200
 8007f18:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007f1c:	4ba9      	ldr	r3, [pc, #676]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f26:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	f200 809a 	bhi.w	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 8007f30:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007fbd 	.word	0x08007fbd
 8007f3c:	08008065 	.word	0x08008065
 8007f40:	08008065 	.word	0x08008065
 8007f44:	08008065 	.word	0x08008065
 8007f48:	08008065 	.word	0x08008065
 8007f4c:	08008065 	.word	0x08008065
 8007f50:	08008065 	.word	0x08008065
 8007f54:	08008065 	.word	0x08008065
 8007f58:	08007fcd 	.word	0x08007fcd
 8007f5c:	08008065 	.word	0x08008065
 8007f60:	08008065 	.word	0x08008065
 8007f64:	08008065 	.word	0x08008065
 8007f68:	08008065 	.word	0x08008065
 8007f6c:	08008065 	.word	0x08008065
 8007f70:	08008065 	.word	0x08008065
 8007f74:	08008065 	.word	0x08008065
 8007f78:	08007fdd 	.word	0x08007fdd
 8007f7c:	08008065 	.word	0x08008065
 8007f80:	08008065 	.word	0x08008065
 8007f84:	08008065 	.word	0x08008065
 8007f88:	08008065 	.word	0x08008065
 8007f8c:	08008065 	.word	0x08008065
 8007f90:	08008065 	.word	0x08008065
 8007f94:	08008065 	.word	0x08008065
 8007f98:	08007fed 	.word	0x08007fed
 8007f9c:	08008065 	.word	0x08008065
 8007fa0:	08008065 	.word	0x08008065
 8007fa4:	08008065 	.word	0x08008065
 8007fa8:	08008065 	.word	0x08008065
 8007fac:	08008065 	.word	0x08008065
 8007fb0:	08008065 	.word	0x08008065
 8007fb4:	08008065 	.word	0x08008065
 8007fb8:	08007ff3 	.word	0x08007ff3
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fbc:	f107 0320 	add.w	r3, r7, #32
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fd fbcf 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fca:	e04e      	b.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fcc:	f107 0314 	add.w	r3, r7, #20
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fd fd33 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fda:	e046      	b.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fdc:	f107 0308 	add.w	r3, r7, #8
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fd fe97 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fea:	e03e      	b.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007fec:	4b76      	ldr	r3, [pc, #472]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ff0:	e03b      	b.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ff2:	4b74      	ldr	r3, [pc, #464]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ff8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ffe:	4b71      	ldr	r3, [pc, #452]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b02      	cmp	r3, #2
 8008008:	d10c      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 800800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008010:	4b6c      	ldr	r3, [pc, #432]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	08db      	lsrs	r3, r3, #3
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	4a6c      	ldr	r2, [pc, #432]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
 8008020:	637b      	str	r3, [r7, #52]	@ 0x34
 8008022:	e01e      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008024:	4b67      	ldr	r3, [pc, #412]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800802c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008030:	d106      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 8008032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008038:	d102      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800803a:	4b65      	ldr	r3, [pc, #404]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 800803c:	637b      	str	r3, [r7, #52]	@ 0x34
 800803e:	e010      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008040:	4b60      	ldr	r3, [pc, #384]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800804c:	d106      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 800804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008054:	d102      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008056:	4b5f      	ldr	r3, [pc, #380]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
 800805a:	e002      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008060:	e003      	b.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 8008062:	e002      	b.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008068:	bf00      	nop
          }
        }
        break;
 800806a:	e2d6      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800806c:	4b55      	ldr	r3, [pc, #340]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800806e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008072:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008076:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800807e:	d031      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008086:	d866      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	2bc0      	cmp	r3, #192	@ 0xc0
 800808c:	d027      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	2bc0      	cmp	r3, #192	@ 0xc0
 8008092:	d860      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	2b80      	cmp	r3, #128	@ 0x80
 8008098:	d019      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	2b80      	cmp	r3, #128	@ 0x80
 800809e:	d85a      	bhi.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	2b40      	cmp	r3, #64	@ 0x40
 80080aa:	d008      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 80080ac:	e053      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080ae:	f107 0320 	add.w	r3, r7, #32
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fd fb56 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080bc:	e04e      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080be:	f107 0314 	add.w	r3, r7, #20
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fd fcba 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080cc:	e046      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ce:	f107 0308 	add.w	r3, r7, #8
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fd fe1e 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080dc:	e03e      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80080de:	4b3a      	ldr	r3, [pc, #232]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 80080e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080e2:	e03b      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080e4:	4b37      	ldr	r3, [pc, #220]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80080e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080f0:	4b34      	ldr	r3, [pc, #208]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d10c      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80080fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008102:	4b30      	ldr	r3, [pc, #192]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	08db      	lsrs	r3, r3, #3
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	4a2f      	ldr	r2, [pc, #188]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
 8008114:	e01e      	b.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008116:	4b2b      	ldr	r3, [pc, #172]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800811e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008122:	d106      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 8008124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800812a:	d102      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800812c:	4b28      	ldr	r3, [pc, #160]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 800812e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008130:	e010      	b.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008132:	4b24      	ldr	r3, [pc, #144]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800813e:	d106      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 8008140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008146:	d102      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008148:	4b22      	ldr	r3, [pc, #136]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
 800814c:	e002      	b.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008152:	e003      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 8008154:	e002      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800815a:	bf00      	nop
          }
        }
        break;
 800815c:	e25d      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800815e:	4b19      	ldr	r3, [pc, #100]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8008160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008164:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008168:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008170:	f7fb fb86 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8008174:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008176:	e250      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008178:	4b12      	ldr	r3, [pc, #72]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008184:	d10b      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818c:	d107      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818e:	f107 0314 	add.w	r3, r7, #20
 8008192:	4618      	mov	r0, r3
 8008194:	f7fd fc52 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	637b      	str	r3, [r7, #52]	@ 0x34
 800819c:	e04f      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800819e:	4b09      	ldr	r3, [pc, #36]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081aa:	d115      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081b2:	d111      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b4:	f107 0308 	add.w	r3, r7, #8
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fd fdab 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c2:	e03c      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 80081c4:	44020c00 	.word	0x44020c00
 80081c8:	00bb8000 	.word	0x00bb8000
 80081cc:	03d09000 	.word	0x03d09000
 80081d0:	003d0900 	.word	0x003d0900
 80081d4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80081d8:	4b94      	ldr	r3, [pc, #592]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d10d      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081ea:	d109      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081ec:	4b8f      	ldr	r3, [pc, #572]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	08db      	lsrs	r3, r3, #3
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	4a8e      	ldr	r2, [pc, #568]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fe:	e01e      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008200:	4b8a      	ldr	r3, [pc, #552]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800820c:	d106      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008214:	d102      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 8008216:	4b87      	ldr	r3, [pc, #540]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
 800821a:	e010      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800821c:	4b83      	ldr	r3, [pc, #524]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008228:	d106      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008230:	d102      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 8008232:	4b81      	ldr	r3, [pc, #516]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8008234:	637b      	str	r3, [r7, #52]	@ 0x34
 8008236:	e002      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800823c:	e1ed      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800823e:	e1ec      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008240:	4b7a      	ldr	r3, [pc, #488]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008246:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800824a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008252:	f7fb fb2b 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 8008256:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008258:	e1df      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800825a:	4b74      	ldr	r3, [pc, #464]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008266:	d10b      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800826e:	d107      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008270:	f107 0314 	add.w	r3, r7, #20
 8008274:	4618      	mov	r0, r3
 8008276:	f7fd fbe1 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	637b      	str	r3, [r7, #52]	@ 0x34
 800827e:	e045      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008280:	4b6a      	ldr	r3, [pc, #424]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800828c:	d10b      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008294:	d107      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd fd3a 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a4:	e032      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80082a6:	4b61      	ldr	r3, [pc, #388]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d10d      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082b8:	d109      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082ba:	4b5c      	ldr	r3, [pc, #368]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	08db      	lsrs	r3, r3, #3
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	4a5a      	ldr	r2, [pc, #360]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 80082c6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80082cc:	e01e      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80082ce:	4b57      	ldr	r3, [pc, #348]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082da:	d106      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082e2:	d102      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 80082e4:	4b53      	ldr	r3, [pc, #332]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e8:	e010      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80082ea:	4b50      	ldr	r3, [pc, #320]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082f6:	d106      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80082fe:	d102      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 8008300:	4b4d      	ldr	r3, [pc, #308]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
 8008304:	e002      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800830a:	e186      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800830c:	e185      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800830e:	4b47      	ldr	r3, [pc, #284]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008314:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008318:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008320:	f7fb faae 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8008324:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008326:	e178      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008328:	4b40      	ldr	r3, [pc, #256]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008334:	d10b      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800833c:	d107      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800833e:	f107 0314 	add.w	r3, r7, #20
 8008342:	4618      	mov	r0, r3
 8008344:	f7fd fb7a 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	637b      	str	r3, [r7, #52]	@ 0x34
 800834c:	e045      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800834e:	4b37      	ldr	r3, [pc, #220]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800835a:	d10b      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008362:	d107      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008364:	f107 0308 	add.w	r3, r7, #8
 8008368:	4618      	mov	r0, r3
 800836a:	f7fd fcd3 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	637b      	str	r3, [r7, #52]	@ 0x34
 8008372:	e032      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008374:	4b2d      	ldr	r3, [pc, #180]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b02      	cmp	r3, #2
 800837e:	d10d      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 8008380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008382:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008386:	d109      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008388:	4b28      	ldr	r3, [pc, #160]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	08db      	lsrs	r3, r3, #3
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	4a27      	ldr	r2, [pc, #156]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
 8008398:	637b      	str	r3, [r7, #52]	@ 0x34
 800839a:	e01e      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800839c:	4b23      	ldr	r3, [pc, #140]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083a8:	d106      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b0:	d102      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 80083b2:	4b20      	ldr	r3, [pc, #128]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b6:	e010      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80083b8:	4b1c      	ldr	r3, [pc, #112]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083c4:	d106      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80083cc:	d102      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 80083ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d2:	e002      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083d8:	e11f      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80083da:	e11e      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80083dc:	4b13      	ldr	r3, [pc, #76]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80083de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80083e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d85f      	bhi.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 80083ee:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008405 	.word	0x08008405
 80083f8:	0800840d 	.word	0x0800840d
 80083fc:	0800841d 	.word	0x0800841d
 8008400:	0800843d 	.word	0x0800843d
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008404:	f7fb fa0a 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8008408:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800840a:	e053      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800840c:	f107 0320 	add.w	r3, r7, #32
 8008410:	4618      	mov	r0, r3
 8008412:	f7fd f9a7 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800841a:	e04b      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800841c:	f107 0314 	add.w	r3, r7, #20
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd fb0b 	bl	8005a3c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800842a:	e043      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 800842c:	44020c00 	.word	0x44020c00
 8008430:	03d09000 	.word	0x03d09000
 8008434:	003d0900 	.word	0x003d0900
 8008438:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800843c:	4b79      	ldr	r3, [pc, #484]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800843e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008442:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008446:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008448:	4b76      	ldr	r3, [pc, #472]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b02      	cmp	r3, #2
 8008452:	d10c      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 8008454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800845a:	4b72      	ldr	r3, [pc, #456]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	08db      	lsrs	r3, r3, #3
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	4a70      	ldr	r2, [pc, #448]	@ (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 8008466:	fa22 f303 	lsr.w	r3, r2, r3
 800846a:	637b      	str	r3, [r7, #52]	@ 0x34
 800846c:	e01e      	b.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800846e:	4b6d      	ldr	r3, [pc, #436]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800847a:	d106      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008482:	d102      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008484:	4b69      	ldr	r3, [pc, #420]	@ (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 8008486:	637b      	str	r3, [r7, #52]	@ 0x34
 8008488:	e010      	b.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800848a:	4b66      	ldr	r3, [pc, #408]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008496:	d106      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 8008498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800849e:	d102      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80084a0:	4b63      	ldr	r3, [pc, #396]	@ (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 80084a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a4:	e002      	b.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80084aa:	e003      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 80084ac:	e002      	b.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084b2:	bf00      	nop
          }
        }
        break;
 80084b4:	e0b1      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80084b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80084b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80084c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80084c2:	4b58      	ldr	r3, [pc, #352]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80084c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d106      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d103      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 80084d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
 80084dc:	e01f      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80084de:	4b51      	ldr	r3, [pc, #324]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80084e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ec:	d106      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2b40      	cmp	r3, #64	@ 0x40
 80084f2:	d103      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 80084f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fa:	e010      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80084fc:	4b49      	ldr	r3, [pc, #292]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008508:	d106      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	2b80      	cmp	r3, #128	@ 0x80
 800850e:	d103      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 8008510:	f248 0312 	movw	r3, #32786	@ 0x8012
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	e002      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800851c:	e07d      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800851e:	e07c      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008520:	4b40      	ldr	r3, [pc, #256]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008526:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800852a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800852c:	4b3d      	ldr	r3, [pc, #244]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008538:	d105      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 8008540:	4b3c      	ldr	r3, [pc, #240]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8008542:	637b      	str	r3, [r7, #52]	@ 0x34
 8008544:	e031      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008546:	4b37      	ldr	r3, [pc, #220]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800854e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008552:	d10a      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	2b10      	cmp	r3, #16
 8008558:	d107      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800855a:	f107 0320 	add.w	r3, r7, #32
 800855e:	4618      	mov	r0, r3
 8008560:	f7fd f900 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	637b      	str	r3, [r7, #52]	@ 0x34
 8008568:	e01f      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800856a:	4b2e      	ldr	r3, [pc, #184]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800856c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b02      	cmp	r3, #2
 8008576:	d106      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	2b20      	cmp	r3, #32
 800857c:	d103      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 800857e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
 8008584:	e011      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008586:	4b27      	ldr	r3, [pc, #156]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8008588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800858c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008594:	d106      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	2b30      	cmp	r3, #48	@ 0x30
 800859a:	d103      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 800859c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80085a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a2:	e002      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80085a8:	e037      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80085aa:	e036      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80085ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80085ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80085b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	2b10      	cmp	r3, #16
 80085bc:	d107      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085be:	f107 0320 	add.w	r3, r7, #32
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fd f8ce 	bl	8005764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80085cc:	e025      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80085ce:	4b15      	ldr	r3, [pc, #84]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085da:	d10a      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d107      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085e2:	f107 0308 	add.w	r3, r7, #8
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fd fb94 	bl	8005d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f0:	e00f      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80085f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085fe:	d105      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008602:	2b30      	cmp	r3, #48	@ 0x30
 8008604:	d102      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 8008606:	4b0b      	ldr	r3, [pc, #44]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8008608:	637b      	str	r3, [r7, #52]	@ 0x34
 800860a:	e002      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008610:	e003      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008612:	e002      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008618:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800861a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800861c:	4618      	mov	r0, r3
 800861e:	373c      	adds	r7, #60	@ 0x3c
 8008620:	46bd      	mov	sp, r7
 8008622:	bd90      	pop	{r4, r7, pc}
 8008624:	44020c00 	.word	0x44020c00
 8008628:	03d09000 	.word	0x03d09000
 800862c:	003d0900 	.word	0x003d0900
 8008630:	007a1200 	.word	0x007a1200
 8008634:	02dc6c00 	.word	0x02dc6c00

08008638 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008640:	4b48      	ldr	r3, [pc, #288]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a47      	ldr	r2, [pc, #284]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800864a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800864c:	f7f9 fc2a 	bl	8001ea4 <HAL_GetTick>
 8008650:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008652:	e008      	b.n	8008666 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008654:	f7f9 fc26 	bl	8001ea4 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e07a      	b.n	800875c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008666:	4b3f      	ldr	r3, [pc, #252]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f0      	bne.n	8008654 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008672:	4b3c      	ldr	r3, [pc, #240]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008676:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800867a:	f023 0303 	bic.w	r3, r3, #3
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6811      	ldr	r1, [r2, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6852      	ldr	r2, [r2, #4]
 8008686:	0212      	lsls	r2, r2, #8
 8008688:	430a      	orrs	r2, r1
 800868a:	4936      	ldr	r1, [pc, #216]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 800868c:	4313      	orrs	r3, r2
 800868e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	3b01      	subs	r3, #1
 8008696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	3b01      	subs	r3, #1
 80086a0:	025b      	lsls	r3, r3, #9
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	041b      	lsls	r3, r3, #16
 80086ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	061b      	lsls	r3, r3, #24
 80086bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086c0:	4928      	ldr	r1, [pc, #160]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80086c6:	4b27      	ldr	r3, [pc, #156]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ca:	f023 020c 	bic.w	r2, r3, #12
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	4924      	ldr	r1, [pc, #144]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80086d8:	4b22      	ldr	r3, [pc, #136]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	f023 0220 	bic.w	r2, r3, #32
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	491f      	ldr	r1, [pc, #124]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80086ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f2:	491c      	ldr	r1, [pc, #112]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80086f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fc:	4a19      	ldr	r2, [pc, #100]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 80086fe:	f023 0310 	bic.w	r3, r3, #16
 8008702:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008704:	4b17      	ldr	r3, [pc, #92]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008708:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800870c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6a12      	ldr	r2, [r2, #32]
 8008714:	00d2      	lsls	r2, r2, #3
 8008716:	4913      	ldr	r1, [pc, #76]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008718:	4313      	orrs	r3, r2
 800871a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800871c:	4b11      	ldr	r3, [pc, #68]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 800871e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008720:	4a10      	ldr	r2, [pc, #64]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008722:	f043 0310 	orr.w	r3, r3, #16
 8008726:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008728:	4b0e      	ldr	r3, [pc, #56]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a0d      	ldr	r2, [pc, #52]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 800872e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008732:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008734:	f7f9 fbb6 	bl	8001ea4 <HAL_GetTick>
 8008738:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800873a:	e008      	b.n	800874e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800873c:	f7f9 fbb2 	bl	8001ea4 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e006      	b.n	800875c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800874e:	4b05      	ldr	r3, [pc, #20]	@ (8008764 <RCCEx_PLL2_Config+0x12c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f0      	beq.n	800873c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800875a:	2300      	movs	r3, #0

}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	44020c00 	.word	0x44020c00

08008768 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008770:	4b48      	ldr	r3, [pc, #288]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a47      	ldr	r2, [pc, #284]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800877a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800877c:	f7f9 fb92 	bl	8001ea4 <HAL_GetTick>
 8008780:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008782:	e008      	b.n	8008796 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008784:	f7f9 fb8e 	bl	8001ea4 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e07a      	b.n	800888c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008796:	4b3f      	ldr	r3, [pc, #252]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1f0      	bne.n	8008784 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80087a2:	4b3c      	ldr	r3, [pc, #240]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6811      	ldr	r1, [r2, #0]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6852      	ldr	r2, [r2, #4]
 80087b6:	0212      	lsls	r2, r2, #8
 80087b8:	430a      	orrs	r2, r1
 80087ba:	4936      	ldr	r1, [pc, #216]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	630b      	str	r3, [r1, #48]	@ 0x30
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	025b      	lsls	r3, r3, #9
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	3b01      	subs	r3, #1
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	061b      	lsls	r3, r3, #24
 80087ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087f0:	4928      	ldr	r1, [pc, #160]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087f6:	4b27      	ldr	r3, [pc, #156]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fa:	f023 020c 	bic.w	r2, r3, #12
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	4924      	ldr	r1, [pc, #144]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008804:	4313      	orrs	r3, r2
 8008806:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008808:	4b22      	ldr	r3, [pc, #136]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 800880a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880c:	f023 0220 	bic.w	r2, r3, #32
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	491f      	ldr	r1, [pc, #124]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800881a:	4b1e      	ldr	r3, [pc, #120]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 800881c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008822:	491c      	ldr	r1, [pc, #112]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008828:	4b1a      	ldr	r3, [pc, #104]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 800882a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882c:	4a19      	ldr	r2, [pc, #100]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 800882e:	f023 0310 	bic.w	r3, r3, #16
 8008832:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008834:	4b17      	ldr	r3, [pc, #92]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008838:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800883c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6a12      	ldr	r2, [r2, #32]
 8008844:	00d2      	lsls	r2, r2, #3
 8008846:	4913      	ldr	r1, [pc, #76]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008848:	4313      	orrs	r3, r2
 800884a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800884c:	4b11      	ldr	r3, [pc, #68]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 800884e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008850:	4a10      	ldr	r2, [pc, #64]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008852:	f043 0310 	orr.w	r3, r3, #16
 8008856:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008858:	4b0e      	ldr	r3, [pc, #56]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a0d      	ldr	r2, [pc, #52]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 800885e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008862:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008864:	f7f9 fb1e 	bl	8001ea4 <HAL_GetTick>
 8008868:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800886a:	e008      	b.n	800887e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800886c:	f7f9 fb1a 	bl	8001ea4 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d901      	bls.n	800887e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e006      	b.n	800888c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800887e:	4b05      	ldr	r3, [pc, #20]	@ (8008894 <RCCEx_PLL3_Config+0x12c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0f0      	beq.n	800886c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	44020c00 	.word	0x44020c00

08008898 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08a      	sub	sp, #40	@ 0x28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e075      	b.n	8008996 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7f8 ff11 	bl	80016e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2204      	movs	r2, #4
 80088c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f868 	bl	80089a0 <HAL_SD_InitCard>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e05d      	b.n	8008996 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80088da:	f107 0308 	add.w	r3, r7, #8
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 faa5 	bl	8008e30 <HAL_SD_GetCardStatus>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e052      	b.n	8008996 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80088f0:	7e3b      	ldrb	r3, [r7, #24]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80088f6:	7e7b      	ldrb	r3, [r7, #25]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008900:	2b01      	cmp	r3, #1
 8008902:	d10a      	bne.n	800891a <HAL_SD_Init+0x82>
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <HAL_SD_Init+0x78>
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008916:	659a      	str	r2, [r3, #88]	@ 0x58
 8008918:	e00b      	b.n	8008932 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891e:	2b01      	cmp	r3, #1
 8008920:	d104      	bne.n	800892c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008928:	659a      	str	r2, [r3, #88]	@ 0x58
 800892a:	e002      	b.n	8008932 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb37 	bl	8008fac <HAL_SD_ConfigWideBusOperation>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e026      	b.n	8008996 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008948:	f7f9 faac 	bl	8001ea4 <HAL_GetTick>
 800894c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800894e:	e011      	b.n	8008974 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008950:	f7f9 faa8 	bl	8001ea4 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d109      	bne.n	8008974 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008966:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e010      	b.n	8008996 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc35 	bl	80091e4 <HAL_SD_GetCardState>
 800897a:	4603      	mov	r3, r0
 800897c:	2b04      	cmp	r3, #4
 800897e:	d1e7      	bne.n	8008950 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3728      	adds	r7, #40	@ 0x28
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80089a0:	b590      	push	{r4, r7, lr}
 80089a2:	b08d      	sub	sp, #52	@ 0x34
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  if (hsd->Instance == SDMMC1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a45      	ldr	r2, [pc, #276]	@ (8008ad8 <HAL_SD_InitCard+0x138>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d106      	bne.n	80089d4 <HAL_SD_InitCard+0x34>
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80089c6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80089ca:	f04f 0100 	mov.w	r1, #0
 80089ce:	f7fd fb0d 	bl	8005fec <HAL_RCCEx_GetPeriphCLKFreq>
 80089d2:	6278      	str	r0, [r7, #36]	@ 0x24
  if (hsd->Instance == SDMMC2)
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
  }
#endif /* SDMMC2 */
  if (sdmmc_clk == 0U)
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d109      	bne.n	80089ee <HAL_SD_InitCard+0x4e>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80089e8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e070      	b.n	8008ad0 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	0a1b      	lsrs	r3, r3, #8
 80089f2:	4a3a      	ldr	r2, [pc, #232]	@ (8008adc <HAL_SD_InitCard+0x13c>)
 80089f4:	fba2 2303 	umull	r2, r3, r2, r3
 80089f8:	091b      	lsrs	r3, r3, #4
 80089fa:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681c      	ldr	r4, [r3, #0]
 8008a00:	466a      	mov	r2, sp
 8008a02:	f107 0318 	add.w	r3, r7, #24
 8008a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a0a:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a0e:	f107 030c 	add.w	r3, r7, #12
 8008a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a14:	4620      	mov	r0, r4
 8008a16:	f002 f915 	bl	800ac44 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f002 f947 	bl	800acb2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <HAL_SD_InitCard+0x96>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a34:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d007      	beq.n	8008a4c <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008a3c:	4a28      	ldr	r2, [pc, #160]	@ (8008ae0 <HAL_SD_InitCard+0x140>)
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a44:	3301      	adds	r3, #1
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7f9 fa38 	bl	8001ebc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fcb7 	bl	80093c0 <SD_PowerON>
 8008a52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e02e      	b.n	8008ad0 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fbd6 	bl	8009224 <SD_InitCard>
 8008a78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e01b      	b.n	8008ad0 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f002 f99b 	bl	800addc <SDMMC_CmdBlockLength>
 8008aa6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00f      	beq.n	8008ace <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ae4 <HAL_SD_InitCard+0x144>)
 8008ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	431a      	orrs	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	372c      	adds	r7, #44	@ 0x2c
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd90      	pop	{r4, r7, pc}
 8008ad8:	46008000 	.word	0x46008000
 8008adc:	014f8b59 	.word	0x014f8b59
 8008ae0:	00012110 	.word	0x00012110
 8008ae4:	1fe00fff 	.word	0x1fe00fff

08008ae8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008af6:	0f9b      	lsrs	r3, r3, #30
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b02:	0e9b      	lsrs	r3, r3, #26
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b14:	0e1b      	lsrs	r3, r3, #24
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0303 	and.w	r3, r3, #3
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b48:	0d1b      	lsrs	r3, r3, #20
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b54:	0c1b      	lsrs	r3, r3, #16
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b66:	0bdb      	lsrs	r3, r3, #15
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b78:	0b9b      	lsrs	r3, r3, #14
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b8a:	0b5b      	lsrs	r3, r3, #13
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b9c:	0b1b      	lsrs	r3, r3, #12
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2200      	movs	r2, #0
 8008bae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d163      	bne.n	8008c80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bbc:	009a      	lsls	r2, r3, #2
 8008bbe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008bc8:	0f92      	lsrs	r2, r2, #30
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd4:	0edb      	lsrs	r3, r3, #27
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008be6:	0e1b      	lsrs	r3, r3, #24
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf8:	0d5b      	lsrs	r3, r3, #21
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0a:	0c9b      	lsrs	r3, r3, #18
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c1c:	0bdb      	lsrs	r3, r3, #15
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	7e1b      	ldrb	r3, [r3, #24]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	3302      	adds	r3, #2
 8008c40:	2201      	movs	r2, #1
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008c4a:	fb03 f202 	mul.w	r2, r3, r2
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	7a1b      	ldrb	r3, [r3, #8]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	409a      	lsls	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008c6c:	0a52      	lsrs	r2, r2, #9
 8008c6e:	fb03 f202 	mul.w	r2, r3, r2
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8008c7e:	e031      	b.n	8008ce4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d11d      	bne.n	8008cc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c8c:	041b      	lsls	r3, r3, #16
 8008c8e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c96:	0c1b      	lsrs	r3, r3, #16
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	029a      	lsls	r2, r3, #10
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8008cc2:	e00f      	b.n	8008ce4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a58      	ldr	r2, [pc, #352]	@ (8008e2c <HAL_SD_GetCardCSD+0x344>)
 8008cca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e09d      	b.n	8008e20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ce8:	0b9b      	lsrs	r3, r3, #14
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cfa:	09db      	lsrs	r3, r3, #7
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d1c:	0fdb      	lsrs	r3, r3, #31
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d28:	0f5b      	lsrs	r3, r3, #29
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d3a:	0e9b      	lsrs	r3, r3, #26
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d4c:	0d9b      	lsrs	r3, r3, #22
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d5e:	0d5b      	lsrs	r3, r3, #21
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d7a:	0c1b      	lsrs	r3, r3, #16
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d8e:	0bdb      	lsrs	r3, r3, #15
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008da2:	0b9b      	lsrs	r3, r3, #14
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008db6:	0b5b      	lsrs	r3, r3, #13
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dca:	0b1b      	lsrs	r3, r3, #12
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dde:	0a9b      	lsrs	r3, r3, #10
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df2:	0a1b      	lsrs	r3, r3, #8
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	1fe00fff 	.word	0x1fe00fff

08008e30 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b094      	sub	sp, #80	@ 0x50
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d101      	bne.n	8008e50 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e0a7      	b.n	8008fa0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008e50:	f107 0308 	add.w	r3, r7, #8
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb40 	bl	80094dc <SD_SendSDStatus>
 8008e5c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d011      	beq.n	8008e88 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a4f      	ldr	r2, [pc, #316]	@ (8008fa8 <HAL_SD_GetCardStatus+0x178>)
 8008e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008e86:	e070      	b.n	8008f6a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	099b      	lsrs	r3, r3, #6
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	0e1b      	lsrs	r3, r3, #24
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	061a      	lsls	r2, r3, #24
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ece:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ed8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	0e1b      	lsrs	r3, r3, #24
 8008ede:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	0a1b      	lsrs	r3, r3, #8
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	0d1b      	lsrs	r3, r3, #20
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	0c1b      	lsrs	r3, r3, #16
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	0a9b      	lsrs	r3, r3, #10
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	091b      	lsrs	r3, r3, #4
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	0e1b      	lsrs	r3, r3, #24
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f72:	4618      	mov	r0, r3
 8008f74:	f001 ff32 	bl	800addc <SDMMC_CmdBlockLength>
 8008f78:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00d      	beq.n	8008f9c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a08      	ldr	r2, [pc, #32]	@ (8008fa8 <HAL_SD_GetCardStatus+0x178>)
 8008f86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f8c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8008f9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3750      	adds	r7, #80	@ 0x50
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	1fe00fff 	.word	0x1fe00fff

08008fac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b08d      	sub	sp, #52	@ 0x34
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d02e      	beq.n	800902a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fd2:	d106      	bne.n	8008fe2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	635a      	str	r2, [r3, #52]	@ 0x34
 8008fe0:	e029      	b.n	8009036 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fe8:	d10a      	bne.n	8009000 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fb6e 	bl	80096cc <SD_WideBus_Enable>
 8008ff0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ffe:	e01a      	b.n	8009036 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fbab 	bl	8009762 <SD_WideBus_Disable>
 800900c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	635a      	str	r2, [r3, #52]	@ 0x34
 800901a:	e00c      	b.n	8009036 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009020:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	635a      	str	r2, [r3, #52]	@ 0x34
 8009028:	e005      	b.n	8009036 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800902e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a63      	ldr	r2, [pc, #396]	@ (80091d0 <HAL_SD_ConfigWideBusOperation+0x224>)
 8009044:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800904c:	e09e      	b.n	800918c <HAL_SD_ConfigWideBusOperation+0x1e0>
  }
  else
  {
    if (hsd->Instance == SDMMC1)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a60      	ldr	r2, [pc, #384]	@ (80091d4 <HAL_SD_ConfigWideBusOperation+0x228>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d107      	bne.n	8009068 <HAL_SD_ConfigWideBusOperation+0xbc>
    {
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009058:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800905c:	f04f 0100 	mov.w	r1, #0
 8009060:	f7fc ffc4 	bl	8005fec <HAL_RCCEx_GetPeriphCLKFreq>
 8009064:	6278      	str	r0, [r7, #36]	@ 0x24
 8009066:	e001      	b.n	800906c <HAL_SD_ConfigWideBusOperation+0xc0>
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
    }
#endif /* SDMMC2 */
    else
    {
      sdmmc_clk = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (sdmmc_clk != 0U)
 800906c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8083 	beq.w	800917a <HAL_SD_ConfigWideBusOperation+0x1ce>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695a      	ldr	r2, [r3, #20]
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	4951      	ldr	r1, [pc, #324]	@ (80091d8 <HAL_SD_ConfigWideBusOperation+0x22c>)
 8009092:	fba1 1303 	umull	r1, r3, r1, r3
 8009096:	0e1b      	lsrs	r3, r3, #24
 8009098:	429a      	cmp	r2, r3
 800909a:	d303      	bcc.n	80090a4 <HAL_SD_ConfigWideBusOperation+0xf8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	61bb      	str	r3, [r7, #24]
 80090a2:	e05a      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ac:	d103      	bne.n	80090b6 <HAL_SD_ConfigWideBusOperation+0x10a>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	e051      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090be:	d126      	bne.n	800910e <HAL_SD_ConfigWideBusOperation+0x162>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10e      	bne.n	80090e6 <HAL_SD_ConfigWideBusOperation+0x13a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80090c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ca:	4a44      	ldr	r2, [pc, #272]	@ (80091dc <HAL_SD_ConfigWideBusOperation+0x230>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d906      	bls.n	80090de <HAL_SD_ConfigWideBusOperation+0x132>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	4a41      	ldr	r2, [pc, #260]	@ (80091d8 <HAL_SD_ConfigWideBusOperation+0x22c>)
 80090d4:	fba2 2303 	umull	r2, r3, r2, r3
 80090d8:	0e5b      	lsrs	r3, r3, #25
 80090da:	61bb      	str	r3, [r7, #24]
 80090dc:	e03d      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	e039      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f2:	4a3a      	ldr	r2, [pc, #232]	@ (80091dc <HAL_SD_ConfigWideBusOperation+0x230>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d906      	bls.n	8009106 <HAL_SD_ConfigWideBusOperation+0x15a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	4a37      	ldr	r2, [pc, #220]	@ (80091d8 <HAL_SD_ConfigWideBusOperation+0x22c>)
 80090fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009100:	0e5b      	lsrs	r3, r3, #25
 8009102:	61bb      	str	r3, [r7, #24]
 8009104:	e029      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	61bb      	str	r3, [r7, #24]
 800910c:	e025      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10e      	bne.n	8009134 <HAL_SD_ConfigWideBusOperation+0x188>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	4a31      	ldr	r2, [pc, #196]	@ (80091e0 <HAL_SD_ConfigWideBusOperation+0x234>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d906      	bls.n	800912c <HAL_SD_ConfigWideBusOperation+0x180>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	4a2d      	ldr	r2, [pc, #180]	@ (80091d8 <HAL_SD_ConfigWideBusOperation+0x22c>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	0e1b      	lsrs	r3, r3, #24
 8009128:	61bb      	str	r3, [r7, #24]
 800912a:	e016      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	e012      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800913c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009140:	4a27      	ldr	r2, [pc, #156]	@ (80091e0 <HAL_SD_ConfigWideBusOperation+0x234>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d906      	bls.n	8009154 <HAL_SD_ConfigWideBusOperation+0x1a8>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	4a23      	ldr	r2, [pc, #140]	@ (80091d8 <HAL_SD_ConfigWideBusOperation+0x22c>)
 800914a:	fba2 2303 	umull	r2, r3, r2, r3
 800914e:	0e1b      	lsrs	r3, r3, #24
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	e002      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681c      	ldr	r4, [r3, #0]
 800915e:	466a      	mov	r2, sp
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009168:	e882 0003 	stmia.w	r2, {r0, r1}
 800916c:	f107 0308 	add.w	r3, r7, #8
 8009170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009172:	4620      	mov	r0, r4
 8009174:	f001 fd66 	bl	800ac44 <SDMMC_Init>
 8009178:	e008      	b.n	800918c <HAL_SD_ConfigWideBusOperation+0x1e0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800917e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009194:	4618      	mov	r0, r3
 8009196:	f001 fe21 	bl	800addc <SDMMC_CmdBlockLength>
 800919a:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00c      	beq.n	80091bc <HAL_SD_ConfigWideBusOperation+0x210>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a0a      	ldr	r2, [pc, #40]	@ (80091d0 <HAL_SD_ConfigWideBusOperation+0x224>)
 80091a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80091c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	372c      	adds	r7, #44	@ 0x2c
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd90      	pop	{r4, r7, pc}
 80091d0:	1fe00fff 	.word	0x1fe00fff
 80091d4:	46008000 	.word	0x46008000
 80091d8:	55e63b89 	.word	0x55e63b89
 80091dc:	02faf080 	.word	0x02faf080
 80091e0:	017d7840 	.word	0x017d7840

080091e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80091f0:	f107 030c 	add.w	r3, r7, #12
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa40 	bl	800967c <SD_SendStatus>
 80091fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	0a5b      	lsrs	r3, r3, #9
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800921a:	693b      	ldr	r3, [r7, #16]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b090      	sub	sp, #64	@ 0x40
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009230:	f7f8 fe38 	bl	8001ea4 <HAL_GetTick>
 8009234:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4618      	mov	r0, r3
 800923c:	f001 fd4a 	bl	800acd4 <SDMMC_GetPowerState>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009246:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800924a:	e0b5      	b.n	80093b8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	2b03      	cmp	r3, #3
 8009252:	d02e      	beq.n	80092b2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	f001 fecb 	bl	800aff4 <SDMMC_CmdSendCID>
 800925e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <SD_InitCard+0x46>
    {
      return errorstate;
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	e0a6      	b.n	80093b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2100      	movs	r1, #0
 8009270:	4618      	mov	r0, r3
 8009272:	f001 fd74 	bl	800ad5e <SDMMC_GetResponse>
 8009276:	4602      	mov	r2, r0
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2104      	movs	r1, #4
 8009282:	4618      	mov	r0, r3
 8009284:	f001 fd6b 	bl	800ad5e <SDMMC_GetResponse>
 8009288:	4602      	mov	r2, r0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2108      	movs	r1, #8
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fd62 	bl	800ad5e <SDMMC_GetResponse>
 800929a:	4602      	mov	r2, r0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	210c      	movs	r1, #12
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 fd59 	bl	800ad5e <SDMMC_GetResponse>
 80092ac:	4602      	mov	r2, r0
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d01d      	beq.n	80092f6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80092ba:	e019      	b.n	80092f0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f107 020a 	add.w	r2, r7, #10
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 fed3 	bl	800b072 <SDMMC_CmdSetRelAdd>
 80092cc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80092ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80092d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d6:	e06f      	b.n	80093b8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80092d8:	f7f8 fde4 	bl	8001ea4 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d902      	bls.n	80092f0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80092ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80092ee:	e063      	b.n	80093b8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80092f0:	897b      	ldrh	r3, [r7, #10]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0e2      	beq.n	80092bc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d036      	beq.n	800936c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80092fe:	897b      	ldrh	r3, [r7, #10]
 8009300:	461a      	mov	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930e:	041b      	lsls	r3, r3, #16
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f001 fe8d 	bl	800b032 <SDMMC_CmdSendCSD>
 8009318:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800931a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <SD_InitCard+0x100>
    {
      return errorstate;
 8009320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009322:	e049      	b.n	80093b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2100      	movs	r1, #0
 800932a:	4618      	mov	r0, r3
 800932c:	f001 fd17 	bl	800ad5e <SDMMC_GetResponse>
 8009330:	4602      	mov	r2, r0
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2104      	movs	r1, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f001 fd0e 	bl	800ad5e <SDMMC_GetResponse>
 8009342:	4602      	mov	r2, r0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2108      	movs	r1, #8
 800934e:	4618      	mov	r0, r3
 8009350:	f001 fd05 	bl	800ad5e <SDMMC_GetResponse>
 8009354:	4602      	mov	r2, r0
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	210c      	movs	r1, #12
 8009360:	4618      	mov	r0, r3
 8009362:	f001 fcfc 	bl	800ad5e <SDMMC_GetResponse>
 8009366:	4602      	mov	r2, r0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2104      	movs	r1, #4
 8009372:	4618      	mov	r0, r3
 8009374:	f001 fcf3 	bl	800ad5e <SDMMC_GetResponse>
 8009378:	4603      	mov	r3, r0
 800937a:	0d1a      	lsrs	r2, r3, #20
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009380:	f107 030c 	add.w	r3, r7, #12
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff fbae 	bl	8008ae8 <HAL_SD_GetCardCSD>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009392:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009396:	e00f      	b.n	80093b8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a0:	041b      	lsls	r3, r3, #16
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f001 fd3c 	bl	800ae22 <SDMMC_CmdSelDesel>
 80093aa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <SD_InitCard+0x192>
  {
    return errorstate;
 80093b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b4:	e000      	b.n	80093b8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3740      	adds	r7, #64	@ 0x40
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 fd45 	bl	800ae68 <SDMMC_CmdGoIdleState>
 80093de:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <SD_PowerON+0x2a>
  {
    return errorstate;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	e072      	b.n	80094d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 fd58 	bl	800aea4 <SDMMC_CmdOperCond>
 80093f4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093fc:	d10d      	bne.n	800941a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f001 fd2d 	bl	800ae68 <SDMMC_CmdGoIdleState>
 800940e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <SD_PowerON+0x60>
    {
      return errorstate;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	e05a      	b.n	80094d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009424:	2b01      	cmp	r3, #1
 8009426:	d137      	bne.n	8009498 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f001 fd58 	bl	800aee4 <SDMMC_CmdAppCommand>
 8009434:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d02d      	beq.n	8009498 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800943c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009440:	e046      	b.n	80094d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f001 fd4b 	bl	800aee4 <SDMMC_CmdAppCommand>
 800944e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <SD_PowerON+0x9a>
    {
      return errorstate;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	e03a      	b.n	80094d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	491e      	ldr	r1, [pc, #120]	@ (80094d8 <SD_PowerON+0x118>)
 8009460:	4618      	mov	r0, r3
 8009462:	f001 fd62 	bl	800af2a <SDMMC_CmdAppOperCommand>
 8009466:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800946e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009472:	e02d      	b.n	80094d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fc6f 	bl	800ad5e <SDMMC_GetResponse>
 8009480:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	0fdb      	lsrs	r3, r3, #31
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <SD_PowerON+0xce>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <SD_PowerON+0xd0>
 800948e:	2300      	movs	r3, #0
 8009490:	613b      	str	r3, [r7, #16]

    count++;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	3301      	adds	r3, #1
 8009496:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800949e:	4293      	cmp	r3, r2
 80094a0:	d802      	bhi.n	80094a8 <SD_PowerON+0xe8>
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0cc      	beq.n	8009442 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d902      	bls.n	80094b8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094b6:	e00b      	b.n	80094d0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	c1100000 	.word	0xc1100000

080094dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08c      	sub	sp, #48	@ 0x30
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094e6:	f7f8 fcdd 	bl	8001ea4 <HAL_GetTick>
 80094ea:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2100      	movs	r1, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f001 fc31 	bl	800ad5e <SDMMC_GetResponse>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009502:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009506:	d102      	bne.n	800950e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009508:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800950c:	e0b0      	b.n	8009670 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2140      	movs	r1, #64	@ 0x40
 8009514:	4618      	mov	r0, r3
 8009516:	f001 fc61 	bl	800addc <SDMMC_CmdBlockLength>
 800951a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d005      	beq.n	800952e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	e0a0      	b.n	8009670 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009536:	041b      	lsls	r3, r3, #16
 8009538:	4619      	mov	r1, r3
 800953a:	4610      	mov	r0, r2
 800953c:	f001 fcd2 	bl	800aee4 <SDMMC_CmdAppCommand>
 8009540:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	e08d      	b.n	8009670 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009554:	f04f 33ff 	mov.w	r3, #4294967295
 8009558:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800955a:	2340      	movs	r3, #64	@ 0x40
 800955c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800955e:	2360      	movs	r3, #96	@ 0x60
 8009560:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009562:	2302      	movs	r3, #2
 8009564:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009566:	2300      	movs	r3, #0
 8009568:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800956a:	2301      	movs	r3, #1
 800956c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f107 0208 	add.w	r2, r7, #8
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f001 fc03 	bl	800ad84 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fdba 	bl	800b0fc <SDMMC_CmdStatusRegister>
 8009588:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d02b      	beq.n	80095e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	e069      	b.n	8009670 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d013      	beq.n	80095d2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80095aa:	2300      	movs	r3, #0
 80095ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ae:	e00d      	b.n	80095cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 fb6f 	bl	800ac98 <SDMMC_ReadFIFO>
 80095ba:	4602      	mov	r2, r0
 80095bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095be:	601a      	str	r2, [r3, #0]
        pData++;
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	3304      	adds	r3, #4
 80095c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80095c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c8:	3301      	adds	r3, #1
 80095ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ce:	2b07      	cmp	r3, #7
 80095d0:	d9ee      	bls.n	80095b0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80095d2:	f7f8 fc67 	bl	8001ea4 <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e0:	d102      	bne.n	80095e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80095e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095e6:	e043      	b.n	8009670 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ee:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0d2      	beq.n	800959c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fc:	f003 0308 	and.w	r3, r3, #8
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009604:	2308      	movs	r3, #8
 8009606:	e033      	b.n	8009670 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009616:	2302      	movs	r3, #2
 8009618:	e02a      	b.n	8009670 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b00      	cmp	r3, #0
 8009626:	d017      	beq.n	8009658 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009628:	2320      	movs	r3, #32
 800962a:	e021      	b.n	8009670 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f001 fb31 	bl	800ac98 <SDMMC_ReadFIFO>
 8009636:	4602      	mov	r2, r0
 8009638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963a:	601a      	str	r2, [r3, #0]
    pData++;
 800963c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963e:	3304      	adds	r3, #4
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009642:	f7f8 fc2f 	bl	8001ea4 <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d102      	bne.n	8009658 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009652:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009656:	e00b      	b.n	8009670 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800965e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e2      	bne.n	800962c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a03      	ldr	r2, [pc, #12]	@ (8009678 <SD_SendSDStatus+0x19c>)
 800966c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3730      	adds	r7, #48	@ 0x30
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	18000f3a 	.word	0x18000f3a

0800967c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d102      	bne.n	8009692 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800968c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009690:	e018      	b.n	80096c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800969a:	041b      	lsls	r3, r3, #16
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f001 fd09 	bl	800b0b6 <SDMMC_CmdSendStatus>
 80096a4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	e009      	b.n	80096c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 fb51 	bl	800ad5e <SDMMC_GetResponse>
 80096bc:	4602      	mov	r2, r0
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	2300      	movs	r3, #0
 80096da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2100      	movs	r1, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f001 fb3b 	bl	800ad5e <SDMMC_GetResponse>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096f2:	d102      	bne.n	80096fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80096f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80096f8:	e02f      	b.n	800975a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80096fa:	f107 030c 	add.w	r3, r7, #12
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f879 	bl	80097f8 <SD_FindSCR>
 8009706:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	e023      	b.n	800975a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01c      	beq.n	8009756 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f001 fbdb 	bl	800aee4 <SDMMC_CmdAppCommand>
 800972e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	e00f      	b.n	800975a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2102      	movs	r1, #2
 8009740:	4618      	mov	r0, r3
 8009742:	f001 fc12 	bl	800af6a <SDMMC_CmdBusWidth>
 8009746:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	e003      	b.n	800975a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009752:	2300      	movs	r3, #0
 8009754:	e001      	b.n	800975a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009756:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b086      	sub	sp, #24
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	2300      	movs	r3, #0
 8009770:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2100      	movs	r1, #0
 8009778:	4618      	mov	r0, r3
 800977a:	f001 faf0 	bl	800ad5e <SDMMC_GetResponse>
 800977e:	4603      	mov	r3, r0
 8009780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009784:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009788:	d102      	bne.n	8009790 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800978a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800978e:	e02f      	b.n	80097f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009790:	f107 030c 	add.w	r3, r7, #12
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f82e 	bl	80097f8 <SD_FindSCR>
 800979c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	e023      	b.n	80097f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d01c      	beq.n	80097ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ba:	041b      	lsls	r3, r3, #16
 80097bc:	4619      	mov	r1, r3
 80097be:	4610      	mov	r0, r2
 80097c0:	f001 fb90 	bl	800aee4 <SDMMC_CmdAppCommand>
 80097c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	e00f      	b.n	80097f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2100      	movs	r1, #0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 fbc7 	bl	800af6a <SDMMC_CmdBusWidth>
 80097dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	e003      	b.n	80097f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e001      	b.n	80097f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08e      	sub	sp, #56	@ 0x38
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009802:	f7f8 fb4f 	bl	8001ea4 <HAL_GetTick>
 8009806:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800980c:	2300      	movs	r3, #0
 800980e:	60bb      	str	r3, [r7, #8]
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2108      	movs	r1, #8
 800981e:	4618      	mov	r0, r3
 8009820:	f001 fadc 	bl	800addc <SDMMC_CmdBlockLength>
 8009824:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <SD_FindSCR+0x38>
  {
    return errorstate;
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	e0ad      	b.n	800998c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009838:	041b      	lsls	r3, r3, #16
 800983a:	4619      	mov	r1, r3
 800983c:	4610      	mov	r0, r2
 800983e:	f001 fb51 	bl	800aee4 <SDMMC_CmdAppCommand>
 8009842:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <SD_FindSCR+0x56>
  {
    return errorstate;
 800984a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984c:	e09e      	b.n	800998c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800984e:	f04f 33ff 	mov.w	r3, #4294967295
 8009852:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009854:	2308      	movs	r3, #8
 8009856:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009858:	2330      	movs	r3, #48	@ 0x30
 800985a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800985c:	2302      	movs	r3, #2
 800985e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009860:	2300      	movs	r3, #0
 8009862:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009864:	2301      	movs	r3, #1
 8009866:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f107 0210 	add.w	r2, r7, #16
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f001 fa86 	bl	800ad84 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4618      	mov	r0, r3
 800987e:	f001 fb97 	bl	800afb0 <SDMMC_CmdSendSCR>
 8009882:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d027      	beq.n	80098da <SD_FindSCR+0xe2>
  {
    return errorstate;
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	e07e      	b.n	800998c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009894:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d113      	bne.n	80098c4 <SD_FindSCR+0xcc>
 800989c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d110      	bne.n	80098c4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 f9f6 	bl	800ac98 <SDMMC_ReadFIFO>
 80098ac:	4603      	mov	r3, r0
 80098ae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 f9ef 	bl	800ac98 <SDMMC_ReadFIFO>
 80098ba:	4603      	mov	r3, r0
 80098bc:	60fb      	str	r3, [r7, #12]
      index++;
 80098be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c0:	3301      	adds	r3, #1
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80098c4:	f7f8 faee 	bl	8001ea4 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d2:	d102      	bne.n	80098da <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80098d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80098d8:	e058      	b.n	800998c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098e0:	f240 532a 	movw	r3, #1322	@ 0x52a
 80098e4:	4013      	ands	r3, r2
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0d1      	beq.n	800988e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f0:	f003 0308 	and.w	r3, r3, #8
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d005      	beq.n	8009904 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2208      	movs	r2, #8
 80098fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009900:	2308      	movs	r3, #8
 8009902:	e043      	b.n	800998c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2202      	movs	r2, #2
 8009918:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800991a:	2302      	movs	r3, #2
 800991c:	e036      	b.n	800998c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009924:	f003 0320 	and.w	r3, r3, #32
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2220      	movs	r2, #32
 8009932:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009934:	2320      	movs	r3, #32
 8009936:	e029      	b.n	800998c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a15      	ldr	r2, [pc, #84]	@ (8009994 <SD_FindSCR+0x19c>)
 800993e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	061a      	lsls	r2, r3, #24
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800994c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009956:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	0e1b      	lsrs	r3, r3, #24
 800995c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800995e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009960:	601a      	str	r2, [r3, #0]
    scr++;
 8009962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009964:	3304      	adds	r3, #4
 8009966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	061a      	lsls	r2, r3, #24
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009974:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	0a1b      	lsrs	r3, r3, #8
 800997a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800997e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	0e1b      	lsrs	r3, r3, #24
 8009984:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009988:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3738      	adds	r7, #56	@ 0x38
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	18000f3a 	.word	0x18000f3a

08009998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e049      	b.n	8009a3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d106      	bne.n	80099c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7f7 ff4e 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f000 fac8 	bl	8009f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e049      	b.n	8009aec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d106      	bne.n	8009a72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f841 	bl	8009af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f000 fa71 	bl	8009f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d101      	bne.n	8009b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b22:	2302      	movs	r3, #2
 8009b24:	e0ff      	b.n	8009d26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b14      	cmp	r3, #20
 8009b32:	f200 80f0 	bhi.w	8009d16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b36:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b91 	.word	0x08009b91
 8009b40:	08009d17 	.word	0x08009d17
 8009b44:	08009d17 	.word	0x08009d17
 8009b48:	08009d17 	.word	0x08009d17
 8009b4c:	08009bd1 	.word	0x08009bd1
 8009b50:	08009d17 	.word	0x08009d17
 8009b54:	08009d17 	.word	0x08009d17
 8009b58:	08009d17 	.word	0x08009d17
 8009b5c:	08009c13 	.word	0x08009c13
 8009b60:	08009d17 	.word	0x08009d17
 8009b64:	08009d17 	.word	0x08009d17
 8009b68:	08009d17 	.word	0x08009d17
 8009b6c:	08009c53 	.word	0x08009c53
 8009b70:	08009d17 	.word	0x08009d17
 8009b74:	08009d17 	.word	0x08009d17
 8009b78:	08009d17 	.word	0x08009d17
 8009b7c:	08009c95 	.word	0x08009c95
 8009b80:	08009d17 	.word	0x08009d17
 8009b84:	08009d17 	.word	0x08009d17
 8009b88:	08009d17 	.word	0x08009d17
 8009b8c:	08009cd5 	.word	0x08009cd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fb12 	bl	800a1c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699a      	ldr	r2, [r3, #24]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0208 	orr.w	r2, r2, #8
 8009baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 0204 	bic.w	r2, r2, #4
 8009bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6999      	ldr	r1, [r3, #24]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	691a      	ldr	r2, [r3, #16]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	619a      	str	r2, [r3, #24]
      break;
 8009bce:	e0a5      	b.n	8009d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fbb4 	bl	800a344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6999      	ldr	r1, [r3, #24]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	021a      	lsls	r2, r3, #8
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	619a      	str	r2, [r3, #24]
      break;
 8009c10:	e084      	b.n	8009d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 fc43 	bl	800a4a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f042 0208 	orr.w	r2, r2, #8
 8009c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69da      	ldr	r2, [r3, #28]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0204 	bic.w	r2, r2, #4
 8009c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	69d9      	ldr	r1, [r3, #28]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	691a      	ldr	r2, [r3, #16]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	61da      	str	r2, [r3, #28]
      break;
 8009c50:	e064      	b.n	8009d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fcd1 	bl	800a600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69da      	ldr	r2, [r3, #28]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69d9      	ldr	r1, [r3, #28]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	021a      	lsls	r2, r3, #8
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	61da      	str	r2, [r3, #28]
      break;
 8009c92:	e043      	b.n	8009d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68b9      	ldr	r1, [r7, #8]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fd60 	bl	800a760 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0208 	orr.w	r2, r2, #8
 8009cae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 0204 	bic.w	r2, r2, #4
 8009cbe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	691a      	ldr	r2, [r3, #16]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009cd2:	e023      	b.n	8009d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fdc2 	bl	800a864 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cfe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	021a      	lsls	r2, r3, #8
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009d14:	e002      	b.n	8009d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop

08009d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d101      	bne.n	8009d4c <HAL_TIM_ConfigClockSource+0x1c>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e0fe      	b.n	8009f4a <HAL_TIM_ConfigClockSource+0x21a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009d6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d88:	f000 80c9 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d90:	f200 80ce 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009d94:	4a6f      	ldr	r2, [pc, #444]	@ (8009f54 <HAL_TIM_ConfigClockSource+0x224>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	f000 80c1 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8009f54 <HAL_TIM_ConfigClockSource+0x224>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	f200 80c6 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009da4:	4a6c      	ldr	r2, [pc, #432]	@ (8009f58 <HAL_TIM_ConfigClockSource+0x228>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	f000 80b9 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009dac:	4a6a      	ldr	r2, [pc, #424]	@ (8009f58 <HAL_TIM_ConfigClockSource+0x228>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	f200 80be 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009db4:	4a69      	ldr	r2, [pc, #420]	@ (8009f5c <HAL_TIM_ConfigClockSource+0x22c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	f000 80b1 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009dbc:	4a67      	ldr	r2, [pc, #412]	@ (8009f5c <HAL_TIM_ConfigClockSource+0x22c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	f200 80b6 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009dc4:	4a66      	ldr	r2, [pc, #408]	@ (8009f60 <HAL_TIM_ConfigClockSource+0x230>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	f000 80a9 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009dcc:	4a64      	ldr	r2, [pc, #400]	@ (8009f60 <HAL_TIM_ConfigClockSource+0x230>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	f200 80ae 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009dd4:	4a63      	ldr	r2, [pc, #396]	@ (8009f64 <HAL_TIM_ConfigClockSource+0x234>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	f000 80a1 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009ddc:	4a61      	ldr	r2, [pc, #388]	@ (8009f64 <HAL_TIM_ConfigClockSource+0x234>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	f200 80a6 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009de4:	4a60      	ldr	r2, [pc, #384]	@ (8009f68 <HAL_TIM_ConfigClockSource+0x238>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	f000 8099 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009dec:	4a5e      	ldr	r2, [pc, #376]	@ (8009f68 <HAL_TIM_ConfigClockSource+0x238>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	f200 809e 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009df4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009df8:	f000 8091 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009dfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009e00:	f200 8096 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e08:	f000 8089 	beq.w	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009e0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e10:	f200 808e 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e18:	d03e      	beq.n	8009e98 <HAL_TIM_ConfigClockSource+0x168>
 8009e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e1e:	f200 8087 	bhi.w	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e26:	f000 8086 	beq.w	8009f36 <HAL_TIM_ConfigClockSource+0x206>
 8009e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e2e:	d87f      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e30:	2b70      	cmp	r3, #112	@ 0x70
 8009e32:	d01a      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0x13a>
 8009e34:	2b70      	cmp	r3, #112	@ 0x70
 8009e36:	d87b      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e38:	2b60      	cmp	r3, #96	@ 0x60
 8009e3a:	d050      	beq.n	8009ede <HAL_TIM_ConfigClockSource+0x1ae>
 8009e3c:	2b60      	cmp	r3, #96	@ 0x60
 8009e3e:	d877      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e40:	2b50      	cmp	r3, #80	@ 0x50
 8009e42:	d03c      	beq.n	8009ebe <HAL_TIM_ConfigClockSource+0x18e>
 8009e44:	2b50      	cmp	r3, #80	@ 0x50
 8009e46:	d873      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e48:	2b40      	cmp	r3, #64	@ 0x40
 8009e4a:	d058      	beq.n	8009efe <HAL_TIM_ConfigClockSource+0x1ce>
 8009e4c:	2b40      	cmp	r3, #64	@ 0x40
 8009e4e:	d86f      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e50:	2b30      	cmp	r3, #48	@ 0x30
 8009e52:	d064      	beq.n	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009e54:	2b30      	cmp	r3, #48	@ 0x30
 8009e56:	d86b      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d060      	beq.n	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009e5c:	2b20      	cmp	r3, #32
 8009e5e:	d867      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d05c      	beq.n	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009e64:	2b10      	cmp	r3, #16
 8009e66:	d05a      	beq.n	8009f1e <HAL_TIM_ConfigClockSource+0x1ee>
 8009e68:	e062      	b.n	8009f30 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e7a:	f000 fdf3 	bl	800aa64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	609a      	str	r2, [r3, #8]
      break;
 8009e96:	e04f      	b.n	8009f38 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ea8:	f000 fddc 	bl	800aa64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009eba:	609a      	str	r2, [r3, #8]
      break;
 8009ebc:	e03c      	b.n	8009f38 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f000 fd4e 	bl	800a96c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2150      	movs	r1, #80	@ 0x50
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fda7 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 8009edc:	e02c      	b.n	8009f38 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eea:	461a      	mov	r2, r3
 8009eec:	f000 fd6d 	bl	800a9ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2160      	movs	r1, #96	@ 0x60
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fd97 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 8009efc:	e01c      	b.n	8009f38 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f000 fd2e 	bl	800a96c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2140      	movs	r1, #64	@ 0x40
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 fd87 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 8009f1c:	e00c      	b.n	8009f38 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f000 fd7e 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 8009f2e:	e003      	b.n	8009f38 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	73fb      	strb	r3, [r7, #15]
      break;
 8009f34:	e000      	b.n	8009f38 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8009f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	00100070 	.word	0x00100070
 8009f58:	00100060 	.word	0x00100060
 8009f5c:	00100050 	.word	0x00100050
 8009f60:	00100040 	.word	0x00100040
 8009f64:	00100030 	.word	0x00100030
 8009f68:	00100020 	.word	0x00100020

08009f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a7a      	ldr	r2, [pc, #488]	@ (800a168 <TIM_Base_SetConfig+0x1fc>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d02b      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a79      	ldr	r2, [pc, #484]	@ (800a16c <TIM_Base_SetConfig+0x200>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d027      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f92:	d023      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f9a:	d01f      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a74      	ldr	r2, [pc, #464]	@ (800a170 <TIM_Base_SetConfig+0x204>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d01b      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a73      	ldr	r2, [pc, #460]	@ (800a174 <TIM_Base_SetConfig+0x208>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d017      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a72      	ldr	r2, [pc, #456]	@ (800a178 <TIM_Base_SetConfig+0x20c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d013      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a71      	ldr	r2, [pc, #452]	@ (800a17c <TIM_Base_SetConfig+0x210>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00f      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a70      	ldr	r2, [pc, #448]	@ (800a180 <TIM_Base_SetConfig+0x214>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00b      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a6f      	ldr	r2, [pc, #444]	@ (800a184 <TIM_Base_SetConfig+0x218>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d007      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a6e      	ldr	r2, [pc, #440]	@ (800a188 <TIM_Base_SetConfig+0x21c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d003      	beq.n	8009fdc <TIM_Base_SetConfig+0x70>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a6d      	ldr	r2, [pc, #436]	@ (800a18c <TIM_Base_SetConfig+0x220>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d108      	bne.n	8009fee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a5d      	ldr	r2, [pc, #372]	@ (800a168 <TIM_Base_SetConfig+0x1fc>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d05b      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800a16c <TIM_Base_SetConfig+0x200>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d057      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a004:	d053      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a00c:	d04f      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a57      	ldr	r2, [pc, #348]	@ (800a170 <TIM_Base_SetConfig+0x204>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d04b      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a56      	ldr	r2, [pc, #344]	@ (800a174 <TIM_Base_SetConfig+0x208>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d047      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a55      	ldr	r2, [pc, #340]	@ (800a178 <TIM_Base_SetConfig+0x20c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d043      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a54      	ldr	r2, [pc, #336]	@ (800a17c <TIM_Base_SetConfig+0x210>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d03f      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a53      	ldr	r2, [pc, #332]	@ (800a180 <TIM_Base_SetConfig+0x214>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d03b      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a52      	ldr	r2, [pc, #328]	@ (800a184 <TIM_Base_SetConfig+0x218>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d037      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a51      	ldr	r2, [pc, #324]	@ (800a188 <TIM_Base_SetConfig+0x21c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d033      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a50      	ldr	r2, [pc, #320]	@ (800a18c <TIM_Base_SetConfig+0x220>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d02f      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a4f      	ldr	r2, [pc, #316]	@ (800a190 <TIM_Base_SetConfig+0x224>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d02b      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a4e      	ldr	r2, [pc, #312]	@ (800a194 <TIM_Base_SetConfig+0x228>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d027      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a4d      	ldr	r2, [pc, #308]	@ (800a198 <TIM_Base_SetConfig+0x22c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d023      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a4c      	ldr	r2, [pc, #304]	@ (800a19c <TIM_Base_SetConfig+0x230>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d01f      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a4b      	ldr	r2, [pc, #300]	@ (800a1a0 <TIM_Base_SetConfig+0x234>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d01b      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a4a      	ldr	r2, [pc, #296]	@ (800a1a4 <TIM_Base_SetConfig+0x238>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d017      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a49      	ldr	r2, [pc, #292]	@ (800a1a8 <TIM_Base_SetConfig+0x23c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d013      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a48      	ldr	r2, [pc, #288]	@ (800a1ac <TIM_Base_SetConfig+0x240>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d00f      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a47      	ldr	r2, [pc, #284]	@ (800a1b0 <TIM_Base_SetConfig+0x244>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d00b      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a46      	ldr	r2, [pc, #280]	@ (800a1b4 <TIM_Base_SetConfig+0x248>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d007      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a45      	ldr	r2, [pc, #276]	@ (800a1b8 <TIM_Base_SetConfig+0x24c>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d003      	beq.n	800a0ae <TIM_Base_SetConfig+0x142>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a44      	ldr	r2, [pc, #272]	@ (800a1bc <TIM_Base_SetConfig+0x250>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d108      	bne.n	800a0c0 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a20      	ldr	r2, [pc, #128]	@ (800a168 <TIM_Base_SetConfig+0x1fc>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d023      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a16c <TIM_Base_SetConfig+0x200>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d01f      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a24      	ldr	r2, [pc, #144]	@ (800a188 <TIM_Base_SetConfig+0x21c>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d01b      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a23      	ldr	r2, [pc, #140]	@ (800a18c <TIM_Base_SetConfig+0x220>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d017      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a28      	ldr	r2, [pc, #160]	@ (800a1a8 <TIM_Base_SetConfig+0x23c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d013      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a27      	ldr	r2, [pc, #156]	@ (800a1ac <TIM_Base_SetConfig+0x240>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d00f      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a26      	ldr	r2, [pc, #152]	@ (800a1b0 <TIM_Base_SetConfig+0x244>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00b      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a25      	ldr	r2, [pc, #148]	@ (800a1b4 <TIM_Base_SetConfig+0x248>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d007      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a24      	ldr	r2, [pc, #144]	@ (800a1b8 <TIM_Base_SetConfig+0x24c>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d003      	beq.n	800a134 <TIM_Base_SetConfig+0x1c8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a23      	ldr	r2, [pc, #140]	@ (800a1bc <TIM_Base_SetConfig+0x250>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d103      	bne.n	800a13c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	691a      	ldr	r2, [r3, #16]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d105      	bne.n	800a15a <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	f023 0201 	bic.w	r2, r3, #1
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	611a      	str	r2, [r3, #16]
  }
}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40012c00 	.word	0x40012c00
 800a16c:	50012c00 	.word	0x50012c00
 800a170:	40000400 	.word	0x40000400
 800a174:	50000400 	.word	0x50000400
 800a178:	40000800 	.word	0x40000800
 800a17c:	50000800 	.word	0x50000800
 800a180:	40000c00 	.word	0x40000c00
 800a184:	50000c00 	.word	0x50000c00
 800a188:	40013400 	.word	0x40013400
 800a18c:	50013400 	.word	0x50013400
 800a190:	40001800 	.word	0x40001800
 800a194:	50001800 	.word	0x50001800
 800a198:	40001c00 	.word	0x40001c00
 800a19c:	50001c00 	.word	0x50001c00
 800a1a0:	40002000 	.word	0x40002000
 800a1a4:	50002000 	.word	0x50002000
 800a1a8:	40014000 	.word	0x40014000
 800a1ac:	50014000 	.word	0x50014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	50014400 	.word	0x50014400
 800a1b8:	40014800 	.word	0x40014800
 800a1bc:	50014800 	.word	0x50014800

0800a1c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	f023 0201 	bic.w	r2, r3, #1
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0303 	bic.w	r3, r3, #3
 800a1fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f023 0302 	bic.w	r3, r3, #2
 800a20c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	4313      	orrs	r3, r2
 800a216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a40      	ldr	r2, [pc, #256]	@ (800a31c <TIM_OC1_SetConfig+0x15c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d023      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a3f      	ldr	r2, [pc, #252]	@ (800a320 <TIM_OC1_SetConfig+0x160>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d01f      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a3e      	ldr	r2, [pc, #248]	@ (800a324 <TIM_OC1_SetConfig+0x164>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d01b      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a3d      	ldr	r2, [pc, #244]	@ (800a328 <TIM_OC1_SetConfig+0x168>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d017      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a3c      	ldr	r2, [pc, #240]	@ (800a32c <TIM_OC1_SetConfig+0x16c>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d013      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a3b      	ldr	r2, [pc, #236]	@ (800a330 <TIM_OC1_SetConfig+0x170>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d00f      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a3a      	ldr	r2, [pc, #232]	@ (800a334 <TIM_OC1_SetConfig+0x174>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d00b      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4a39      	ldr	r2, [pc, #228]	@ (800a338 <TIM_OC1_SetConfig+0x178>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d007      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a38      	ldr	r2, [pc, #224]	@ (800a33c <TIM_OC1_SetConfig+0x17c>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d003      	beq.n	800a268 <TIM_OC1_SetConfig+0xa8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a37      	ldr	r2, [pc, #220]	@ (800a340 <TIM_OC1_SetConfig+0x180>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d10c      	bne.n	800a282 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f023 0308 	bic.w	r3, r3, #8
 800a26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	4313      	orrs	r3, r2
 800a278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f023 0304 	bic.w	r3, r3, #4
 800a280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a25      	ldr	r2, [pc, #148]	@ (800a31c <TIM_OC1_SetConfig+0x15c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d023      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a24      	ldr	r2, [pc, #144]	@ (800a320 <TIM_OC1_SetConfig+0x160>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d01f      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a23      	ldr	r2, [pc, #140]	@ (800a324 <TIM_OC1_SetConfig+0x164>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d01b      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a22      	ldr	r2, [pc, #136]	@ (800a328 <TIM_OC1_SetConfig+0x168>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d017      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a21      	ldr	r2, [pc, #132]	@ (800a32c <TIM_OC1_SetConfig+0x16c>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d013      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a20      	ldr	r2, [pc, #128]	@ (800a330 <TIM_OC1_SetConfig+0x170>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d00f      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a1f      	ldr	r2, [pc, #124]	@ (800a334 <TIM_OC1_SetConfig+0x174>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d00b      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a1e      	ldr	r2, [pc, #120]	@ (800a338 <TIM_OC1_SetConfig+0x178>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d007      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a33c <TIM_OC1_SetConfig+0x17c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d003      	beq.n	800a2d2 <TIM_OC1_SetConfig+0x112>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a1c      	ldr	r2, [pc, #112]	@ (800a340 <TIM_OC1_SetConfig+0x180>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d111      	bne.n	800a2f6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	621a      	str	r2, [r3, #32]
}
 800a310:	bf00      	nop
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	40012c00 	.word	0x40012c00
 800a320:	50012c00 	.word	0x50012c00
 800a324:	40013400 	.word	0x40013400
 800a328:	50013400 	.word	0x50013400
 800a32c:	40014000 	.word	0x40014000
 800a330:	50014000 	.word	0x50014000
 800a334:	40014400 	.word	0x40014400
 800a338:	50014400 	.word	0x50014400
 800a33c:	40014800 	.word	0x40014800
 800a340:	50014800 	.word	0x50014800

0800a344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	f023 0210 	bic.w	r2, r3, #16
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f023 0320 	bic.w	r3, r3, #32
 800a392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a36      	ldr	r2, [pc, #216]	@ (800a47c <TIM_OC2_SetConfig+0x138>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00b      	beq.n	800a3c0 <TIM_OC2_SetConfig+0x7c>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a35      	ldr	r2, [pc, #212]	@ (800a480 <TIM_OC2_SetConfig+0x13c>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d007      	beq.n	800a3c0 <TIM_OC2_SetConfig+0x7c>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a34      	ldr	r2, [pc, #208]	@ (800a484 <TIM_OC2_SetConfig+0x140>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <TIM_OC2_SetConfig+0x7c>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a33      	ldr	r2, [pc, #204]	@ (800a488 <TIM_OC2_SetConfig+0x144>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d10d      	bne.n	800a3dc <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a27      	ldr	r2, [pc, #156]	@ (800a47c <TIM_OC2_SetConfig+0x138>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d023      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a26      	ldr	r2, [pc, #152]	@ (800a480 <TIM_OC2_SetConfig+0x13c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d01f      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a25      	ldr	r2, [pc, #148]	@ (800a484 <TIM_OC2_SetConfig+0x140>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d01b      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a24      	ldr	r2, [pc, #144]	@ (800a488 <TIM_OC2_SetConfig+0x144>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d017      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a23      	ldr	r2, [pc, #140]	@ (800a48c <TIM_OC2_SetConfig+0x148>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d013      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a22      	ldr	r2, [pc, #136]	@ (800a490 <TIM_OC2_SetConfig+0x14c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d00f      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a21      	ldr	r2, [pc, #132]	@ (800a494 <TIM_OC2_SetConfig+0x150>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d00b      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a20      	ldr	r2, [pc, #128]	@ (800a498 <TIM_OC2_SetConfig+0x154>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d007      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a1f      	ldr	r2, [pc, #124]	@ (800a49c <TIM_OC2_SetConfig+0x158>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d003      	beq.n	800a42c <TIM_OC2_SetConfig+0xe8>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a1e      	ldr	r2, [pc, #120]	@ (800a4a0 <TIM_OC2_SetConfig+0x15c>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d113      	bne.n	800a454 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a43a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	4313      	orrs	r3, r2
 800a446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4313      	orrs	r3, r2
 800a452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	621a      	str	r2, [r3, #32]
}
 800a46e:	bf00      	nop
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40012c00 	.word	0x40012c00
 800a480:	50012c00 	.word	0x50012c00
 800a484:	40013400 	.word	0x40013400
 800a488:	50013400 	.word	0x50013400
 800a48c:	40014000 	.word	0x40014000
 800a490:	50014000 	.word	0x50014000
 800a494:	40014400 	.word	0x40014400
 800a498:	50014400 	.word	0x50014400
 800a49c:	40014800 	.word	0x40014800
 800a4a0:	50014800 	.word	0x50014800

0800a4a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a4f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	021b      	lsls	r3, r3, #8
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a35      	ldr	r2, [pc, #212]	@ (800a5d8 <TIM_OC3_SetConfig+0x134>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d00b      	beq.n	800a51e <TIM_OC3_SetConfig+0x7a>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a34      	ldr	r2, [pc, #208]	@ (800a5dc <TIM_OC3_SetConfig+0x138>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d007      	beq.n	800a51e <TIM_OC3_SetConfig+0x7a>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a33      	ldr	r2, [pc, #204]	@ (800a5e0 <TIM_OC3_SetConfig+0x13c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d003      	beq.n	800a51e <TIM_OC3_SetConfig+0x7a>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a32      	ldr	r2, [pc, #200]	@ (800a5e4 <TIM_OC3_SetConfig+0x140>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d10d      	bne.n	800a53a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	021b      	lsls	r3, r3, #8
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	4313      	orrs	r3, r2
 800a530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a26      	ldr	r2, [pc, #152]	@ (800a5d8 <TIM_OC3_SetConfig+0x134>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d023      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a25      	ldr	r2, [pc, #148]	@ (800a5dc <TIM_OC3_SetConfig+0x138>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d01f      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a24      	ldr	r2, [pc, #144]	@ (800a5e0 <TIM_OC3_SetConfig+0x13c>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d01b      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a23      	ldr	r2, [pc, #140]	@ (800a5e4 <TIM_OC3_SetConfig+0x140>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d017      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a22      	ldr	r2, [pc, #136]	@ (800a5e8 <TIM_OC3_SetConfig+0x144>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d013      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a21      	ldr	r2, [pc, #132]	@ (800a5ec <TIM_OC3_SetConfig+0x148>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d00f      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a20      	ldr	r2, [pc, #128]	@ (800a5f0 <TIM_OC3_SetConfig+0x14c>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d00b      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a1f      	ldr	r2, [pc, #124]	@ (800a5f4 <TIM_OC3_SetConfig+0x150>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d007      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a1e      	ldr	r2, [pc, #120]	@ (800a5f8 <TIM_OC3_SetConfig+0x154>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d003      	beq.n	800a58a <TIM_OC3_SetConfig+0xe6>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a1d      	ldr	r2, [pc, #116]	@ (800a5fc <TIM_OC3_SetConfig+0x158>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d113      	bne.n	800a5b2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	621a      	str	r2, [r3, #32]
}
 800a5cc:	bf00      	nop
 800a5ce:	371c      	adds	r7, #28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	40012c00 	.word	0x40012c00
 800a5dc:	50012c00 	.word	0x50012c00
 800a5e0:	40013400 	.word	0x40013400
 800a5e4:	50013400 	.word	0x50013400
 800a5e8:	40014000 	.word	0x40014000
 800a5ec:	50014000 	.word	0x50014000
 800a5f0:	40014400 	.word	0x40014400
 800a5f4:	50014400 	.word	0x50014400
 800a5f8:	40014800 	.word	0x40014800
 800a5fc:	50014800 	.word	0x50014800

0800a600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a62e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	021b      	lsls	r3, r3, #8
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	4313      	orrs	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a64e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	031b      	lsls	r3, r3, #12
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4313      	orrs	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a36      	ldr	r2, [pc, #216]	@ (800a738 <TIM_OC4_SetConfig+0x138>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d00b      	beq.n	800a67c <TIM_OC4_SetConfig+0x7c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a35      	ldr	r2, [pc, #212]	@ (800a73c <TIM_OC4_SetConfig+0x13c>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d007      	beq.n	800a67c <TIM_OC4_SetConfig+0x7c>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a34      	ldr	r2, [pc, #208]	@ (800a740 <TIM_OC4_SetConfig+0x140>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d003      	beq.n	800a67c <TIM_OC4_SetConfig+0x7c>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a33      	ldr	r2, [pc, #204]	@ (800a744 <TIM_OC4_SetConfig+0x144>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d10d      	bne.n	800a698 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	031b      	lsls	r3, r3, #12
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a696:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a27      	ldr	r2, [pc, #156]	@ (800a738 <TIM_OC4_SetConfig+0x138>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d023      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a26      	ldr	r2, [pc, #152]	@ (800a73c <TIM_OC4_SetConfig+0x13c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d01f      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a25      	ldr	r2, [pc, #148]	@ (800a740 <TIM_OC4_SetConfig+0x140>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d01b      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a24      	ldr	r2, [pc, #144]	@ (800a744 <TIM_OC4_SetConfig+0x144>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d017      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a23      	ldr	r2, [pc, #140]	@ (800a748 <TIM_OC4_SetConfig+0x148>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d013      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a22      	ldr	r2, [pc, #136]	@ (800a74c <TIM_OC4_SetConfig+0x14c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00f      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a21      	ldr	r2, [pc, #132]	@ (800a750 <TIM_OC4_SetConfig+0x150>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d00b      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a20      	ldr	r2, [pc, #128]	@ (800a754 <TIM_OC4_SetConfig+0x154>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d007      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a1f      	ldr	r2, [pc, #124]	@ (800a758 <TIM_OC4_SetConfig+0x158>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d003      	beq.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a75c <TIM_OC4_SetConfig+0x15c>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d113      	bne.n	800a710 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a6f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	019b      	lsls	r3, r3, #6
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	4313      	orrs	r3, r2
 800a702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	019b      	lsls	r3, r3, #6
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	621a      	str	r2, [r3, #32]
}
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	40012c00 	.word	0x40012c00
 800a73c:	50012c00 	.word	0x50012c00
 800a740:	40013400 	.word	0x40013400
 800a744:	50013400 	.word	0x50013400
 800a748:	40014000 	.word	0x40014000
 800a74c:	50014000 	.word	0x50014000
 800a750:	40014400 	.word	0x40014400
 800a754:	50014400 	.word	0x50014400
 800a758:	40014800 	.word	0x40014800
 800a75c:	50014800 	.word	0x50014800

0800a760 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a78e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a7a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	041b      	lsls	r3, r3, #16
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a21      	ldr	r2, [pc, #132]	@ (800a83c <TIM_OC5_SetConfig+0xdc>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d023      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a20      	ldr	r2, [pc, #128]	@ (800a840 <TIM_OC5_SetConfig+0xe0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d01f      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a844 <TIM_OC5_SetConfig+0xe4>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d01b      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a848 <TIM_OC5_SetConfig+0xe8>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d017      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a84c <TIM_OC5_SetConfig+0xec>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d013      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a850 <TIM_OC5_SetConfig+0xf0>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d00f      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a854 <TIM_OC5_SetConfig+0xf4>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00b      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a858 <TIM_OC5_SetConfig+0xf8>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d007      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a19      	ldr	r2, [pc, #100]	@ (800a85c <TIM_OC5_SetConfig+0xfc>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d003      	beq.n	800a802 <TIM_OC5_SetConfig+0xa2>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a18      	ldr	r2, [pc, #96]	@ (800a860 <TIM_OC5_SetConfig+0x100>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d109      	bne.n	800a816 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a808:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	021b      	lsls	r3, r3, #8
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	4313      	orrs	r3, r2
 800a814:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	621a      	str	r2, [r3, #32]
}
 800a830:	bf00      	nop
 800a832:	371c      	adds	r7, #28
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	40012c00 	.word	0x40012c00
 800a840:	50012c00 	.word	0x50012c00
 800a844:	40013400 	.word	0x40013400
 800a848:	50013400 	.word	0x50013400
 800a84c:	40014000 	.word	0x40014000
 800a850:	50014000 	.word	0x50014000
 800a854:	40014400 	.word	0x40014400
 800a858:	50014400 	.word	0x50014400
 800a85c:	40014800 	.word	0x40014800
 800a860:	50014800 	.word	0x50014800

0800a864 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	051b      	lsls	r3, r3, #20
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a22      	ldr	r2, [pc, #136]	@ (800a944 <TIM_OC6_SetConfig+0xe0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d023      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a21      	ldr	r2, [pc, #132]	@ (800a948 <TIM_OC6_SetConfig+0xe4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d01f      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a20      	ldr	r2, [pc, #128]	@ (800a94c <TIM_OC6_SetConfig+0xe8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d01b      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a1f      	ldr	r2, [pc, #124]	@ (800a950 <TIM_OC6_SetConfig+0xec>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d017      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a1e      	ldr	r2, [pc, #120]	@ (800a954 <TIM_OC6_SetConfig+0xf0>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d013      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a1d      	ldr	r2, [pc, #116]	@ (800a958 <TIM_OC6_SetConfig+0xf4>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d00f      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a95c <TIM_OC6_SetConfig+0xf8>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d00b      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a1b      	ldr	r2, [pc, #108]	@ (800a960 <TIM_OC6_SetConfig+0xfc>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d007      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a1a      	ldr	r2, [pc, #104]	@ (800a964 <TIM_OC6_SetConfig+0x100>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d003      	beq.n	800a908 <TIM_OC6_SetConfig+0xa4>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a19      	ldr	r2, [pc, #100]	@ (800a968 <TIM_OC6_SetConfig+0x104>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d109      	bne.n	800a91c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a90e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	029b      	lsls	r3, r3, #10
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4313      	orrs	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	621a      	str	r2, [r3, #32]
}
 800a936:	bf00      	nop
 800a938:	371c      	adds	r7, #28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	40012c00 	.word	0x40012c00
 800a948:	50012c00 	.word	0x50012c00
 800a94c:	40013400 	.word	0x40013400
 800a950:	50013400 	.word	0x50013400
 800a954:	40014000 	.word	0x40014000
 800a958:	50014000 	.word	0x50014000
 800a95c:	40014400 	.word	0x40014400
 800a960:	50014400 	.word	0x50014400
 800a964:	40014800 	.word	0x40014800
 800a968:	50014800 	.word	0x50014800

0800a96c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	f023 0201 	bic.w	r2, r3, #1
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f023 030a 	bic.w	r3, r3, #10
 800a9a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	621a      	str	r2, [r3, #32]
}
 800a9be:	bf00      	nop
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b087      	sub	sp, #28
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	f023 0210 	bic.w	r2, r3, #16
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	031b      	lsls	r3, r3, #12
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aa06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	621a      	str	r2, [r3, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aa40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	f043 0307 	orr.w	r3, r3, #7
 800aa50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	609a      	str	r2, [r3, #8]
}
 800aa58:	bf00      	nop
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
 800aa70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	021a      	lsls	r2, r3, #8
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	431a      	orrs	r2, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	609a      	str	r2, [r3, #8]
}
 800aa98:	bf00      	nop
 800aa9a:	371c      	adds	r7, #28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d101      	bne.n	800aabc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aab8:	2302      	movs	r3, #2
 800aaba:	e0a1      	b.n	800ac00 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a4a      	ldr	r2, [pc, #296]	@ (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00e      	beq.n	800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a49      	ldr	r2, [pc, #292]	@ (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d009      	beq.n	800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a47      	ldr	r2, [pc, #284]	@ (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d004      	beq.n	800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a46      	ldr	r2, [pc, #280]	@ (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d108      	bne.n	800ab16 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ab0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ab1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a34      	ldr	r2, [pc, #208]	@ (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d04a      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a33      	ldr	r2, [pc, #204]	@ (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d045      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab50:	d040      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab5a:	d03b      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a2e      	ldr	r2, [pc, #184]	@ (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d036      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a2d      	ldr	r2, [pc, #180]	@ (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d031      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a2b      	ldr	r2, [pc, #172]	@ (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d02c      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a2a      	ldr	r2, [pc, #168]	@ (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d027      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a28      	ldr	r2, [pc, #160]	@ (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d022      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a27      	ldr	r2, [pc, #156]	@ (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d01d      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a1d      	ldr	r2, [pc, #116]	@ (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d018      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a1c      	ldr	r2, [pc, #112]	@ (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d013      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a20      	ldr	r2, [pc, #128]	@ (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d00e      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a1f      	ldr	r2, [pc, #124]	@ (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d009      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d004      	beq.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a1c      	ldr	r2, [pc, #112]	@ (800ac40 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d10c      	bne.n	800abee <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	40012c00 	.word	0x40012c00
 800ac10:	50012c00 	.word	0x50012c00
 800ac14:	40013400 	.word	0x40013400
 800ac18:	50013400 	.word	0x50013400
 800ac1c:	40000400 	.word	0x40000400
 800ac20:	50000400 	.word	0x50000400
 800ac24:	40000800 	.word	0x40000800
 800ac28:	50000800 	.word	0x50000800
 800ac2c:	40000c00 	.word	0x40000c00
 800ac30:	50000c00 	.word	0x50000c00
 800ac34:	40001800 	.word	0x40001800
 800ac38:	50001800 	.word	0x50001800
 800ac3c:	40014000 	.word	0x40014000
 800ac40:	50014000 	.word	0x50014000

0800ac44 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ac44:	b084      	sub	sp, #16
 800ac46:	b480      	push	{r7}
 800ac48:	b085      	sub	sp, #20
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	f107 001c 	add.w	r0, r7, #28
 800ac52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ac5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ac5e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800ac62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800ac66:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ac68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800ac6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <SDMMC_Init+0x50>)
 800ac78:	4013      	ands	r3, r2
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	b004      	add	sp, #16
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	ffc02c00 	.word	0xffc02c00

0800ac98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f043 0203 	orr.w	r2, r3, #3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 0303 	and.w	r3, r3, #3
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ad0e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ad14:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ad1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	4b06      	ldr	r3, [pc, #24]	@ (800ad40 <SDMMC_SendCommand+0x50>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	fffee0c0 	.word	0xfffee0c0

0800ad44 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	b2db      	uxtb	r3, r3
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b085      	sub	sp, #20
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3314      	adds	r3, #20
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	4413      	add	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	685a      	ldr	r2, [r3, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800adaa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800adb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800adb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	431a      	orrs	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800adce:	2300      	movs	r3, #0

}
 800add0:	4618      	mov	r0, r3
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b088      	sub	sp, #32
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800adea:	2310      	movs	r3, #16
 800adec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adf4:	2300      	movs	r3, #0
 800adf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff ff73 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ae0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae0e:	2110      	movs	r1, #16
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f995 	bl	800b140 <SDMMC_GetCmdResp1>
 800ae16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae18:	69fb      	ldr	r3, [r7, #28]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3720      	adds	r7, #32
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b088      	sub	sp, #32
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae30:	2307      	movs	r3, #7
 800ae32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae44:	f107 0308 	add.w	r3, r7, #8
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff ff50 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae54:	2107      	movs	r1, #7
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f972 	bl	800b140 <SDMMC_GetCmdResp1>
 800ae5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae5e:	69fb      	ldr	r3, [r7, #28]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3720      	adds	r7, #32
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae86:	f107 0308 	add.w	r3, r7, #8
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff ff2f 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fb96 	bl	800b5c4 <SDMMC_GetCmdError>
 800ae98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae9a:	69fb      	ldr	r3, [r7, #28]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3720      	adds	r7, #32
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aeac:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800aeb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aeb2:	2308      	movs	r3, #8
 800aeb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aeba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aebc:	2300      	movs	r3, #0
 800aebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aec6:	f107 0308 	add.w	r3, r7, #8
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff ff0f 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fb28 	bl	800b528 <SDMMC_GetCmdResp7>
 800aed8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeda:	69fb      	ldr	r3, [r7, #28]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3720      	adds	r7, #32
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aef2:	2337      	movs	r3, #55	@ 0x37
 800aef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aefa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aefc:	2300      	movs	r3, #0
 800aefe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af06:	f107 0308 	add.w	r3, r7, #8
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff feef 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af16:	2137      	movs	r1, #55	@ 0x37
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f911 	bl	800b140 <SDMMC_GetCmdResp1>
 800af1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af20:	69fb      	ldr	r3, [r7, #28]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3720      	adds	r7, #32
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b088      	sub	sp, #32
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af38:	2329      	movs	r3, #41	@ 0x29
 800af3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af4c:	f107 0308 	add.w	r3, r7, #8
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff fecc 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fa2d 	bl	800b3b8 <SDMMC_GetCmdResp3>
 800af5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af60:	69fb      	ldr	r3, [r7, #28]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3720      	adds	r7, #32
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b088      	sub	sp, #32
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af78:	2306      	movs	r3, #6
 800af7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af8c:	f107 0308 	add.w	r3, r7, #8
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff feac 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af9c:	2106      	movs	r1, #6
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f8ce 	bl	800b140 <SDMMC_GetCmdResp1>
 800afa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afa6:	69fb      	ldr	r3, [r7, #28]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3720      	adds	r7, #32
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afbc:	2333      	movs	r3, #51	@ 0x33
 800afbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afc6:	2300      	movs	r3, #0
 800afc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afd0:	f107 0308 	add.w	r3, r7, #8
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fe8a 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afe0:	2133      	movs	r1, #51	@ 0x33
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f8ac 	bl	800b140 <SDMMC_GetCmdResp1>
 800afe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afea:	69fb      	ldr	r3, [r7, #28]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3720      	adds	r7, #32
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b000:	2302      	movs	r3, #2
 800b002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b004:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b00a:	2300      	movs	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b00e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b012:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b014:	f107 0308 	add.w	r3, r7, #8
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff fe68 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f97f 	bl	800b324 <SDMMC_GetCmdResp2>
 800b026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b028:	69fb      	ldr	r3, [r7, #28]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3720      	adds	r7, #32
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b088      	sub	sp, #32
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b040:	2309      	movs	r3, #9
 800b042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b044:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b04e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b052:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b054:	f107 0308 	add.w	r3, r7, #8
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff fe48 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f95f 	bl	800b324 <SDMMC_GetCmdResp2>
 800b066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b068:	69fb      	ldr	r3, [r7, #28]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3720      	adds	r7, #32
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b088      	sub	sp, #32
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b07c:	2300      	movs	r3, #0
 800b07e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b080:	2303      	movs	r3, #3
 800b082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b08a:	2300      	movs	r3, #0
 800b08c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b08e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b092:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b094:	f107 0308 	add.w	r3, r7, #8
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff fe28 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	2103      	movs	r1, #3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f9c7 	bl	800b438 <SDMMC_GetCmdResp6>
 800b0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0ac:	69fb      	ldr	r3, [r7, #28]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3720      	adds	r7, #32
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b088      	sub	sp, #32
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0c4:	230d      	movs	r3, #13
 800b0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0d8:	f107 0308 	add.w	r3, r7, #8
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7ff fe06 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0e8:	210d      	movs	r1, #13
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f828 	bl	800b140 <SDMMC_GetCmdResp1>
 800b0f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0f2:	69fb      	ldr	r3, [r7, #28]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3720      	adds	r7, #32
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b108:	230d      	movs	r3, #13
 800b10a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b10c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b112:	2300      	movs	r3, #0
 800b114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b11a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b11c:	f107 0308 	add.w	r3, r7, #8
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7ff fde4 	bl	800acf0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b12c:	210d      	movs	r1, #13
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f806 	bl	800b140 <SDMMC_GetCmdResp1>
 800b134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b136:	69fb      	ldr	r3, [r7, #28]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3720      	adds	r7, #32
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	460b      	mov	r3, r1
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b14e:	4b70      	ldr	r3, [pc, #448]	@ (800b310 <SDMMC_GetCmdResp1+0x1d0>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a70      	ldr	r2, [pc, #448]	@ (800b314 <SDMMC_GetCmdResp1+0x1d4>)
 800b154:	fba2 2303 	umull	r2, r3, r2, r3
 800b158:	0a5a      	lsrs	r2, r3, #9
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	fb02 f303 	mul.w	r3, r2, r3
 800b160:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	1e5a      	subs	r2, r3, #1
 800b166:	61fa      	str	r2, [r7, #28]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d102      	bne.n	800b172 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b16c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b170:	e0c9      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b176:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	4b67      	ldr	r3, [pc, #412]	@ (800b318 <SDMMC_GetCmdResp1+0x1d8>)
 800b17c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0ef      	beq.n	800b162 <SDMMC_GetCmdResp1+0x22>
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1ea      	bne.n	800b162 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b190:	f003 0304 	and.w	r3, r3, #4
 800b194:	2b00      	cmp	r3, #0
 800b196:	d004      	beq.n	800b1a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2204      	movs	r2, #4
 800b19c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b19e:	2304      	movs	r3, #4
 800b1a0:	e0b1      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e0a6      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4a58      	ldr	r2, [pc, #352]	@ (800b31c <SDMMC_GetCmdResp1+0x1dc>)
 800b1bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f7ff fdc0 	bl	800ad44 <SDMMC_GetCommandResponse>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	7afb      	ldrb	r3, [r7, #11]
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d001      	beq.n	800b1d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e099      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f7ff fdc2 	bl	800ad5e <SDMMC_GetResponse>
 800b1da:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b1dc:	697a      	ldr	r2, [r7, #20]
 800b1de:	4b50      	ldr	r3, [pc, #320]	@ (800b320 <SDMMC_GetCmdResp1+0x1e0>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	e08d      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	da02      	bge.n	800b1f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b1f4:	e087      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b200:	2340      	movs	r3, #64	@ 0x40
 800b202:	e080      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b20e:	2380      	movs	r3, #128	@ 0x80
 800b210:	e079      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b21c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b220:	e071      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b22c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b230:	e069      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b23c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b240:	e061      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b24c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b250:	e059      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b25c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b260:	e051      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b26c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b270:	e049      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b27c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b280:	e041      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b28c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b290:	e039      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b29c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b2a0:	e031      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b2b0:	e029      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b2c0:	e021      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b2cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b2d0:	e019      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b2dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b2e0:	e011      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b2ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b2f0:	e009      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f003 0308 	and.w	r3, r3, #8
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2fc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b300:	e001      	b.n	800b306 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b306:	4618      	mov	r0, r3
 800b308:	3720      	adds	r7, #32
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20000004 	.word	0x20000004
 800b314:	10624dd3 	.word	0x10624dd3
 800b318:	00200045 	.word	0x00200045
 800b31c:	002000c5 	.word	0x002000c5
 800b320:	fdffe008 	.word	0xfdffe008

0800b324 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b32c:	4b1f      	ldr	r3, [pc, #124]	@ (800b3ac <SDMMC_GetCmdResp2+0x88>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a1f      	ldr	r2, [pc, #124]	@ (800b3b0 <SDMMC_GetCmdResp2+0x8c>)
 800b332:	fba2 2303 	umull	r2, r3, r2, r3
 800b336:	0a5b      	lsrs	r3, r3, #9
 800b338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b33c:	fb02 f303 	mul.w	r3, r2, r3
 800b340:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	1e5a      	subs	r2, r3, #1
 800b346:	60fa      	str	r2, [r7, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b34c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b350:	e026      	b.n	800b3a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b356:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0ef      	beq.n	800b342 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1ea      	bne.n	800b342 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	d004      	beq.n	800b382 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2204      	movs	r2, #4
 800b37c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b37e:	2304      	movs	r3, #4
 800b380:	e00e      	b.n	800b3a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d004      	beq.n	800b398 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b394:	2301      	movs	r3, #1
 800b396:	e003      	b.n	800b3a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a06      	ldr	r2, [pc, #24]	@ (800b3b4 <SDMMC_GetCmdResp2+0x90>)
 800b39c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	20000004 	.word	0x20000004
 800b3b0:	10624dd3 	.word	0x10624dd3
 800b3b4:	002000c5 	.word	0x002000c5

0800b3b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b42c <SDMMC_GetCmdResp3+0x74>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a1a      	ldr	r2, [pc, #104]	@ (800b430 <SDMMC_GetCmdResp3+0x78>)
 800b3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ca:	0a5b      	lsrs	r3, r3, #9
 800b3cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3d0:	fb02 f303 	mul.w	r3, r2, r3
 800b3d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	1e5a      	subs	r2, r3, #1
 800b3da:	60fa      	str	r2, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3e4:	e01b      	b.n	800b41e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0ef      	beq.n	800b3d6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1ea      	bne.n	800b3d6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2204      	movs	r2, #4
 800b410:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b412:	2304      	movs	r3, #4
 800b414:	e003      	b.n	800b41e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a06      	ldr	r2, [pc, #24]	@ (800b434 <SDMMC_GetCmdResp3+0x7c>)
 800b41a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	20000004 	.word	0x20000004
 800b430:	10624dd3 	.word	0x10624dd3
 800b434:	002000c5 	.word	0x002000c5

0800b438 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	460b      	mov	r3, r1
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b446:	4b35      	ldr	r3, [pc, #212]	@ (800b51c <SDMMC_GetCmdResp6+0xe4>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a35      	ldr	r2, [pc, #212]	@ (800b520 <SDMMC_GetCmdResp6+0xe8>)
 800b44c:	fba2 2303 	umull	r2, r3, r2, r3
 800b450:	0a5b      	lsrs	r3, r3, #9
 800b452:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b456:	fb02 f303 	mul.w	r3, r2, r3
 800b45a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	1e5a      	subs	r2, r3, #1
 800b460:	61fa      	str	r2, [r7, #28]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d102      	bne.n	800b46c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b466:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b46a:	e052      	b.n	800b512 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b470:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d0ef      	beq.n	800b45c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1ea      	bne.n	800b45c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b48a:	f003 0304 	and.w	r3, r3, #4
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d004      	beq.n	800b49c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2204      	movs	r2, #4
 800b496:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b498:	2304      	movs	r3, #4
 800b49a:	e03a      	b.n	800b512 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d004      	beq.n	800b4b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e02f      	b.n	800b512 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7ff fc46 	bl	800ad44 <SDMMC_GetCommandResponse>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	7afb      	ldrb	r3, [r7, #11]
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d001      	beq.n	800b4c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e025      	b.n	800b512 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4a16      	ldr	r2, [pc, #88]	@ (800b524 <SDMMC_GetCmdResp6+0xec>)
 800b4ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f7ff fc45 	bl	800ad5e <SDMMC_GetResponse>
 800b4d4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	0c1b      	lsrs	r3, r3, #16
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e011      	b.n	800b512 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b4fc:	e009      	b.n	800b512 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b504:	2b00      	cmp	r3, #0
 800b506:	d002      	beq.n	800b50e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b50c:	e001      	b.n	800b512 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b50e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b512:	4618      	mov	r0, r3
 800b514:	3720      	adds	r7, #32
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	20000004 	.word	0x20000004
 800b520:	10624dd3 	.word	0x10624dd3
 800b524:	002000c5 	.word	0x002000c5

0800b528 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b530:	4b22      	ldr	r3, [pc, #136]	@ (800b5bc <SDMMC_GetCmdResp7+0x94>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a22      	ldr	r2, [pc, #136]	@ (800b5c0 <SDMMC_GetCmdResp7+0x98>)
 800b536:	fba2 2303 	umull	r2, r3, r2, r3
 800b53a:	0a5b      	lsrs	r3, r3, #9
 800b53c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b540:	fb02 f303 	mul.w	r3, r2, r3
 800b544:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	1e5a      	subs	r2, r3, #1
 800b54a:	60fa      	str	r2, [r7, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b550:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b554:	e02c      	b.n	800b5b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b55a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0ef      	beq.n	800b546 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1ea      	bne.n	800b546 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2204      	movs	r2, #4
 800b580:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b582:	2304      	movs	r3, #4
 800b584:	e014      	b.n	800b5b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d004      	beq.n	800b59c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b598:	2301      	movs	r3, #1
 800b59a:	e009      	b.n	800b5b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2240      	movs	r2, #64	@ 0x40
 800b5ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b5ae:	2300      	movs	r3, #0

}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3714      	adds	r7, #20
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	20000004 	.word	0x20000004
 800b5c0:	10624dd3 	.word	0x10624dd3

0800b5c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b5cc:	4b11      	ldr	r3, [pc, #68]	@ (800b614 <SDMMC_GetCmdError+0x50>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a11      	ldr	r2, [pc, #68]	@ (800b618 <SDMMC_GetCmdError+0x54>)
 800b5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5d6:	0a5b      	lsrs	r3, r3, #9
 800b5d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5dc:	fb02 f303 	mul.w	r3, r2, r3
 800b5e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	1e5a      	subs	r2, r3, #1
 800b5e6:	60fa      	str	r2, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5f0:	e009      	b.n	800b606 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0f1      	beq.n	800b5e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a06      	ldr	r2, [pc, #24]	@ (800b61c <SDMMC_GetCmdError+0x58>)
 800b602:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20000004 	.word	0x20000004
 800b618:	10624dd3 	.word	0x10624dd3
 800b61c:	002000c5 	.word	0x002000c5

0800b620 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b638:	f043 0201 	orr.w	r2, r3, #1
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b64e:	b084      	sub	sp, #16
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	f107 001c 	add.w	r0, r7, #28
 800b65c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e008      	b.n	800b67c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ffd8 	bl	800b620 <USB_CoreReset>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b686:	b004      	add	sp, #16
 800b688:	4770      	bx	lr

0800b68a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b085      	sub	sp, #20
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b692:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b696:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	43db      	mvns	r3, r3
 800b6a0:	401a      	ands	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b6c0:	78fb      	ldrb	r3, [r7, #3]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800b6d2:	e00b      	b.n	800b6ec <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d106      	bne.n	800b6e8 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	641a      	str	r2, [r3, #64]	@ 0x40
 800b6e6:	e001      	b.n	800b6ec <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e000      	b.n	800b6ee <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	f107 001c 	add.w	r0, r7, #28
 800b708:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b716:	f023 0201 	bic.w	r2, r3, #1
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b71e:	2100      	movs	r1, #0
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7ff ffc7 	bl	800b6b4 <USB_SetCurrentMode>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b73c:	b004      	add	sp, #16
 800b73e:	4770      	bx	lr

0800b740 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b74c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <abort>:
 800b762:	2006      	movs	r0, #6
 800b764:	b508      	push	{r3, lr}
 800b766:	f000 fb91 	bl	800be8c <raise>
 800b76a:	2001      	movs	r0, #1
 800b76c:	f7f6 f993 	bl	8001a96 <_exit>

0800b770 <malloc>:
 800b770:	4b02      	ldr	r3, [pc, #8]	@ (800b77c <malloc+0xc>)
 800b772:	4601      	mov	r1, r0
 800b774:	6818      	ldr	r0, [r3, #0]
 800b776:	f000 b82d 	b.w	800b7d4 <_malloc_r>
 800b77a:	bf00      	nop
 800b77c:	2000001c 	.word	0x2000001c

0800b780 <free>:
 800b780:	4b02      	ldr	r3, [pc, #8]	@ (800b78c <free+0xc>)
 800b782:	4601      	mov	r1, r0
 800b784:	6818      	ldr	r0, [r3, #0]
 800b786:	f000 bc21 	b.w	800bfcc <_free_r>
 800b78a:	bf00      	nop
 800b78c:	2000001c 	.word	0x2000001c

0800b790 <sbrk_aligned>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	4e0f      	ldr	r6, [pc, #60]	@ (800b7d0 <sbrk_aligned+0x40>)
 800b794:	460c      	mov	r4, r1
 800b796:	4605      	mov	r5, r0
 800b798:	6831      	ldr	r1, [r6, #0]
 800b79a:	b911      	cbnz	r1, 800b7a2 <sbrk_aligned+0x12>
 800b79c:	f000 fbc6 	bl	800bf2c <_sbrk_r>
 800b7a0:	6030      	str	r0, [r6, #0]
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f000 fbc1 	bl	800bf2c <_sbrk_r>
 800b7aa:	1c43      	adds	r3, r0, #1
 800b7ac:	d103      	bne.n	800b7b6 <sbrk_aligned+0x26>
 800b7ae:	f04f 34ff 	mov.w	r4, #4294967295
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	bd70      	pop	{r4, r5, r6, pc}
 800b7b6:	1cc4      	adds	r4, r0, #3
 800b7b8:	f024 0403 	bic.w	r4, r4, #3
 800b7bc:	42a0      	cmp	r0, r4
 800b7be:	d0f8      	beq.n	800b7b2 <sbrk_aligned+0x22>
 800b7c0:	1a21      	subs	r1, r4, r0
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f000 fbb2 	bl	800bf2c <_sbrk_r>
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	d1f2      	bne.n	800b7b2 <sbrk_aligned+0x22>
 800b7cc:	e7ef      	b.n	800b7ae <sbrk_aligned+0x1e>
 800b7ce:	bf00      	nop
 800b7d0:	20001670 	.word	0x20001670

0800b7d4 <_malloc_r>:
 800b7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	1ccd      	adds	r5, r1, #3
 800b7da:	4606      	mov	r6, r0
 800b7dc:	f025 0503 	bic.w	r5, r5, #3
 800b7e0:	3508      	adds	r5, #8
 800b7e2:	2d0c      	cmp	r5, #12
 800b7e4:	bf38      	it	cc
 800b7e6:	250c      	movcc	r5, #12
 800b7e8:	2d00      	cmp	r5, #0
 800b7ea:	db01      	blt.n	800b7f0 <_malloc_r+0x1c>
 800b7ec:	42a9      	cmp	r1, r5
 800b7ee:	d904      	bls.n	800b7fa <_malloc_r+0x26>
 800b7f0:	230c      	movs	r3, #12
 800b7f2:	6033      	str	r3, [r6, #0]
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8d0 <_malloc_r+0xfc>
 800b7fe:	f000 f869 	bl	800b8d4 <__malloc_lock>
 800b802:	f8d8 3000 	ldr.w	r3, [r8]
 800b806:	461c      	mov	r4, r3
 800b808:	bb44      	cbnz	r4, 800b85c <_malloc_r+0x88>
 800b80a:	4629      	mov	r1, r5
 800b80c:	4630      	mov	r0, r6
 800b80e:	f7ff ffbf 	bl	800b790 <sbrk_aligned>
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	4604      	mov	r4, r0
 800b816:	d158      	bne.n	800b8ca <_malloc_r+0xf6>
 800b818:	f8d8 4000 	ldr.w	r4, [r8]
 800b81c:	4627      	mov	r7, r4
 800b81e:	2f00      	cmp	r7, #0
 800b820:	d143      	bne.n	800b8aa <_malloc_r+0xd6>
 800b822:	2c00      	cmp	r4, #0
 800b824:	d04b      	beq.n	800b8be <_malloc_r+0xea>
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	4639      	mov	r1, r7
 800b82a:	4630      	mov	r0, r6
 800b82c:	eb04 0903 	add.w	r9, r4, r3
 800b830:	f000 fb7c 	bl	800bf2c <_sbrk_r>
 800b834:	4581      	cmp	r9, r0
 800b836:	d142      	bne.n	800b8be <_malloc_r+0xea>
 800b838:	6821      	ldr	r1, [r4, #0]
 800b83a:	4630      	mov	r0, r6
 800b83c:	1a6d      	subs	r5, r5, r1
 800b83e:	4629      	mov	r1, r5
 800b840:	f7ff ffa6 	bl	800b790 <sbrk_aligned>
 800b844:	3001      	adds	r0, #1
 800b846:	d03a      	beq.n	800b8be <_malloc_r+0xea>
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	442b      	add	r3, r5
 800b84c:	6023      	str	r3, [r4, #0]
 800b84e:	f8d8 3000 	ldr.w	r3, [r8]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	bb62      	cbnz	r2, 800b8b0 <_malloc_r+0xdc>
 800b856:	f8c8 7000 	str.w	r7, [r8]
 800b85a:	e00f      	b.n	800b87c <_malloc_r+0xa8>
 800b85c:	6822      	ldr	r2, [r4, #0]
 800b85e:	1b52      	subs	r2, r2, r5
 800b860:	d420      	bmi.n	800b8a4 <_malloc_r+0xd0>
 800b862:	2a0b      	cmp	r2, #11
 800b864:	d917      	bls.n	800b896 <_malloc_r+0xc2>
 800b866:	1961      	adds	r1, r4, r5
 800b868:	42a3      	cmp	r3, r4
 800b86a:	6025      	str	r5, [r4, #0]
 800b86c:	bf18      	it	ne
 800b86e:	6059      	strne	r1, [r3, #4]
 800b870:	6863      	ldr	r3, [r4, #4]
 800b872:	bf08      	it	eq
 800b874:	f8c8 1000 	streq.w	r1, [r8]
 800b878:	5162      	str	r2, [r4, r5]
 800b87a:	604b      	str	r3, [r1, #4]
 800b87c:	4630      	mov	r0, r6
 800b87e:	f000 f82f 	bl	800b8e0 <__malloc_unlock>
 800b882:	f104 000b 	add.w	r0, r4, #11
 800b886:	1d23      	adds	r3, r4, #4
 800b888:	f020 0007 	bic.w	r0, r0, #7
 800b88c:	1ac2      	subs	r2, r0, r3
 800b88e:	bf1c      	itt	ne
 800b890:	1a1b      	subne	r3, r3, r0
 800b892:	50a3      	strne	r3, [r4, r2]
 800b894:	e7af      	b.n	800b7f6 <_malloc_r+0x22>
 800b896:	6862      	ldr	r2, [r4, #4]
 800b898:	42a3      	cmp	r3, r4
 800b89a:	bf0c      	ite	eq
 800b89c:	f8c8 2000 	streq.w	r2, [r8]
 800b8a0:	605a      	strne	r2, [r3, #4]
 800b8a2:	e7eb      	b.n	800b87c <_malloc_r+0xa8>
 800b8a4:	4623      	mov	r3, r4
 800b8a6:	6864      	ldr	r4, [r4, #4]
 800b8a8:	e7ae      	b.n	800b808 <_malloc_r+0x34>
 800b8aa:	463c      	mov	r4, r7
 800b8ac:	687f      	ldr	r7, [r7, #4]
 800b8ae:	e7b6      	b.n	800b81e <_malloc_r+0x4a>
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	42a3      	cmp	r3, r4
 800b8b6:	d1fb      	bne.n	800b8b0 <_malloc_r+0xdc>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	6053      	str	r3, [r2, #4]
 800b8bc:	e7de      	b.n	800b87c <_malloc_r+0xa8>
 800b8be:	230c      	movs	r3, #12
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	6033      	str	r3, [r6, #0]
 800b8c4:	f000 f80c 	bl	800b8e0 <__malloc_unlock>
 800b8c8:	e794      	b.n	800b7f4 <_malloc_r+0x20>
 800b8ca:	6005      	str	r5, [r0, #0]
 800b8cc:	e7d6      	b.n	800b87c <_malloc_r+0xa8>
 800b8ce:	bf00      	nop
 800b8d0:	20001674 	.word	0x20001674

0800b8d4 <__malloc_lock>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	@ (800b8dc <__malloc_lock+0x8>)
 800b8d6:	f000 bb76 	b.w	800bfc6 <__retarget_lock_acquire_recursive>
 800b8da:	bf00      	nop
 800b8dc:	200017b8 	.word	0x200017b8

0800b8e0 <__malloc_unlock>:
 800b8e0:	4801      	ldr	r0, [pc, #4]	@ (800b8e8 <__malloc_unlock+0x8>)
 800b8e2:	f000 bb71 	b.w	800bfc8 <__retarget_lock_release_recursive>
 800b8e6:	bf00      	nop
 800b8e8:	200017b8 	.word	0x200017b8

0800b8ec <__sflush_r>:
 800b8ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f4:	0716      	lsls	r6, r2, #28
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	d454      	bmi.n	800b9a6 <__sflush_r+0xba>
 800b8fc:	684b      	ldr	r3, [r1, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dc02      	bgt.n	800b908 <__sflush_r+0x1c>
 800b902:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd48      	ble.n	800b99a <__sflush_r+0xae>
 800b908:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b90a:	2e00      	cmp	r6, #0
 800b90c:	d045      	beq.n	800b99a <__sflush_r+0xae>
 800b90e:	2300      	movs	r3, #0
 800b910:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b914:	682f      	ldr	r7, [r5, #0]
 800b916:	6a21      	ldr	r1, [r4, #32]
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	d030      	beq.n	800b97e <__sflush_r+0x92>
 800b91c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	0759      	lsls	r1, r3, #29
 800b922:	d505      	bpl.n	800b930 <__sflush_r+0x44>
 800b924:	6863      	ldr	r3, [r4, #4]
 800b926:	1ad2      	subs	r2, r2, r3
 800b928:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b92a:	b10b      	cbz	r3, 800b930 <__sflush_r+0x44>
 800b92c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	2300      	movs	r3, #0
 800b932:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b934:	6a21      	ldr	r1, [r4, #32]
 800b936:	4628      	mov	r0, r5
 800b938:	47b0      	blx	r6
 800b93a:	1c43      	adds	r3, r0, #1
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	d106      	bne.n	800b94e <__sflush_r+0x62>
 800b940:	6829      	ldr	r1, [r5, #0]
 800b942:	291d      	cmp	r1, #29
 800b944:	d82b      	bhi.n	800b99e <__sflush_r+0xb2>
 800b946:	4a2a      	ldr	r2, [pc, #168]	@ (800b9f0 <__sflush_r+0x104>)
 800b948:	40ca      	lsrs	r2, r1
 800b94a:	07d6      	lsls	r6, r2, #31
 800b94c:	d527      	bpl.n	800b99e <__sflush_r+0xb2>
 800b94e:	2200      	movs	r2, #0
 800b950:	04d9      	lsls	r1, r3, #19
 800b952:	6062      	str	r2, [r4, #4]
 800b954:	6922      	ldr	r2, [r4, #16]
 800b956:	6022      	str	r2, [r4, #0]
 800b958:	d504      	bpl.n	800b964 <__sflush_r+0x78>
 800b95a:	1c42      	adds	r2, r0, #1
 800b95c:	d101      	bne.n	800b962 <__sflush_r+0x76>
 800b95e:	682b      	ldr	r3, [r5, #0]
 800b960:	b903      	cbnz	r3, 800b964 <__sflush_r+0x78>
 800b962:	6560      	str	r0, [r4, #84]	@ 0x54
 800b964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b966:	602f      	str	r7, [r5, #0]
 800b968:	b1b9      	cbz	r1, 800b99a <__sflush_r+0xae>
 800b96a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b96e:	4299      	cmp	r1, r3
 800b970:	d002      	beq.n	800b978 <__sflush_r+0x8c>
 800b972:	4628      	mov	r0, r5
 800b974:	f000 fb2a 	bl	800bfcc <_free_r>
 800b978:	2300      	movs	r3, #0
 800b97a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b97c:	e00d      	b.n	800b99a <__sflush_r+0xae>
 800b97e:	2301      	movs	r3, #1
 800b980:	4628      	mov	r0, r5
 800b982:	47b0      	blx	r6
 800b984:	4602      	mov	r2, r0
 800b986:	1c50      	adds	r0, r2, #1
 800b988:	d1c9      	bne.n	800b91e <__sflush_r+0x32>
 800b98a:	682b      	ldr	r3, [r5, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0c6      	beq.n	800b91e <__sflush_r+0x32>
 800b990:	2b1d      	cmp	r3, #29
 800b992:	d001      	beq.n	800b998 <__sflush_r+0xac>
 800b994:	2b16      	cmp	r3, #22
 800b996:	d11d      	bne.n	800b9d4 <__sflush_r+0xe8>
 800b998:	602f      	str	r7, [r5, #0]
 800b99a:	2000      	movs	r0, #0
 800b99c:	e021      	b.n	800b9e2 <__sflush_r+0xf6>
 800b99e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a2:	b21b      	sxth	r3, r3
 800b9a4:	e01a      	b.n	800b9dc <__sflush_r+0xf0>
 800b9a6:	690f      	ldr	r7, [r1, #16]
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	d0f6      	beq.n	800b99a <__sflush_r+0xae>
 800b9ac:	0793      	lsls	r3, r2, #30
 800b9ae:	680e      	ldr	r6, [r1, #0]
 800b9b0:	600f      	str	r7, [r1, #0]
 800b9b2:	bf0c      	ite	eq
 800b9b4:	694b      	ldreq	r3, [r1, #20]
 800b9b6:	2300      	movne	r3, #0
 800b9b8:	eba6 0807 	sub.w	r8, r6, r7
 800b9bc:	608b      	str	r3, [r1, #8]
 800b9be:	f1b8 0f00 	cmp.w	r8, #0
 800b9c2:	ddea      	ble.n	800b99a <__sflush_r+0xae>
 800b9c4:	4643      	mov	r3, r8
 800b9c6:	463a      	mov	r2, r7
 800b9c8:	6a21      	ldr	r1, [r4, #32]
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b9ce:	47b0      	blx	r6
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	dc08      	bgt.n	800b9e6 <__sflush_r+0xfa>
 800b9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e0:	81a3      	strh	r3, [r4, #12]
 800b9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e6:	4407      	add	r7, r0
 800b9e8:	eba8 0800 	sub.w	r8, r8, r0
 800b9ec:	e7e7      	b.n	800b9be <__sflush_r+0xd2>
 800b9ee:	bf00      	nop
 800b9f0:	20400001 	.word	0x20400001

0800b9f4 <_fflush_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	690b      	ldr	r3, [r1, #16]
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	b913      	cbnz	r3, 800ba04 <_fflush_r+0x10>
 800b9fe:	2500      	movs	r5, #0
 800ba00:	4628      	mov	r0, r5
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	b118      	cbz	r0, 800ba0e <_fflush_r+0x1a>
 800ba06:	6a03      	ldr	r3, [r0, #32]
 800ba08:	b90b      	cbnz	r3, 800ba0e <_fflush_r+0x1a>
 800ba0a:	f000 f8a7 	bl	800bb5c <__sinit>
 800ba0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0f3      	beq.n	800b9fe <_fflush_r+0xa>
 800ba16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba18:	07d0      	lsls	r0, r2, #31
 800ba1a:	d404      	bmi.n	800ba26 <_fflush_r+0x32>
 800ba1c:	0599      	lsls	r1, r3, #22
 800ba1e:	d402      	bmi.n	800ba26 <_fflush_r+0x32>
 800ba20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba22:	f000 fad0 	bl	800bfc6 <__retarget_lock_acquire_recursive>
 800ba26:	4628      	mov	r0, r5
 800ba28:	4621      	mov	r1, r4
 800ba2a:	f7ff ff5f 	bl	800b8ec <__sflush_r>
 800ba2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba30:	4605      	mov	r5, r0
 800ba32:	07da      	lsls	r2, r3, #31
 800ba34:	d4e4      	bmi.n	800ba00 <_fflush_r+0xc>
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	059b      	lsls	r3, r3, #22
 800ba3a:	d4e1      	bmi.n	800ba00 <_fflush_r+0xc>
 800ba3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba3e:	f000 fac3 	bl	800bfc8 <__retarget_lock_release_recursive>
 800ba42:	e7dd      	b.n	800ba00 <_fflush_r+0xc>

0800ba44 <std>:
 800ba44:	2300      	movs	r3, #0
 800ba46:	b510      	push	{r4, lr}
 800ba48:	4604      	mov	r4, r0
 800ba4a:	6083      	str	r3, [r0, #8]
 800ba4c:	8181      	strh	r1, [r0, #12]
 800ba4e:	4619      	mov	r1, r3
 800ba50:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba52:	81c2      	strh	r2, [r0, #14]
 800ba54:	2208      	movs	r2, #8
 800ba56:	6183      	str	r3, [r0, #24]
 800ba58:	e9c0 3300 	strd	r3, r3, [r0]
 800ba5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba60:	305c      	adds	r0, #92	@ 0x5c
 800ba62:	f000 f9e3 	bl	800be2c <memset>
 800ba66:	4b0d      	ldr	r3, [pc, #52]	@ (800ba9c <std+0x58>)
 800ba68:	6224      	str	r4, [r4, #32]
 800ba6a:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba6c:	4b0c      	ldr	r3, [pc, #48]	@ (800baa0 <std+0x5c>)
 800ba6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba70:	4b0c      	ldr	r3, [pc, #48]	@ (800baa4 <std+0x60>)
 800ba72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba74:	4b0c      	ldr	r3, [pc, #48]	@ (800baa8 <std+0x64>)
 800ba76:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba78:	4b0c      	ldr	r3, [pc, #48]	@ (800baac <std+0x68>)
 800ba7a:	429c      	cmp	r4, r3
 800ba7c:	d006      	beq.n	800ba8c <std+0x48>
 800ba7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba82:	4294      	cmp	r4, r2
 800ba84:	d002      	beq.n	800ba8c <std+0x48>
 800ba86:	33d0      	adds	r3, #208	@ 0xd0
 800ba88:	429c      	cmp	r4, r3
 800ba8a:	d105      	bne.n	800ba98 <std+0x54>
 800ba8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba94:	f000 ba96 	b.w	800bfc4 <__retarget_lock_init_recursive>
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	bf00      	nop
 800ba9c:	0800bc7d 	.word	0x0800bc7d
 800baa0:	0800bc9f 	.word	0x0800bc9f
 800baa4:	0800bcd7 	.word	0x0800bcd7
 800baa8:	0800bcfb 	.word	0x0800bcfb
 800baac:	20001678 	.word	0x20001678

0800bab0 <stdio_exit_handler>:
 800bab0:	4a02      	ldr	r2, [pc, #8]	@ (800babc <stdio_exit_handler+0xc>)
 800bab2:	4903      	ldr	r1, [pc, #12]	@ (800bac0 <stdio_exit_handler+0x10>)
 800bab4:	4803      	ldr	r0, [pc, #12]	@ (800bac4 <stdio_exit_handler+0x14>)
 800bab6:	f000 b869 	b.w	800bb8c <_fwalk_sglue>
 800baba:	bf00      	nop
 800babc:	20000010 	.word	0x20000010
 800bac0:	0800b9f5 	.word	0x0800b9f5
 800bac4:	20000020 	.word	0x20000020

0800bac8 <cleanup_stdio>:
 800bac8:	6841      	ldr	r1, [r0, #4]
 800baca:	4b0c      	ldr	r3, [pc, #48]	@ (800bafc <cleanup_stdio+0x34>)
 800bacc:	4299      	cmp	r1, r3
 800bace:	b510      	push	{r4, lr}
 800bad0:	4604      	mov	r4, r0
 800bad2:	d001      	beq.n	800bad8 <cleanup_stdio+0x10>
 800bad4:	f7ff ff8e 	bl	800b9f4 <_fflush_r>
 800bad8:	68a1      	ldr	r1, [r4, #8]
 800bada:	4b09      	ldr	r3, [pc, #36]	@ (800bb00 <cleanup_stdio+0x38>)
 800badc:	4299      	cmp	r1, r3
 800bade:	d002      	beq.n	800bae6 <cleanup_stdio+0x1e>
 800bae0:	4620      	mov	r0, r4
 800bae2:	f7ff ff87 	bl	800b9f4 <_fflush_r>
 800bae6:	68e1      	ldr	r1, [r4, #12]
 800bae8:	4b06      	ldr	r3, [pc, #24]	@ (800bb04 <cleanup_stdio+0x3c>)
 800baea:	4299      	cmp	r1, r3
 800baec:	d004      	beq.n	800baf8 <cleanup_stdio+0x30>
 800baee:	4620      	mov	r0, r4
 800baf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf4:	f7ff bf7e 	b.w	800b9f4 <_fflush_r>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	bf00      	nop
 800bafc:	20001678 	.word	0x20001678
 800bb00:	200016e0 	.word	0x200016e0
 800bb04:	20001748 	.word	0x20001748

0800bb08 <global_stdio_init.part.0>:
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb38 <global_stdio_init.part.0+0x30>)
 800bb0c:	2104      	movs	r1, #4
 800bb0e:	4c0b      	ldr	r4, [pc, #44]	@ (800bb3c <global_stdio_init.part.0+0x34>)
 800bb10:	4a0b      	ldr	r2, [pc, #44]	@ (800bb40 <global_stdio_init.part.0+0x38>)
 800bb12:	4620      	mov	r0, r4
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f7ff ff94 	bl	800ba44 <std>
 800bb1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb20:	2201      	movs	r2, #1
 800bb22:	2109      	movs	r1, #9
 800bb24:	f7ff ff8e 	bl	800ba44 <std>
 800bb28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	2112      	movs	r1, #18
 800bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb34:	f7ff bf86 	b.w	800ba44 <std>
 800bb38:	200017b0 	.word	0x200017b0
 800bb3c:	20001678 	.word	0x20001678
 800bb40:	0800bab1 	.word	0x0800bab1

0800bb44 <__sfp_lock_acquire>:
 800bb44:	4801      	ldr	r0, [pc, #4]	@ (800bb4c <__sfp_lock_acquire+0x8>)
 800bb46:	f000 ba3e 	b.w	800bfc6 <__retarget_lock_acquire_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	200017b9 	.word	0x200017b9

0800bb50 <__sfp_lock_release>:
 800bb50:	4801      	ldr	r0, [pc, #4]	@ (800bb58 <__sfp_lock_release+0x8>)
 800bb52:	f000 ba39 	b.w	800bfc8 <__retarget_lock_release_recursive>
 800bb56:	bf00      	nop
 800bb58:	200017b9 	.word	0x200017b9

0800bb5c <__sinit>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	4604      	mov	r4, r0
 800bb60:	f7ff fff0 	bl	800bb44 <__sfp_lock_acquire>
 800bb64:	6a23      	ldr	r3, [r4, #32]
 800bb66:	b11b      	cbz	r3, 800bb70 <__sinit+0x14>
 800bb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb6c:	f7ff bff0 	b.w	800bb50 <__sfp_lock_release>
 800bb70:	4b04      	ldr	r3, [pc, #16]	@ (800bb84 <__sinit+0x28>)
 800bb72:	6223      	str	r3, [r4, #32]
 800bb74:	4b04      	ldr	r3, [pc, #16]	@ (800bb88 <__sinit+0x2c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1f5      	bne.n	800bb68 <__sinit+0xc>
 800bb7c:	f7ff ffc4 	bl	800bb08 <global_stdio_init.part.0>
 800bb80:	e7f2      	b.n	800bb68 <__sinit+0xc>
 800bb82:	bf00      	nop
 800bb84:	0800bac9 	.word	0x0800bac9
 800bb88:	200017b0 	.word	0x200017b0

0800bb8c <_fwalk_sglue>:
 800bb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb90:	4607      	mov	r7, r0
 800bb92:	4688      	mov	r8, r1
 800bb94:	4614      	mov	r4, r2
 800bb96:	2600      	movs	r6, #0
 800bb98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb9c:	f1b9 0901 	subs.w	r9, r9, #1
 800bba0:	d505      	bpl.n	800bbae <_fwalk_sglue+0x22>
 800bba2:	6824      	ldr	r4, [r4, #0]
 800bba4:	2c00      	cmp	r4, #0
 800bba6:	d1f7      	bne.n	800bb98 <_fwalk_sglue+0xc>
 800bba8:	4630      	mov	r0, r6
 800bbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbae:	89ab      	ldrh	r3, [r5, #12]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d907      	bls.n	800bbc4 <_fwalk_sglue+0x38>
 800bbb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	d003      	beq.n	800bbc4 <_fwalk_sglue+0x38>
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	47c0      	blx	r8
 800bbc2:	4306      	orrs	r6, r0
 800bbc4:	3568      	adds	r5, #104	@ 0x68
 800bbc6:	e7e9      	b.n	800bb9c <_fwalk_sglue+0x10>

0800bbc8 <_fwrite_r>:
 800bbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbcc:	9c08      	ldr	r4, [sp, #32]
 800bbce:	468a      	mov	sl, r1
 800bbd0:	4690      	mov	r8, r2
 800bbd2:	fb02 f903 	mul.w	r9, r2, r3
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	b118      	cbz	r0, 800bbe2 <_fwrite_r+0x1a>
 800bbda:	6a03      	ldr	r3, [r0, #32]
 800bbdc:	b90b      	cbnz	r3, 800bbe2 <_fwrite_r+0x1a>
 800bbde:	f7ff ffbd 	bl	800bb5c <__sinit>
 800bbe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbe4:	07dd      	lsls	r5, r3, #31
 800bbe6:	d405      	bmi.n	800bbf4 <_fwrite_r+0x2c>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	0598      	lsls	r0, r3, #22
 800bbec:	d402      	bmi.n	800bbf4 <_fwrite_r+0x2c>
 800bbee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbf0:	f000 f9e9 	bl	800bfc6 <__retarget_lock_acquire_recursive>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	0719      	lsls	r1, r3, #28
 800bbf8:	d516      	bpl.n	800bc28 <_fwrite_r+0x60>
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	b1a3      	cbz	r3, 800bc28 <_fwrite_r+0x60>
 800bbfe:	2500      	movs	r5, #0
 800bc00:	454d      	cmp	r5, r9
 800bc02:	d01f      	beq.n	800bc44 <_fwrite_r+0x7c>
 800bc04:	68a7      	ldr	r7, [r4, #8]
 800bc06:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800bc0a:	3f01      	subs	r7, #1
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	60a7      	str	r7, [r4, #8]
 800bc10:	da04      	bge.n	800bc1c <_fwrite_r+0x54>
 800bc12:	69a3      	ldr	r3, [r4, #24]
 800bc14:	429f      	cmp	r7, r3
 800bc16:	db0f      	blt.n	800bc38 <_fwrite_r+0x70>
 800bc18:	290a      	cmp	r1, #10
 800bc1a:	d00d      	beq.n	800bc38 <_fwrite_r+0x70>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	6022      	str	r2, [r4, #0]
 800bc22:	7019      	strb	r1, [r3, #0]
 800bc24:	3501      	adds	r5, #1
 800bc26:	e7eb      	b.n	800bc00 <_fwrite_r+0x38>
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f000 f8a8 	bl	800bd80 <__swsetup_r>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d0e4      	beq.n	800bbfe <_fwrite_r+0x36>
 800bc34:	2500      	movs	r5, #0
 800bc36:	e005      	b.n	800bc44 <_fwrite_r+0x7c>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f000 f861 	bl	800bd02 <__swbuf_r>
 800bc40:	3001      	adds	r0, #1
 800bc42:	d1ef      	bne.n	800bc24 <_fwrite_r+0x5c>
 800bc44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc46:	07da      	lsls	r2, r3, #31
 800bc48:	d405      	bmi.n	800bc56 <_fwrite_r+0x8e>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	059b      	lsls	r3, r3, #22
 800bc4e:	d402      	bmi.n	800bc56 <_fwrite_r+0x8e>
 800bc50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc52:	f000 f9b9 	bl	800bfc8 <__retarget_lock_release_recursive>
 800bc56:	fbb5 f0f8 	udiv	r0, r5, r8
 800bc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800bc60 <fwrite>:
 800bc60:	b507      	push	{r0, r1, r2, lr}
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	4613      	mov	r3, r2
 800bc66:	460a      	mov	r2, r1
 800bc68:	4601      	mov	r1, r0
 800bc6a:	4803      	ldr	r0, [pc, #12]	@ (800bc78 <fwrite+0x18>)
 800bc6c:	6800      	ldr	r0, [r0, #0]
 800bc6e:	f7ff ffab 	bl	800bbc8 <_fwrite_r>
 800bc72:	b003      	add	sp, #12
 800bc74:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc78:	2000001c 	.word	0x2000001c

0800bc7c <__sread>:
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	460c      	mov	r4, r1
 800bc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc84:	f000 f92c 	bl	800bee0 <_read_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	bfab      	itete	ge
 800bc8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc8e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc90:	181b      	addge	r3, r3, r0
 800bc92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc96:	bfac      	ite	ge
 800bc98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc9a:	81a3      	strhlt	r3, [r4, #12]
 800bc9c:	bd10      	pop	{r4, pc}

0800bc9e <__swrite>:
 800bc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca2:	461f      	mov	r7, r3
 800bca4:	898b      	ldrh	r3, [r1, #12]
 800bca6:	4605      	mov	r5, r0
 800bca8:	460c      	mov	r4, r1
 800bcaa:	05db      	lsls	r3, r3, #23
 800bcac:	4616      	mov	r6, r2
 800bcae:	d505      	bpl.n	800bcbc <__swrite+0x1e>
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb8:	f000 f900 	bl	800bebc <_lseek_r>
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcca:	81a3      	strh	r3, [r4, #12]
 800bccc:	463b      	mov	r3, r7
 800bcce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd2:	f000 b93b 	b.w	800bf4c <_write_r>

0800bcd6 <__sseek>:
 800bcd6:	b510      	push	{r4, lr}
 800bcd8:	460c      	mov	r4, r1
 800bcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcde:	f000 f8ed 	bl	800bebc <_lseek_r>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	bf15      	itete	ne
 800bce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcf2:	81a3      	strheq	r3, [r4, #12]
 800bcf4:	bf18      	it	ne
 800bcf6:	81a3      	strhne	r3, [r4, #12]
 800bcf8:	bd10      	pop	{r4, pc}

0800bcfa <__sclose>:
 800bcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfe:	f000 b8cd 	b.w	800be9c <_close_r>

0800bd02 <__swbuf_r>:
 800bd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd04:	460e      	mov	r6, r1
 800bd06:	4614      	mov	r4, r2
 800bd08:	4605      	mov	r5, r0
 800bd0a:	b118      	cbz	r0, 800bd14 <__swbuf_r+0x12>
 800bd0c:	6a03      	ldr	r3, [r0, #32]
 800bd0e:	b90b      	cbnz	r3, 800bd14 <__swbuf_r+0x12>
 800bd10:	f7ff ff24 	bl	800bb5c <__sinit>
 800bd14:	69a3      	ldr	r3, [r4, #24]
 800bd16:	60a3      	str	r3, [r4, #8]
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	071a      	lsls	r2, r3, #28
 800bd1c:	d501      	bpl.n	800bd22 <__swbuf_r+0x20>
 800bd1e:	6923      	ldr	r3, [r4, #16]
 800bd20:	b943      	cbnz	r3, 800bd34 <__swbuf_r+0x32>
 800bd22:	4621      	mov	r1, r4
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 f82b 	bl	800bd80 <__swsetup_r>
 800bd2a:	b118      	cbz	r0, 800bd34 <__swbuf_r+0x32>
 800bd2c:	f04f 37ff 	mov.w	r7, #4294967295
 800bd30:	4638      	mov	r0, r7
 800bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	b2f6      	uxtb	r6, r6
 800bd38:	6922      	ldr	r2, [r4, #16]
 800bd3a:	4637      	mov	r7, r6
 800bd3c:	1a98      	subs	r0, r3, r2
 800bd3e:	6963      	ldr	r3, [r4, #20]
 800bd40:	4283      	cmp	r3, r0
 800bd42:	dc05      	bgt.n	800bd50 <__swbuf_r+0x4e>
 800bd44:	4621      	mov	r1, r4
 800bd46:	4628      	mov	r0, r5
 800bd48:	f7ff fe54 	bl	800b9f4 <_fflush_r>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d1ed      	bne.n	800bd2c <__swbuf_r+0x2a>
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	60a3      	str	r3, [r4, #8]
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	6022      	str	r2, [r4, #0]
 800bd5c:	701e      	strb	r6, [r3, #0]
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	6962      	ldr	r2, [r4, #20]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d004      	beq.n	800bd70 <__swbuf_r+0x6e>
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	07db      	lsls	r3, r3, #31
 800bd6a:	d5e1      	bpl.n	800bd30 <__swbuf_r+0x2e>
 800bd6c:	2e0a      	cmp	r6, #10
 800bd6e:	d1df      	bne.n	800bd30 <__swbuf_r+0x2e>
 800bd70:	4621      	mov	r1, r4
 800bd72:	4628      	mov	r0, r5
 800bd74:	f7ff fe3e 	bl	800b9f4 <_fflush_r>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d0d9      	beq.n	800bd30 <__swbuf_r+0x2e>
 800bd7c:	e7d6      	b.n	800bd2c <__swbuf_r+0x2a>
	...

0800bd80 <__swsetup_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4b29      	ldr	r3, [pc, #164]	@ (800be28 <__swsetup_r+0xa8>)
 800bd84:	4605      	mov	r5, r0
 800bd86:	460c      	mov	r4, r1
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	b118      	cbz	r0, 800bd94 <__swsetup_r+0x14>
 800bd8c:	6a03      	ldr	r3, [r0, #32]
 800bd8e:	b90b      	cbnz	r3, 800bd94 <__swsetup_r+0x14>
 800bd90:	f7ff fee4 	bl	800bb5c <__sinit>
 800bd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd98:	0719      	lsls	r1, r3, #28
 800bd9a:	d422      	bmi.n	800bde2 <__swsetup_r+0x62>
 800bd9c:	06da      	lsls	r2, r3, #27
 800bd9e:	d407      	bmi.n	800bdb0 <__swsetup_r+0x30>
 800bda0:	2209      	movs	r2, #9
 800bda2:	602a      	str	r2, [r5, #0]
 800bda4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	e033      	b.n	800be18 <__swsetup_r+0x98>
 800bdb0:	0758      	lsls	r0, r3, #29
 800bdb2:	d512      	bpl.n	800bdda <__swsetup_r+0x5a>
 800bdb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdb6:	b141      	cbz	r1, 800bdca <__swsetup_r+0x4a>
 800bdb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdbc:	4299      	cmp	r1, r3
 800bdbe:	d002      	beq.n	800bdc6 <__swsetup_r+0x46>
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f000 f903 	bl	800bfcc <_free_r>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	6063      	str	r3, [r4, #4]
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	f043 0308 	orr.w	r3, r3, #8
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	b94b      	cbnz	r3, 800bdfa <__swsetup_r+0x7a>
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdf0:	d003      	beq.n	800bdfa <__swsetup_r+0x7a>
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 f958 	bl	800c0aa <__smakebuf_r>
 800bdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdfe:	f013 0201 	ands.w	r2, r3, #1
 800be02:	d00a      	beq.n	800be1a <__swsetup_r+0x9a>
 800be04:	2200      	movs	r2, #0
 800be06:	60a2      	str	r2, [r4, #8]
 800be08:	6962      	ldr	r2, [r4, #20]
 800be0a:	4252      	negs	r2, r2
 800be0c:	61a2      	str	r2, [r4, #24]
 800be0e:	6922      	ldr	r2, [r4, #16]
 800be10:	b942      	cbnz	r2, 800be24 <__swsetup_r+0xa4>
 800be12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be16:	d1c5      	bne.n	800bda4 <__swsetup_r+0x24>
 800be18:	bd38      	pop	{r3, r4, r5, pc}
 800be1a:	0799      	lsls	r1, r3, #30
 800be1c:	bf58      	it	pl
 800be1e:	6962      	ldrpl	r2, [r4, #20]
 800be20:	60a2      	str	r2, [r4, #8]
 800be22:	e7f4      	b.n	800be0e <__swsetup_r+0x8e>
 800be24:	2000      	movs	r0, #0
 800be26:	e7f7      	b.n	800be18 <__swsetup_r+0x98>
 800be28:	2000001c 	.word	0x2000001c

0800be2c <memset>:
 800be2c:	4402      	add	r2, r0
 800be2e:	4603      	mov	r3, r0
 800be30:	4293      	cmp	r3, r2
 800be32:	d100      	bne.n	800be36 <memset+0xa>
 800be34:	4770      	bx	lr
 800be36:	f803 1b01 	strb.w	r1, [r3], #1
 800be3a:	e7f9      	b.n	800be30 <memset+0x4>

0800be3c <_raise_r>:
 800be3c:	291f      	cmp	r1, #31
 800be3e:	b538      	push	{r3, r4, r5, lr}
 800be40:	4605      	mov	r5, r0
 800be42:	460c      	mov	r4, r1
 800be44:	d904      	bls.n	800be50 <_raise_r+0x14>
 800be46:	2316      	movs	r3, #22
 800be48:	6003      	str	r3, [r0, #0]
 800be4a:	f04f 30ff 	mov.w	r0, #4294967295
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be52:	b112      	cbz	r2, 800be5a <_raise_r+0x1e>
 800be54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be58:	b94b      	cbnz	r3, 800be6e <_raise_r+0x32>
 800be5a:	4628      	mov	r0, r5
 800be5c:	f000 f864 	bl	800bf28 <_getpid_r>
 800be60:	4622      	mov	r2, r4
 800be62:	4601      	mov	r1, r0
 800be64:	4628      	mov	r0, r5
 800be66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6a:	f000 b84b 	b.w	800bf04 <_kill_r>
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d00a      	beq.n	800be88 <_raise_r+0x4c>
 800be72:	1c59      	adds	r1, r3, #1
 800be74:	d103      	bne.n	800be7e <_raise_r+0x42>
 800be76:	2316      	movs	r3, #22
 800be78:	6003      	str	r3, [r0, #0]
 800be7a:	2001      	movs	r0, #1
 800be7c:	e7e7      	b.n	800be4e <_raise_r+0x12>
 800be7e:	2100      	movs	r1, #0
 800be80:	4620      	mov	r0, r4
 800be82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be86:	4798      	blx	r3
 800be88:	2000      	movs	r0, #0
 800be8a:	e7e0      	b.n	800be4e <_raise_r+0x12>

0800be8c <raise>:
 800be8c:	4b02      	ldr	r3, [pc, #8]	@ (800be98 <raise+0xc>)
 800be8e:	4601      	mov	r1, r0
 800be90:	6818      	ldr	r0, [r3, #0]
 800be92:	f7ff bfd3 	b.w	800be3c <_raise_r>
 800be96:	bf00      	nop
 800be98:	2000001c 	.word	0x2000001c

0800be9c <_close_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	2300      	movs	r3, #0
 800bea0:	4d05      	ldr	r5, [pc, #20]	@ (800beb8 <_close_r+0x1c>)
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	602b      	str	r3, [r5, #0]
 800bea8:	f7f5 fe39 	bl	8001b1e <_close>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_close_r+0x1a>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_close_r+0x1a>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	200017b4 	.word	0x200017b4

0800bebc <_lseek_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4604      	mov	r4, r0
 800bec0:	4d06      	ldr	r5, [pc, #24]	@ (800bedc <_lseek_r+0x20>)
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f5 fe4e 	bl	8001b6c <_lseek>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_lseek_r+0x1e>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_lseek_r+0x1e>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	200017b4 	.word	0x200017b4

0800bee0 <_read_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	4d06      	ldr	r5, [pc, #24]	@ (800bf00 <_read_r+0x20>)
 800bee6:	4608      	mov	r0, r1
 800bee8:	4611      	mov	r1, r2
 800beea:	2200      	movs	r2, #0
 800beec:	602a      	str	r2, [r5, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	f7f5 fddc 	bl	8001aac <_read>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_read_r+0x1e>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_read_r+0x1e>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	200017b4 	.word	0x200017b4

0800bf04 <_kill_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	2300      	movs	r3, #0
 800bf08:	4d06      	ldr	r5, [pc, #24]	@ (800bf24 <_kill_r+0x20>)
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	4608      	mov	r0, r1
 800bf0e:	4611      	mov	r1, r2
 800bf10:	602b      	str	r3, [r5, #0]
 800bf12:	f7f5 fdb0 	bl	8001a76 <_kill>
 800bf16:	1c43      	adds	r3, r0, #1
 800bf18:	d102      	bne.n	800bf20 <_kill_r+0x1c>
 800bf1a:	682b      	ldr	r3, [r5, #0]
 800bf1c:	b103      	cbz	r3, 800bf20 <_kill_r+0x1c>
 800bf1e:	6023      	str	r3, [r4, #0]
 800bf20:	bd38      	pop	{r3, r4, r5, pc}
 800bf22:	bf00      	nop
 800bf24:	200017b4 	.word	0x200017b4

0800bf28 <_getpid_r>:
 800bf28:	f7f5 bd9d 	b.w	8001a66 <_getpid>

0800bf2c <_sbrk_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	2300      	movs	r3, #0
 800bf30:	4d05      	ldr	r5, [pc, #20]	@ (800bf48 <_sbrk_r+0x1c>)
 800bf32:	4604      	mov	r4, r0
 800bf34:	4608      	mov	r0, r1
 800bf36:	602b      	str	r3, [r5, #0]
 800bf38:	f7f5 fe26 	bl	8001b88 <_sbrk>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	d102      	bne.n	800bf46 <_sbrk_r+0x1a>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	b103      	cbz	r3, 800bf46 <_sbrk_r+0x1a>
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	200017b4 	.word	0x200017b4

0800bf4c <_write_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4604      	mov	r4, r0
 800bf50:	4d06      	ldr	r5, [pc, #24]	@ (800bf6c <_write_r+0x20>)
 800bf52:	4608      	mov	r0, r1
 800bf54:	4611      	mov	r1, r2
 800bf56:	2200      	movs	r2, #0
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f7f5 fdc3 	bl	8001ae6 <_write>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d102      	bne.n	800bf6a <_write_r+0x1e>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	b103      	cbz	r3, 800bf6a <_write_r+0x1e>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	200017b4 	.word	0x200017b4

0800bf70 <__errno>:
 800bf70:	4b01      	ldr	r3, [pc, #4]	@ (800bf78 <__errno+0x8>)
 800bf72:	6818      	ldr	r0, [r3, #0]
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	2000001c 	.word	0x2000001c

0800bf7c <__libc_init_array>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	4d0d      	ldr	r5, [pc, #52]	@ (800bfb4 <__libc_init_array+0x38>)
 800bf80:	2600      	movs	r6, #0
 800bf82:	4c0d      	ldr	r4, [pc, #52]	@ (800bfb8 <__libc_init_array+0x3c>)
 800bf84:	1b64      	subs	r4, r4, r5
 800bf86:	10a4      	asrs	r4, r4, #2
 800bf88:	42a6      	cmp	r6, r4
 800bf8a:	d109      	bne.n	800bfa0 <__libc_init_array+0x24>
 800bf8c:	4d0b      	ldr	r5, [pc, #44]	@ (800bfbc <__libc_init_array+0x40>)
 800bf8e:	2600      	movs	r6, #0
 800bf90:	4c0b      	ldr	r4, [pc, #44]	@ (800bfc0 <__libc_init_array+0x44>)
 800bf92:	f000 f8e9 	bl	800c168 <_init>
 800bf96:	1b64      	subs	r4, r4, r5
 800bf98:	10a4      	asrs	r4, r4, #2
 800bf9a:	42a6      	cmp	r6, r4
 800bf9c:	d105      	bne.n	800bfaa <__libc_init_array+0x2e>
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa4:	3601      	adds	r6, #1
 800bfa6:	4798      	blx	r3
 800bfa8:	e7ee      	b.n	800bf88 <__libc_init_array+0xc>
 800bfaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfae:	3601      	adds	r6, #1
 800bfb0:	4798      	blx	r3
 800bfb2:	e7f2      	b.n	800bf9a <__libc_init_array+0x1e>
 800bfb4:	0800c2a4 	.word	0x0800c2a4
 800bfb8:	0800c2a4 	.word	0x0800c2a4
 800bfbc:	0800c2a4 	.word	0x0800c2a4
 800bfc0:	0800c2a8 	.word	0x0800c2a8

0800bfc4 <__retarget_lock_init_recursive>:
 800bfc4:	4770      	bx	lr

0800bfc6 <__retarget_lock_acquire_recursive>:
 800bfc6:	4770      	bx	lr

0800bfc8 <__retarget_lock_release_recursive>:
 800bfc8:	4770      	bx	lr
	...

0800bfcc <_free_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4605      	mov	r5, r0
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	d041      	beq.n	800c058 <_free_r+0x8c>
 800bfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd8:	1f0c      	subs	r4, r1, #4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bfb8      	it	lt
 800bfde:	18e4      	addlt	r4, r4, r3
 800bfe0:	f7ff fc78 	bl	800b8d4 <__malloc_lock>
 800bfe4:	4a1d      	ldr	r2, [pc, #116]	@ (800c05c <_free_r+0x90>)
 800bfe6:	6813      	ldr	r3, [r2, #0]
 800bfe8:	b933      	cbnz	r3, 800bff8 <_free_r+0x2c>
 800bfea:	6063      	str	r3, [r4, #4]
 800bfec:	6014      	str	r4, [r2, #0]
 800bfee:	4628      	mov	r0, r5
 800bff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bff4:	f7ff bc74 	b.w	800b8e0 <__malloc_unlock>
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	d908      	bls.n	800c00e <_free_r+0x42>
 800bffc:	6820      	ldr	r0, [r4, #0]
 800bffe:	1821      	adds	r1, r4, r0
 800c000:	428b      	cmp	r3, r1
 800c002:	bf01      	itttt	eq
 800c004:	6819      	ldreq	r1, [r3, #0]
 800c006:	685b      	ldreq	r3, [r3, #4]
 800c008:	1809      	addeq	r1, r1, r0
 800c00a:	6021      	streq	r1, [r4, #0]
 800c00c:	e7ed      	b.n	800bfea <_free_r+0x1e>
 800c00e:	461a      	mov	r2, r3
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	b10b      	cbz	r3, 800c018 <_free_r+0x4c>
 800c014:	42a3      	cmp	r3, r4
 800c016:	d9fa      	bls.n	800c00e <_free_r+0x42>
 800c018:	6811      	ldr	r1, [r2, #0]
 800c01a:	1850      	adds	r0, r2, r1
 800c01c:	42a0      	cmp	r0, r4
 800c01e:	d10b      	bne.n	800c038 <_free_r+0x6c>
 800c020:	6820      	ldr	r0, [r4, #0]
 800c022:	4401      	add	r1, r0
 800c024:	1850      	adds	r0, r2, r1
 800c026:	6011      	str	r1, [r2, #0]
 800c028:	4283      	cmp	r3, r0
 800c02a:	d1e0      	bne.n	800bfee <_free_r+0x22>
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	4408      	add	r0, r1
 800c032:	6053      	str	r3, [r2, #4]
 800c034:	6010      	str	r0, [r2, #0]
 800c036:	e7da      	b.n	800bfee <_free_r+0x22>
 800c038:	d902      	bls.n	800c040 <_free_r+0x74>
 800c03a:	230c      	movs	r3, #12
 800c03c:	602b      	str	r3, [r5, #0]
 800c03e:	e7d6      	b.n	800bfee <_free_r+0x22>
 800c040:	6820      	ldr	r0, [r4, #0]
 800c042:	1821      	adds	r1, r4, r0
 800c044:	428b      	cmp	r3, r1
 800c046:	bf02      	ittt	eq
 800c048:	6819      	ldreq	r1, [r3, #0]
 800c04a:	685b      	ldreq	r3, [r3, #4]
 800c04c:	1809      	addeq	r1, r1, r0
 800c04e:	6063      	str	r3, [r4, #4]
 800c050:	bf08      	it	eq
 800c052:	6021      	streq	r1, [r4, #0]
 800c054:	6054      	str	r4, [r2, #4]
 800c056:	e7ca      	b.n	800bfee <_free_r+0x22>
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	bf00      	nop
 800c05c:	20001674 	.word	0x20001674

0800c060 <__swhatbuf_r>:
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	460c      	mov	r4, r1
 800c064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c068:	b096      	sub	sp, #88	@ 0x58
 800c06a:	4615      	mov	r5, r2
 800c06c:	2900      	cmp	r1, #0
 800c06e:	461e      	mov	r6, r3
 800c070:	da0c      	bge.n	800c08c <__swhatbuf_r+0x2c>
 800c072:	89a3      	ldrh	r3, [r4, #12]
 800c074:	2100      	movs	r1, #0
 800c076:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c07a:	bf14      	ite	ne
 800c07c:	2340      	movne	r3, #64	@ 0x40
 800c07e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c082:	2000      	movs	r0, #0
 800c084:	6031      	str	r1, [r6, #0]
 800c086:	602b      	str	r3, [r5, #0]
 800c088:	b016      	add	sp, #88	@ 0x58
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	466a      	mov	r2, sp
 800c08e:	f000 f849 	bl	800c124 <_fstat_r>
 800c092:	2800      	cmp	r0, #0
 800c094:	dbed      	blt.n	800c072 <__swhatbuf_r+0x12>
 800c096:	9901      	ldr	r1, [sp, #4]
 800c098:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c09c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0a0:	4259      	negs	r1, r3
 800c0a2:	4159      	adcs	r1, r3
 800c0a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0a8:	e7eb      	b.n	800c082 <__swhatbuf_r+0x22>

0800c0aa <__smakebuf_r>:
 800c0aa:	898b      	ldrh	r3, [r1, #12]
 800c0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ae:	079d      	lsls	r5, r3, #30
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	d507      	bpl.n	800c0c6 <__smakebuf_r+0x1c>
 800c0b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	6123      	str	r3, [r4, #16]
 800c0be:	2301      	movs	r3, #1
 800c0c0:	6163      	str	r3, [r4, #20]
 800c0c2:	b003      	add	sp, #12
 800c0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c6:	ab01      	add	r3, sp, #4
 800c0c8:	466a      	mov	r2, sp
 800c0ca:	f7ff ffc9 	bl	800c060 <__swhatbuf_r>
 800c0ce:	9f00      	ldr	r7, [sp, #0]
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	f7ff fb7d 	bl	800b7d4 <_malloc_r>
 800c0da:	b948      	cbnz	r0, 800c0f0 <__smakebuf_r+0x46>
 800c0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e0:	059a      	lsls	r2, r3, #22
 800c0e2:	d4ee      	bmi.n	800c0c2 <__smakebuf_r+0x18>
 800c0e4:	f023 0303 	bic.w	r3, r3, #3
 800c0e8:	f043 0302 	orr.w	r3, r3, #2
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	e7e2      	b.n	800c0b6 <__smakebuf_r+0xc>
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	6020      	str	r0, [r4, #0]
 800c0f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0f8:	81a3      	strh	r3, [r4, #12]
 800c0fa:	9b01      	ldr	r3, [sp, #4]
 800c0fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c100:	b15b      	cbz	r3, 800c11a <__smakebuf_r+0x70>
 800c102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c106:	4630      	mov	r0, r6
 800c108:	f000 f81e 	bl	800c148 <_isatty_r>
 800c10c:	b128      	cbz	r0, 800c11a <__smakebuf_r+0x70>
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	f023 0303 	bic.w	r3, r3, #3
 800c114:	f043 0301 	orr.w	r3, r3, #1
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	431d      	orrs	r5, r3
 800c11e:	81a5      	strh	r5, [r4, #12]
 800c120:	e7cf      	b.n	800c0c2 <__smakebuf_r+0x18>
	...

0800c124 <_fstat_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	2300      	movs	r3, #0
 800c128:	4d06      	ldr	r5, [pc, #24]	@ (800c144 <_fstat_r+0x20>)
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	4611      	mov	r1, r2
 800c130:	602b      	str	r3, [r5, #0]
 800c132:	f7f5 fd00 	bl	8001b36 <_fstat>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d102      	bne.n	800c140 <_fstat_r+0x1c>
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	b103      	cbz	r3, 800c140 <_fstat_r+0x1c>
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	bd38      	pop	{r3, r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	200017b4 	.word	0x200017b4

0800c148 <_isatty_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	2300      	movs	r3, #0
 800c14c:	4d05      	ldr	r5, [pc, #20]	@ (800c164 <_isatty_r+0x1c>)
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	602b      	str	r3, [r5, #0]
 800c154:	f7f5 fcff 	bl	8001b56 <_isatty>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_isatty_r+0x1a>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_isatty_r+0x1a>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	200017b4 	.word	0x200017b4

0800c168 <_init>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	bf00      	nop
 800c16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16e:	bc08      	pop	{r3}
 800c170:	469e      	mov	lr, r3
 800c172:	4770      	bx	lr

0800c174 <_fini>:
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	bf00      	nop
 800c178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17a:	bc08      	pop	{r3}
 800c17c:	469e      	mov	lr, r3
 800c17e:	4770      	bx	lr
